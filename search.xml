<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DataGrip-2018.3.4-数据导出配置案例</title>
    <url>/58859900-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>官方文档：<a href="https://www.jetbrains.com/help/datagrip">https://www.jetbrains.com/help/datagrip</a> ，该文档默认是最新版本，可手动选择旧版本。</p>
<h1 id="1-数据导出"><a href="#1-数据导出" class="headerlink" title="1 数据导出"></a>1 数据导出</h1><p>DataGrip 导出整个数据库或单个表均支持两种方式，<code>Dump Data to File(s)</code> 以及 <code>Dump with ‘mysqldump’</code>。以下例子均采用 MySQL</p>
<h2 id="1-1-Dump-Data-to-File-s"><a href="#1-1-Dump-Data-to-File-s" class="headerlink" title="1.1 Dump Data to File(s)"></a>1.1 Dump Data to File(s)</h2><p>导出整个数据库的菜单选项如下所示。导出单个表的菜单选项减少了 <code>Overwrite Existing Files</code> 和 <code>Single File</code>，其余相同。</p>
<blockquote>
<p>注：如果数据库只有一个表，菜单与导出单个表的相同</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----------------------------------|【导出格式】</span><br><span class="line">SQL Inserts</span><br><span class="line">SQL Updates</span><br><span class="line">HTML Table</span><br><span class="line">----------------------------------|【导出格式】</span><br><span class="line">Tab-separated (TSV)</span><br><span class="line">Comma-separated (CSV)</span><br><span class="line">----------------------------------|【导出格式】</span><br><span class="line">HTML-Groovy.html.groovy</span><br><span class="line">HTML-JavaScript.html.js</span><br><span class="line">SQL-Insert-Statements.sql.groovy</span><br><span class="line">XML-Groovy.xml,groovy</span><br><span class="line">CSV-Groovy.csv.groovy</span><br><span class="line">JSON-Groovy.json.groovy</span><br><span class="line">----------------------------------|【行为】</span><br><span class="line">Skip Computed Columns (SQL)【不添加计算列】</span><br><span class="line">Skip Generated Columns (SQL)【不添加自动生成的列，如自动增长列】</span><br><span class="line">Add Table Definition (SQL)【添加表定义】</span><br><span class="line">Overwrite Existing Files【导出整个数据库时可用。若出现重名，不勾选时生成文件名后有序号，勾选则覆盖】</span><br><span class="line">Single File【导出整个数据库时可用。将各个表的 sql 合并到一个文件，否则每个表分别生成一个文件。勾选 Single File 后，Overwrite Existing Files 失效，无论是否勾选。此时若出现重名，将弹出对话框提示是否覆盖或改名】</span><br><span class="line">----------------------------------|</span><br><span class="line">Configure CSV Formats...</span><br><span class="line">Go to Scripts Directory</span><br><span class="line">----------------------------------|</span><br></pre></td></tr></table></figure>

<p>创建数据库 onlytest，包含两个结构类似的表 employee、manager，其中 employee 包含计算列。创建 sql 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> onlytest.employee</span><br><span class="line">(</span><br><span class="line">  ID       <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name     tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age      <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  tenyears <span class="type">int</span> <span class="keyword">as</span> ((`age` <span class="operator">+</span> <span class="number">10</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> onlytest.manager</span><br><span class="line">(</span><br><span class="line">  ID   <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age  <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-1-Add-Table-Definition-SQL"><a href="#1-1-1-Add-Table-Definition-SQL" class="headerlink" title="1.1.1 Add Table Definition (SQL)"></a>1.1.1 Add Table Definition (SQL)</h3><p>若勾选 <code>Add Table Definition (SQL)</code>、<code>Single File</code>，导出格式选择 <code>SQL Inserts</code>，则在添加数据前创建表时的定义（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee</span><br><span class="line">(</span><br><span class="line">  ID       <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name     tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age      <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  tenyears <span class="type">int</span> <span class="keyword">as</span> ((`age` <span class="operator">+</span> <span class="number">10</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> manager</span><br><span class="line">(</span><br><span class="line">  ID   <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age  <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<p>不勾选则仅生成 insert（<code>SQL Updates</code> 结果以此类推）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-Skip-Generated-Columns-SQL"><a href="#1-1-2-Skip-Generated-Columns-SQL" class="headerlink" title="1.1.2 Skip Generated Columns (SQL)"></a>1.1.2 Skip Generated Columns (SQL)</h3><p>若勾选 <code>Skip Generated Columns (SQL)</code>、<code>Single File</code>，不勾选 <code>Add Table Definition (SQL)</code>，导出格式选择 <code>SQL Inserts</code>，则没有自动增长的 ID 列，（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-Skip-Computed-Columns-SQL"><a href="#1-1-3-Skip-Computed-Columns-SQL" class="headerlink" title="1.1.3 Skip Computed Columns (SQL)"></a>1.1.3 Skip Computed Columns (SQL)</h3><p>若勾选 <code>Skip Computed Columns (SQL)</code>、<code>Single File</code>，不勾选 <code>Add Table Definition (SQL)</code>，导出格式选择 <code>SQL Inserts</code>，则没有 tenyears 列，（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-2-Dump-with-‘mysqldump’"><a href="#1-2-Dump-with-‘mysqldump’" class="headerlink" title="1.2 Dump with ‘mysqldump’"></a>1.2 Dump with ‘mysqldump’</h2><p>经过实测发现，当数据量较大时，使用 <code>Dump Data to File(s)</code> 方式导出的 sql 文件与 <code>Dump with ‘mysqldump’</code> 方式相比会大很多，可能是由于前者重复字符量大以及换行多导致。因此推荐优先使用后者导出。</p>
<p>导出整个数据库和单个表的菜单选项相同，故合并讨论。<code>Dump with ‘mysqldump’</code> 有如下菜单选项：</p>
<ul>
<li>Multiple rows inserts【将 insert 语句合并为一行】</li>
<li>Add drop table【增加判断条件，若表存在则删除】</li>
<li>Disable keys【禁用索引】</li>
<li>Delay inserts【提示错误 <code>mysqldump: [ERROR] unknown option &#39;--delayed-insert&#39;.</code>，无输出结果】</li>
<li>MySQL create table options【若不勾选，暂时未发现有明显差异】</li>
<li>Lock tables【锁表，可能是防止有新数据在导出时进入】</li>
<li>Add locks【导入时，在执行 insert 前添加 write 锁，完成后解除】</li>
<li>Add drop trigger【导入时，删除对方的触发器】</li>
</ul>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><p>勾选 Multiple rows inserts、Add drop table、MySQL create table options、Add drop trigger，生成结果如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 8.0.18, for osx10.14 (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: 127.0.0.1    Database: onlytest</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version	8.0.18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `employee`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employee`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee` (</span><br><span class="line">  `ID` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` tinytext <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenyears` <span class="type">int</span>(<span class="number">11</span>) GENERATED ALWAYS <span class="keyword">AS</span> ((`age` <span class="operator">+</span> <span class="number">10</span>)) VIRTUAL,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `employee`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `manager`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `manager`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `manager` (</span><br><span class="line">  `ID` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` tinytext <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `manager`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump completed on 2020-02-19 20:43:57</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h3><p>若增加勾选 Disable keys，禁用索引，在大批量导入时先禁用索引，在完全导入后，再开启索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `employee` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `employee` ENABLE KEYS */</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `manager` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `manager` ENABLE KEYS */</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例 3"></a>案例 3</h3><p>勾选 Add locks，添加了 write 锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">LOCK TABLES `employee` WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">...</span><br><span class="line">LOCK TABLES `manager` WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="其他-mysqldump-参数（待定）"><a href="#其他-mysqldump-参数（待定）" class="headerlink" title="其他 mysqldump 参数（待定）"></a>其他 mysqldump 参数（待定）</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="">xxx</a></td>
<td align="center">xxx</td>
</tr>
</tbody></table>
<h1 id="2-查看创建脚本"><a href="#2-查看创建脚本" class="headerlink" title="2 查看创建脚本"></a>2 查看创建脚本</h1><p>右键 SQL Script 选择 SQL Generator</p>
<h1 id="3-执行-SQL"><a href="#3-执行-SQL" class="headerlink" title="3 执行 SQL"></a>3 执行 SQL</h1><p>右键 New 选择 Console，</p>
]]></content>
      <categories>
        <category>配置案例</category>
      </categories>
      <tags>
        <tag>DataGrip</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA-快捷键及常用配置</title>
    <url>/5885c010-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<img src="/5885c010-2a1e-11ee-846a-89c1529ebdf1/1.png" class="">

<img src="/5885c010-2a1e-11ee-846a-89c1529ebdf1/2.png" class="">

<!-- 
符号 	说明
⌘ 	Command
⇧ 	Shift
⌥ 	Option
⌃ 	Control
↩︎ 	Return/Enter
⌫ 	Delete
⌦ 	向前删除键（Fn+Delete）
↑ 	上箭头
↓ 	下箭头
→ 	右箭头
← 	左箭头
⇞ 	Page Up（Fn+↑）
⇟ 	Page Down（Fn+↓）
Home 	Fn + ←
End 	Fn + →
⇥ 	右制表符（Tab键）
⇤ 	左制表符（Shift+Tab）
⎋ 	Escape (Esc)
 -->

<h2 id="macOS-IDEA-默认常用快捷键"><a href="#macOS-IDEA-默认常用快捷键" class="headerlink" title="macOS IDEA 默认常用快捷键"></a>macOS IDEA 默认常用快捷键</h2><ul>
<li>删除行 <code>⌘Y</code></li>
<li>查看实现当前接口全部类或当前类的全部子类（Type hierarchy） <code>⌃H</code></li>
<li>查看所有方法 <code>⌘7</code></li>
<li>从当前行切换到下一行 <code>⇧↩︎</code></li>
<li>全局搜索（Search everywhere） <code>Double⇧</code></li>
<li>格式化代码（Reformat Code） <code>⌥⌘L</code></li>
<li>往上移动代码块或行 <code>⇧⌘↑</code></li>
<li>往下移动代码块或行 <code>⇧⌘↓</code></li>
</ul>
<h2 id="格式化-Java-代码时让注释不在行首"><a href="#格式化-Java-代码时让注释不在行首" class="headerlink" title="格式化 Java 代码时让注释不在行首"></a>格式化 Java 代码时让注释不在行首</h2><p>Preference → Editor → Code Style → Java，取消「Line comment at first column」和「Block comment at first column」复选即可。</p>
<h2 id="Java-代码自动导入依赖"><a href="#Java-代码自动导入依赖" class="headerlink" title="Java 代码自动导入依赖"></a>Java 代码自动导入依赖</h2><p>Preference → Editor → General → Auto Import，「Insert imports on paste」选择「All」即可。</p>
<h2 id="自动完成关键字时不区分大小写"><a href="#自动完成关键字时不区分大小写" class="headerlink" title="自动完成关键字时不区分大小写"></a>自动完成关键字时不区分大小写</h2><p>Preference → Editor → General → Code Completion，取消「Match case」复选即可。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS-或-Win-环境下问题杂烩及备忘</title>
    <url>/5885c011-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="macOS-10-14-6-运行应用时提示「无法打开“xxxxx”，因为-Apple-无法检查其是否包含恶意软件。」"><a href="#macOS-10-14-6-运行应用时提示「无法打开“xxxxx”，因为-Apple-无法检查其是否包含恶意软件。」" class="headerlink" title="macOS 10.14.6 运行应用时提示「无法打开“xxxxx”，因为 Apple 无法检查其是否包含恶意软件。」"></a>macOS 10.14.6 运行应用时提示「无法打开“xxxxx”，因为 Apple 无法检查其是否包含恶意软件。」</h2><p>该提示与「“xxxxx”已损坏，打不开。您应该将它移到废纸娄。」解决方案相同，需要开启「允许安装软件来自任何来源」。打开终端，输入命令：<code>sudo spctl --master-disable</code>，输入密码后生效。</p>
<h2 id="macOS-查看隐藏文件"><a href="#macOS-查看隐藏文件" class="headerlink" title="macOS 查看隐藏文件"></a>macOS 查看隐藏文件</h2><p><code>⌘+⇧+.</code></p>
<h2 id="win10-使用-ssh-连接远程服务器"><a href="#win10-使用-ssh-连接远程服务器" class="headerlink" title="win10 使用 ssh 连接远程服务器"></a>win10 使用 ssh 连接远程服务器</h2><ul>
<li>依次进入：开始菜单 → 设置 → 应用 → 应用和功能，选择「管理可选功能」</li>
<li>进入添加功能，添加「OpenSSH 服务端」</li>
<li>从开始菜单打开 Windows PowerShell 即可使用</li>
</ul>
<h2 id="VSCode-利用正则删除全部空行"><a href="#VSCode-利用正则删除全部空行" class="headerlink" title="VSCode 利用正则删除全部空行"></a>VSCode 利用正则删除全部空行</h2><p><code>^\s*(?=\r?$)\n</code> 匹配所有空行，替换为无字符即可</p>
<h2 id="macOS-每次开机通过-ssh-add-自动添加私钥"><a href="#macOS-每次开机通过-ssh-add-自动添加私钥" class="headerlink" title="macOS 每次开机通过 ssh-add 自动添加私钥"></a>macOS 每次开机通过 ssh-add 自动添加私钥</h2><p>打开自动操作，类型选择「应用程序」</p>
<p>选择「运行 shell 脚本」，双击，在右侧设置「名称」，输入如下命令行（参考）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>进入「偏好设置」，进入「用户与群组」，进入「登陆项」，选择之前命名的应用即可</p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>macos</tag>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-配置阿里云中央仓库和自定义本地仓库</title>
    <url>/5885e721-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在国内访问 Maven 仓库的速度太慢，导致使用 IDEA 建立 Maven 项目会出现没有 src 目录结构的情况。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="中央仓库配置"><a href="#中央仓库配置" class="headerlink" title="中央仓库配置"></a>中央仓库配置</h3><p>在 Maven 安装目录下的 settings.xml 文件中的增加以下内容，使用阿里云的中央仓库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义本地仓库配置"><a href="#自定义本地仓库配置" class="headerlink" title="自定义本地仓库配置"></a>自定义本地仓库配置</h3><p>在 Maven 安装目录下的 settings.xml 文件中设置本地仓库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\myProgram\apache-maven-3.5.2\repositoryx<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-配置文件的结构详解及案例</title>
    <url>/5885e720-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>nginx 源码：<a href="https://trac.nginx.org/nginx/browser">https://trac.nginx.org/nginx/browser</a></li>
<li>nginx 官网：<a href="http://www.nginx.org/">http://www.nginx.org/</a></li>
</ul>
<h2 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块1</span><br><span class="line">    &#123;</span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块1</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN]   #location块2</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server        #server块2</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>全局块：配置影响 nginx 全局的指令。一般有运行 nginx 服务器的用户组，nginx 进程 pid 存放路径，日志存放路径，配置文件引入，允许生成 worker process 数等。</li>
<li>events 块：配置影响 nginx 服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li>http 块：配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type 定义，日志自定义，是否使用 sendfile 传输文件，连接超时时间，单连接请求数等。</li>
<li>server 块：配置虚拟主机的相关参数，一个 http 中可以有多个 server。</li>
<li>location 块：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
<h2 id="配置文件细节"><a href="#配置文件细节" class="headerlink" title="配置文件细节"></a>配置文件细节</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置用户或者组，默认为nobody nobody</span><br><span class="line">user administrator administrators;</span><br><span class="line"></span><br><span class="line">#允许生成的进程数，默认为1，也可以设置为auto，这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是auto值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</span><br><span class="line">worker_processes 2;</span><br><span class="line"></span><br><span class="line">#默认是没有设置，可以限制为操作系统最大的限制65535。</span><br><span class="line">worker_rlimit_nofile 10240</span><br><span class="line"></span><br><span class="line">#指定nginx进程运行文件存放地址</span><br><span class="line">pid /nginx/pid/nginx.pid;</span><br><span class="line"></span><br><span class="line">#设置日志路径和级别。这个设置可以放入全局块，http块，server块，可选级别：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">error_log log/error.log;</span><br><span class="line">error_log log/error.log notice;</span><br><span class="line">error_log log/error.log debug;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  #设置网路连接序列化，防止惊群现象发生，默认为on，惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</span><br><span class="line">  accept_mutex on;</span><br><span class="line"></span><br><span class="line">  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">  multi_accept on;</span><br><span class="line"></span><br><span class="line">  #事件驱动模型，可选：select|poll|kqueue|epoll|resig|/dev/poll|eventport，在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</span><br><span class="line">  use epoll;</span><br><span class="line"></span><br><span class="line">  #最大连接数，默认为512，每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）</span><br><span class="line">  #nginx作为反向代理服务器，计算公式最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</span><br><span class="line">  worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  #文件扩展名与文件类型映射表</span><br><span class="line">  include mime.types;</span><br><span class="line"></span><br><span class="line">  #默认文件类型，默认为text/plain</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  #取消服务日志</span><br><span class="line">  #access_log off;</span><br><span class="line"></span><br><span class="line">  #自定义格式</span><br><span class="line">  log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;;</span><br><span class="line"></span><br><span class="line">  #自定义格式含义</span><br><span class="line">  #$remote_addr与$http_x_forwarded_for，记录客户端的ip地址</span><br><span class="line">  #$remote_user，记录客户端用户名称</span><br><span class="line">  #$time_local，记录访问时间与时区</span><br><span class="line">  #$request，记录请求的url与http协议</span><br><span class="line">  #$status，记录请求状态；成功是200</span><br><span class="line">  #$body_bytes_s ent，记录发送给客户端文件主体内容大小</span><br><span class="line">  #$http_referer，记录从那个页面链接访问过来的</span><br><span class="line">  #$http_user_agent，记录客户端浏览器的相关信息</span><br><span class="line"></span><br><span class="line">  #combined为日志格式的默认值</span><br><span class="line">  access_log log/access.log myFormat;</span><br><span class="line"></span><br><span class="line">  #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块，开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class="line">  sendfile on;</span><br><span class="line"></span><br><span class="line">  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限</span><br><span class="line">  sendfile_max_chunk 100k;</span><br><span class="line"></span><br><span class="line">  #连接超时时间，默认为75s，可以在http，server，location块，长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">  #http_proxy 设置</span><br><span class="line">  #允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span><br><span class="line">  client_max_body_size  10m;</span><br><span class="line"></span><br><span class="line">  #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">  client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">  proxy_connect_timeout 75;</span><br><span class="line">  proxy_send_timeout  75;</span><br><span class="line">  proxy_read_timeout  75;</span><br><span class="line">  proxy_buffer_size 4k;</span><br><span class="line">  proxy_buffers 4 32k;</span><br><span class="line">  proxy_busy_buffers_size 64k;</span><br><span class="line">  proxy_temp_file_write_size  64k;</span><br><span class="line">  proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class="line"></span><br><span class="line">  #设定实际的服务器列表</span><br><span class="line">  #这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以host:port options; 方式组织在 &#123;&#125; 中。如果后端被代理的只有一台，也可以直接写在</span><br><span class="line">  upstream mysvr &#123;   </span><br><span class="line">    server 127.0.0.1:7878;</span><br><span class="line">    #热备</span><br><span class="line">    server 192.168.10.121:3333 backup;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #错误页，若该配置要生效，还需要配置proxy_intercept_errors</span><br><span class="line">  error_page 404 https://www.baidu.com;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      #单连接请求上限次数</span><br><span class="line">      keepalive_requests  120;</span><br><span class="line">      #监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</span><br><span class="line">      listen  4545;</span><br><span class="line">      #监听地址，可以通过正则匹配。  </span><br><span class="line">      server_name 127.0.0.1;</span><br><span class="line">      #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">      location  ~*^.+$ &#123;</span><br><span class="line">        #根目录</span><br><span class="line">        #root path;</span><br><span class="line">        #设置默认页</span><br><span class="line">        #index vv.txt;</span><br><span class="line">        #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">        proxy_pass  http://mysvr;</span><br><span class="line">        #拒绝的ip</span><br><span class="line">        deny  127.0.0.1;</span><br><span class="line">        #允许的ip</span><br><span class="line">        allow 172.18.5.54;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      server_name  itoatest.example.com;</span><br><span class="line">      root   /apps/oaapp;</span><br><span class="line">      charset utf-8;</span><br><span class="line">      access_log  logs/host.access.log  main;</span><br><span class="line">      #对/所有做负载均衡+反向代理</span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /apps/oaapp;</span><br><span class="line">          index  index.jsp index.html index.htm;</span><br><span class="line">          proxy_pass  http://backend;</span><br><span class="line">          proxy_redirect off;</span><br><span class="line">          # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">          proxy_set_header  Host  $host;</span><br><span class="line">          proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">      &#125;</span><br><span class="line">      #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class="line">      location  ~* /download/ &#123;</span><br><span class="line">          root /apps/oa/fs;</span><br><span class="line">          #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">          expires 30d;</span><br><span class="line">      &#125;</span><br><span class="line">      location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span><br><span class="line">      &#123;   </span><br><span class="line">          root /apps/oaapp;</span><br><span class="line">          expires 7d;</span><br><span class="line">      &#125;</span><br><span class="line">      location /nginx_status &#123;</span><br><span class="line">          stub_status on;</span><br><span class="line">          access_log off;</span><br><span class="line">          allow 192.168.10.0/24;</span><br><span class="line">          deny all;</span><br><span class="line">      &#125;</span><br><span class="line">      location ~ ^/(WEB-INF)/ &#123;</span><br><span class="line">          deny all;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #error_page  404  /404.html;</span><br><span class="line">      # redirect server error pages to the static page /50x.html</span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宝塔Linux面板默认配置（Nginx-1-8）"><a href="#宝塔Linux面板默认配置（Nginx-1-8）" class="headerlink" title="宝塔Linux面板默认配置（Nginx 1.8）"></a>宝塔Linux面板默认配置（Nginx 1.8）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log  /www/wwwlogs/nginx_error.log  crit;</span><br><span class="line">pid        /www/server/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">events  &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 51200;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">http  &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">    		#include luawaf.conf;</span><br><span class="line"></span><br><span class="line">    		include proxy.conf;</span><br><span class="line"></span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        server_names_hash_bucket_size 512;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">    		fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">    		limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line"></span><br><span class="line">        server_tokens off;</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">server  &#123;</span><br><span class="line">        listen 888;</span><br><span class="line">        server_name www.bt.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /www/server/phpmyadmin;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /www/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">include /www/server/panel/vhost/nginx/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="http反向代理配置案例"><a href="#http反向代理配置案例" class="headerlink" title="http反向代理配置案例"></a>http反向代理配置案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user www;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  /www/server/logs/error.log;</span><br><span class="line">error_log  /www/server/logs/notice.log  notice;</span><br><span class="line">error_log  /www/server/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        /www/server/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">    include       /www/server/conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #设定日志</span><br><span class="line">    log_format  main  &#x27;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log    /www/server/logs/access.log main;</span><br><span class="line">    rewrite_log     on;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    keepalive_timeout  120;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    #gzip压缩开关</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #设定实际的服务器列表</span><br><span class="line">    upstream server_list&#123;</span><br><span class="line">        server 127.0.0.1:8089;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #HTTP服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name  www.test.cn;</span><br><span class="line">        index index.html</span><br><span class="line">        root /www/server/test;</span><br><span class="line"></span><br><span class="line">        #编码格式</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #代理配置参数</span><br><span class="line">        proxy_connect_timeout 180;</span><br><span class="line">        proxy_send_timeout 180;</span><br><span class="line">        proxy_read_timeout 180;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">        #反向代理的路径</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://server_list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #设置静态文件映射的路径</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            root /www/server/views;</span><br><span class="line">            #过期时限30天，若变动较少，可适当增加天数；反之减少。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status           on;</span><br><span class="line">            access_log            on;</span><br><span class="line">            auth_basic            &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file  conf/htpasswd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问.htxxx文件</span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #错误处理页面（可选）</span><br><span class="line">        #error_page   404              /404.html;</span><br><span class="line">        #error_page   500 502 503 504  /50x.html;</span><br><span class="line">        #location = /50x.html &#123;</span><br><span class="line">        #    root   html;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="https反向代理配置案例"><a href="#https反向代理配置案例" class="headerlink" title="https反向代理配置案例"></a>https反向代理配置案例</h2><p>安全性要求比较高的站点，可能会使用 HTTPS协议。HTTPS的固定端口号为443，使用SSL标准需要引入安全证书，所以在nginx.conf中需要指定证书和对应的key，其他设置和http反向代理一样，只是在Server部分配置有些不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#HTTP服务器</span><br><span class="line">  server &#123;</span><br><span class="line">      #监听443端口</span><br><span class="line">      listen  443 ssl;</span><br><span class="line"></span><br><span class="line">      #定义www.test.cn</span><br><span class="line">      server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">      #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">      ssl_certificate      cert.pem;</span><br><span class="line">      #ssl证书key位置</span><br><span class="line">      ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">      #ssl配置参数（可选）</span><br><span class="line">      ssl_session_cache    shared:SSL:1m;</span><br><span class="line">      ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">      #数字签名，此处使用MD5</span><br><span class="line">      ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">      ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /root;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡案例"><a href="#负载均衡案例" class="headerlink" title="负载均衡案例"></a>负载均衡案例</h2><p>有如下应用场景：</p>
<ul>
<li>应用分别部署在<code>192.168.1.10:80</code>、<code>192.168.1.11:80</code>、<code>192.168.1.12:80</code>三台linux环境的服务器上。</li>
<li>网站域名为：<code>www.test.cn</code>，公网IP为<code>192.168.1.10</code></li>
<li>在公网IP所在的服务器上部署nginx，对所有请求做负载均衡处理</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    #设定负载均衡的服务器列表</span><br><span class="line">    upstream server_list &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.1.10:80   weight=1;</span><br><span class="line">        server 192.168.1.11:80   weight=3;</span><br><span class="line">        server 192.168.1.12:80   weight=7;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">        #对所有请求进行负载均衡请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root        /root;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index       index.html index.htm;</span><br><span class="line">            #请求转向load_balance_server 定义的服务器列表</span><br><span class="line">            proxy_pass  http://server_list;</span><br><span class="line"></span><br><span class="line">            #其他反向代理的配置(可选)</span><br><span class="line">            #proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">            proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">            proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"></span><br><span class="line">            client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个webapp的配置案例"><a href="#多个webapp的配置案例" class="headerlink" title="多个webapp的配置案例"></a>多个webapp的配置案例</h2><p>将网站中一些功能相对独立的模块抽离出来，独立维护</p>
<ul>
<li><a href="http://www.test.cn拆分出：A、B、C三个模块">www.test.cn拆分出：A、B、C三个模块</a></li>
<li>访问上述模块的方式通过上下文(context)来进行区分:<ul>
<li><a href="http://www.test.cn/A/">www.test.cn/A/</a></li>
<li><a href="http://www.test.cn/B/">www.test.cn/B/</a></li>
<li><a href="http://www.test.cn/C/">www.test.cn/C/</a></li>
</ul>
</li>
<li>这三个应用需要分别绑定不同的端口号。那么用户在实际访问站点时，访问不同模块时为了避免带端口号访问，需要用到反向代理。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream A_server&#123;</span><br><span class="line">        server www.test.cn:8081;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream B_server&#123;</span><br><span class="line">        server www.test.cn:8082;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream C_server&#123;</span><br><span class="line">        server www.test.cn:8083;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        #默认指向A</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://A_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /A/&#123;</span><br><span class="line">            proxy_pass http://A_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /B/ &#123;</span><br><span class="line">            proxy_pass http://B_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /C/ &#123;</span><br><span class="line">            proxy_pass http://C_server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态站点配置案例"><a href="#静态站点配置案例" class="headerlink" title="静态站点配置案例"></a>静态站点配置案例</h2><p>网站静态资源都放在了&#x2F;app&#x2F;dist目录下，此时要在nginx.conf中指定首页以及这个站点的host即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            #转发任何请求到index.html</span><br><span class="line">            index index.html;</span><br><span class="line">            root /app/dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨域案例"><a href="#跨域案例" class="headerlink" title="跨域案例"></a>跨域案例</h2><p>解决跨域问题一般有两种思路：</p>
<ul>
<li>jsonp。把后端根据请求，构造json数据并返回，前端用jsonp跨域。</li>
<li>CORS。在后端服务器设置http响应头，把需要运行访问的域名加入加入Access-Control-Allow-Origin中。nginx 根据这个思路，提供了一种解决跨域的解决方案。举例：<a href="http://www.test.cn是由一个前端app,一个后端app组成的.前端端口号为9000,后端端口号为8080.前端和后端如果使用http进行交互时,请求会被拒绝,因为存在跨域问题.此时,在/">www.test.cn是由一个前端app，一个后端app组成的。前端端口号为9000，后端端口号为8080。前端和后端如果使用http进行交互时，请求会被拒绝，因为存在跨域问题。此时，在</a> enable-cors.conf 文件中设置 cors：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># allow origin list</span><br><span class="line">set $ACAO &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line"># set single origin</span><br><span class="line">if ($http_origin ~* (www.test.cn)$) &#123;</span><br><span class="line">  set $ACAO $http_origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($cors = &quot;trueget&quot;) &#123;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Origin&#x27; &quot;$http_origin&quot;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;options&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;GET&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;get&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;POST&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;post&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在服务器中include enable-cors.conf，即引入跨域配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可直接在 nginx config 中 include（推荐）</span><br><span class="line"># www.test.cn域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"></span><br><span class="line">upstream front_server&#123;</span><br><span class="line">  server www.test.cn:9000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream api_server&#123;</span><br><span class="line">  server www.test.cn:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">  location ~ ^/api/ &#123;</span><br><span class="line">    include enable-cors.conf;</span><br><span class="line">    proxy_pass http://api_server;</span><br><span class="line">    rewrite &quot;^/api/(.*)$&quot; /$1 break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ ^/ &#123;</span><br><span class="line">    proxy_pass http://front_server;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="upstream的几种配置方式"><a href="#upstream的几种配置方式" class="headerlink" title="upstream的几种配置方式"></a>upstream的几种配置方式</h2><p>第一种：轮询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1:3000;</span><br><span class="line">server 192.168.0.1:3001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种：权重</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1 weight=2;</span><br><span class="line">server 192.168.0.2 weight=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式可解决服务器性能不等的情况下轮询比率的调配</p>
<p>第三种：ip_hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式会根据来源IP和后端配置来做hash分配，确保固定IP只访问一个后端</p>
<p>第四种：fair<br>需要安装Upstream Fair Balancer Module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式会根据后端服务的响应时间来分配，响应时间短的后端优先分配</p>
<p>第五种：自定义hash<br>需要安装Upstream Hash Module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">hash $request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式可以根据给定的字符串进行Hash分配</p>
<p>具体应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name .test.com;</span><br><span class="line">  charset utf-8;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://test/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>upstream每个地址可设置参数为：</p>
<ul>
<li>down: 表示此台server暂时不参与负载。</li>
<li>weight: 默认为1，weight越大，负载的权重就越大。</li>
<li>max_fails: 允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误。</li>
<li>fail_timeout: max_fails次失败后，暂停的时间。</li>
<li>backup: 其它所有的非backup机器down或者忙的时候，请求backup机器，应急措施。</li>
</ul>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode-常用插件及配置</title>
    <url>/58860e30-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>代码格式化插件，支持的语言有：JavaScript、TypeScript、Flow、JSX、JSON、CSS、SCSS、Less、HTML、Vue、Angular、GraphQL、Markdown、YAML</p>
<p>Prettier 使用 cosmiconfig 来支持配置文件。这意味着你可以通过以下方式配置 prettier（按优先级顺序）：</p>
<ul>
<li>在 <code>package.json</code> 文件中建立 <code>&quot;prettier&quot;</code> 键</li>
<li>新建一个内容是 JSON 或 YAML 格式的 <code>.prettierrc</code> 文件，扩展名可选：<code>.json/.yaml/.yml</code>，不带扩展名的优先级最高。</li>
<li>使用 <code>.prettierrc.js</code> 或 <code>prettier.config.js</code> 文件导出对象</li>
<li>使用 <code>.prettierrc.toml</code> 文件，格式是 TOML，（ <code>.toml</code> 扩展名是必须的）</li>
</ul>
<p>配置文件将从正在格式化的文件的位置开始解析，并在文件树中搜索，直到找到（或没有找到）配置文件。配置文件的选项与 API 选项相同。JSON 格式的配置文件示例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="jsxBracketSameLine"><a href="#jsxBracketSameLine" class="headerlink" title="jsxBracketSameLine"></a><a href="https://prettier.io/docs/en/options.html#jsx-brackets">jsxBracketSameLine</a></h4><p>将多行 JSX 元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不应用于自关闭元素）。默认值为 <code>false</code>。</p>
<h4 id="arrowParens"><a href="#arrowParens" class="headerlink" title="arrowParens"></a><a href="https://prettier.io/docs/en/options.html#arrow-function-parentheses">arrowParens</a></h4><p>箭头函数的单个参数周围包含圆括号。可选值为：<code>&quot;always&quot;</code> 和 <code>&quot;avoid&quot;</code>，默认值为 <code>&quot;avoid&quot;</code>，即单个参数周围默认不包含圆括号。</p>
<h4 id="https-prettier-io-docs-en-options-html-bracket-spacing"><a href="#https-prettier-io-docs-en-options-html-bracket-spacing" class="headerlink" title="https://prettier.io/docs/en/options.html#bracket-spacing"></a><a href="https://prettier.io/docs/en/options.html#bracket-spacing">https://prettier.io/docs/en/options.html#bracket-spacing</a></h4><p>更多说明及示例可参看文档：<a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p>
]]></content>
      <categories>
        <category>配置案例</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>conda-依赖管理</title>
    <url>/58860e31-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>创建一个新环境：<code>conda create -n &lt;env_name&gt; &lt;python=version&gt; &lt;package_list&gt;</code></p>
<blockquote>
<p>例子：<code>conda create -n env python=3.10 numpy pandas</code>，创建名为<code>env</code>的环境，python 版本为 3.10，同时安装 numpy 和 pandas。</p>
</blockquote>
<p>进入环境：<code>conda activate &lt;env_name&gt;</code></p>
<p>退出环境：<code>conda deavtivate</code></p>
<p>查看所有环境：<code>conda env list</code></p>
<p>复制环境：<code>conda create --name &lt;new_env_name&gt; --clone &lt;old_env_name&gt;</code></p>
<p>精确查找依赖：<code>conda search --full-name &lt;package_full_name&gt;</code></p>
<p>模糊查找依赖：<code>conda search &lt;依赖名称包含的字符串&gt;</code></p>
<p>查看已经安装的依赖：<code>conda list</code></p>
<p>安装依赖：<code>conda install --name &lt;env_name&gt; &lt;package_name&gt;</code></p>
<p>在当前环境安装依赖：<code>conda install &lt;package_name&gt;</code></p>
<p>卸载依赖：<code>conda remove --name &lt;env_name&gt; &lt;package_name&gt;</code></p>
<p>在当前环境卸载依赖：<code>conda remove &lt;package_name&gt;</code></p>
<p>更新全部依赖：<code>conda update --all</code></p>
<p>更新指定依赖：<code>conda update &lt;package_name&gt;</code></p>
<h2 id="环境依赖的导出和恢复"><a href="#环境依赖的导出和恢复" class="headerlink" title="环境依赖的导出和恢复"></a>环境依赖的导出和恢复</h2><p>导出当前环境依赖：<code>conda env export &gt; environment.yaml</code></p>
<p>恢复依赖：<code>conda env create -f environment.yml -n &lt;envname&gt;</code></p>
<blockquote>
<p>注意：<code>environment.yaml</code>文件<code>name</code>属性是导出时环境的名称或绝对路径，恢复时为防止冲突，最好使用<code>-n</code>参数显示指定新名称，此时恢复的环境会出现在<code>env</code>目录下，直接按新名称引用即可。</p>
</blockquote>
<ul>
<li>vscode：<code>ctrl+shift+p</code> -&gt; <code>Select Interpreter</code></li>
<li>pycharm：<code>Settings</code> -&gt; <code>Project</code> -&gt; <code>Python Interpreter</code> -&gt; <code>Add Python Interpreter</code> -&gt; <code>Conda Environment</code></li>
</ul>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>常规命令：<code>conda remove --name &lt;env_name&gt; --all</code>，按「Y」确认后执行删除，但<code>env</code>目录下有残余，手动清除即可；若环境没有名称，如下所示。按目前使用经验，用 vscode 插件生成的 conda 环境会出现这种情况，在源码目录下以<code>.conda</code>出现。直接删除即可，再次查看环境列表会消失。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base                     C:\Users\pro\anaconda3</span><br><span class="line">new                   *  C:\Users\pro\anaconda3\envs\new</span><br><span class="line">python                   C:\Users\pro\anaconda3\envs\python</span><br><span class="line">testq                    C:\Users\pro\anaconda3\envs\testq</span><br><span class="line">testx                    C:\Users\pro\anaconda3\envs\testx</span><br><span class="line">                         c:\Users\Desktop\py_mod\.conda</span><br><span class="line">                         c:\Users\Desktop\test38\.conda</span><br></pre></td></tr></table></figure>

<h2 id="其他管理方式"><a href="#其他管理方式" class="headerlink" title="其他管理方式"></a>其他管理方式</h2><p>管理依赖树：<code>pip install pipdeptree</code>，可查看每个依赖引用的其他依赖。</p>
<p>整体删除依赖及其引用：<code>pip install pip-autoremove</code>，防止遗漏。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle-问题备忘</title>
    <url>/58860e32-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol>
<li>下载</li>
<li>解压</li>
<li>配置系统变量 <code>%GRADLE_HOME%</code> 指向解压路径，配置 path 变量，添加 <code>%GRADLE_HOME%\bin</code>。</li>
<li>测试，输入命令 <code>gradle -v</code> 提示版本说明配置成功。</li>
</ol>
<blockquote>
<p>环境变量也可以不配置，在 IDE 中（如 Idea）指定路径即可。</p>
</blockquote>
<h2 id="二、异常及报错的解决方案汇总"><a href="#二、异常及报错的解决方案汇总" class="headerlink" title="二、异常及报错的解决方案汇总"></a>二、异常及报错的解决方案汇总</h2><h3 id="⭐-本地仓库配置参考"><a href="#⭐-本地仓库配置参考" class="headerlink" title="⭐ 本地仓库配置参考"></a>⭐ 本地仓库配置参考</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⭐-指定编译版本"><a href="#⭐-指定编译版本" class="headerlink" title="⭐ 指定编译版本"></a>⭐ 指定编译版本</h3><p>可选，在 Idea 中可独立配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sourceCompatibility = 1.8</span><br><span class="line">targetCompatibility = 1.8</span><br></pre></td></tr></table></figure>

<h3 id="⭐-显示指定依赖版本"><a href="#⭐-显示指定依赖版本" class="headerlink" title="⭐ 显示指定依赖版本"></a>⭐ 显示指定依赖版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        force &#x27;org.apache.tomcat.embed:tomcat-embed-core:8.5.39&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⭐-如果使用了中文注释，编译时报错"><a href="#⭐-如果使用了中文注释，编译时报错" class="headerlink" title="⭐ 如果使用了中文注释，编译时报错"></a>⭐ 如果使用了中文注释，编译时报错</h3><p>添加 withType，编译时用 UTF-8 处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = &quot;UTF-8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gradle-强制刷新依赖"><a href="#Gradle-强制刷新依赖" class="headerlink" title="Gradle 强制刷新依赖"></a>Gradle 强制刷新依赖</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>旧项目更换环境时由于 gradle 版本不一致导致项目初始化失败。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>强制刷新依赖，步骤如下：</p>
<p>1、删除 <code>.gradle</code> 目录，其中包含了旧版本的文件。</p>
<p>2、修改 <code>gradle-wrapper.properties</code> 文件的版本号，内容如下。例如旧环境使用 6.0.1，新环境使用 6.7.1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">distributionBase=<span class="variable constant_">GRADLE_USER_HOME</span></span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-6.7.1-bin.zip</span></span><br><span class="line">zipStoreBase=<span class="variable constant_">GRADLE_USER_HOME</span></span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：仅修改版本即可，其他内容不变。</p>
</blockquote>
<p>3、项目目录下执行如下命令</p>
<ul>
<li><p>macOS：<code>./gradlew build --refresh-dependencies</code></p>
</li>
<li><p>windows：<code>gradlew build --refresh-dependencies</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ./gradlew build --refresh-dependencies</span><br><span class="line"></span><br><span class="line"><span class="title class_">Welcome</span> to <span class="title class_">Gradle</span> <span class="number">6.7</span><span class="number">.1</span>!</span><br><span class="line"></span><br><span class="line"><span class="title class_">Here</span> are the highlights <span class="keyword">of</span> <span class="variable language_">this</span> <span class="attr">release</span>:</span><br><span class="line"> - <span class="title class_">File</span> system watching is ready <span class="keyword">for</span> production use</span><br><span class="line"> - <span class="title class_">Declare</span> the version <span class="keyword">of</span> <span class="title class_">Java</span> your build requires</span><br><span class="line"> - <span class="title class_">Java</span> <span class="number">15</span> support</span><br><span class="line"></span><br><span class="line"><span class="title class_">For</span> more details see <span class="attr">https</span>:<span class="comment">//docs.gradle.org/6.7.1/release-notes.html</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="title class_">Task</span> :test</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.262</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED paused.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] o.<span class="property">s</span>.<span class="property">s</span>.<span class="property">quartz</span>.<span class="property">SchedulerFactoryBean</span>        : <span class="title class_">Shutting</span> down <span class="title class_">Quartz</span> <span class="title class_">Scheduler</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED shutting down.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED paused.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED shutdown complete.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.264</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] o.<span class="property">s</span>.<span class="property">s</span>.<span class="property">concurrent</span>.<span class="property">ThreadPoolTaskExecutor</span>  : <span class="title class_">Shutting</span> down <span class="title class_">ExecutorService</span> <span class="string">&#x27;applicationTaskExecutor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">BUILD</span> <span class="variable constant_">SUCCESSFUL</span> <span class="keyword">in</span> 1m 18s</span><br><span class="line"><span class="number">6</span> actionable <span class="attr">tasks</span>: <span class="number">6</span> executed</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><code>gradlew -? 或 -h 或 --help</code>，显示帮助信息，即会打印可选参数及参数说明信息；</p>
<p><code>gradlew --version</code>，版本号（会打印工程用的 Gradle 的版本号、Kotlin、Groovy、Ant、JVM、OS 等的版本号）；</p>
<p><code>gradlew tasks --all</code>，查看所有任务，包括缓存任务等；</p>
<p><code>gradlew clean</code>，清除工程目录下的 build 文件夹；</p>
<p><code>gradlew build</code>， 检查依赖并编译打包，debug、release 环境的包都会打出来；</p>
<p><code>gradlew assemble**_</code>，编译指定的包，如 Debug 包（gradlew assembleDebug）、Release 包（gradlew assembleRelease）、渠道包（gradlew assembleOemRelease&#x2F;assembleOemDebug）、定制的版本等等；</p>
<p><code>gradlew install_**</code>，编译并安装指定的包，如 Debug 包（gradlew installDebug）、Release 包（gradlew installOemRelease&#x2F;installOemDebug）、定制的版本等等；</p>
<p><code>gradlew uninstall\*\*</code>，卸载已安装的指定模式的包，如 Debug 包（gradlew uninstallDebug）、Release 包（gradlew uninstallRelease）、渠道包（gradlew uninstallOemRelease&#x2F;uninstallOemDebug）、定制的版本等等；</p>
<p><code>gradlew :模块名称:dependencies</code>，查看包依赖关系，如 <code>gradlew :app:dependencies</code>；</p>
<p><code>gradlew build -i 或 --info -d 或 --debug -s 或 --stacktrace</code>，编译（build）并打印 debug 模式和 info 等级的日志及所用异常的堆栈信息（–stacktrace）；</p>
<p><code>gradlew --refresh-dependencies</code>，强制刷新依赖，即检查依赖是否有更新比如动态版本、SHA1 进行本地 cache 和远程仓库散列码的对比等，有更新则下载更新进行构建；使用这种方式可以避免手动删除 cache；</p>
<p><code>gradlew clean build --refresh-dependencies</code>，组合指令，清除构建（gradlew clean）并重新构建（gradlew build），同时强制刷新依赖（gradlew –refresh-dependencies）；</p>
<p><code>gradlew --offline</code>，离线模式，即让 Gradle 只使用本地 cache 里的依赖，如果 cache 中没有也不会更新依赖，而是提示编译失败；</p>
<p><code>--info</code>，打印堆栈信息；</p>
<p><code>gradlew --daemon</code>，守护进程，使用 Gradle 的守护进程构建，能够提高构建效率，如果守护进程没启动或现有的都处于忙碌状态，就启动一个守护进程；</p>
<p><code>gradlew --no-daemon</code>，如果你已经配置为使用守护进程构建，可以使用该选项本次不用守护进程构建；</p>
<p><code>gradlew --continuous</code>，连续构建，即任务队列中即使某个任务失败，不会终止执行，而是会继续执行下一个任务；</p>
<p><code>gradlew --parallel --parallel-threads=N</code>，并行编译；</p>
<p><code>gradlew --configure-on-demand</code>，按需编译。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>gradlew 的指令有简写的方式：</p>
<p><code>gradlew --versio n</code> 可以用简写方式 <code>gradlew -v 代替</code></p>
<p><code>gradlew --hel p</code> 可以用简写方式 <code>gradlew - h</code> 或 <code>gradlew -?</code> 代替</p>
<p><code>gradlew --no-rebuil d</code> 可以用简写方式 <code>gradlew - a</code> 代替</p>
<p><code>gradlew --debu g</code> 可以用简写方式 <code>gradlew - d</code> 代替</p>
<p><code>gradlew --stacktrac e</code> 可以用简写方式 <code>gradlew -s</code> 代替</p>
<p>可以发现简写的指令只需要一个减号（<code>-</code>）开头，没有简写的指令需要用两个减号（即 <code>--</code>）开头。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>java-建立定时任务</title>
    <url>/58863540-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>Spring 3.0 之后提供了 <code>@EnableScheduling</code> 注解和 <code>@Scheduled</code> 注解实现定时任务功能。本案例使用 SpringBoot 创建定时任务，主要有三种创建方式：</p>
<ul>
<li>使用 <code>@Scheduled</code> 注解</li>
<li>实现 SchedulingConfigurer 接口</li>
<li>基于注解设定多线程定时任务</li>
</ul>
<h3 id="一、-Scheduled-注解"><a href="#一、-Scheduled-注解" class="headerlink" title="一、@Scheduled 注解"></a>一、<code>@Scheduled</code> 注解</h3><p>1、在配置类上使用 <code>@EnableScheduling</code> 注解以开启计划任务。该方式默认为单线程，开启多个任务时，任务的执行时机会受上一个任务执行时间的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnippetApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SnippetApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、使用 <code>@Scheduled</code> 注解声明这是一个定时任务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseScheduled</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/10 * *  * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、<code>@Scheduled</code> 注解有如下属性</p>
<ul>
<li>cron，接收一个 cron 表达式</li>
<li>zone 时区，接收一个 java.util.TimeZone#ID。默认是一个空字符串，取服务器所在地的时区。</li>
<li>fixedDelay，服务启动后任务立即执行首次，延迟指定时间后再次执行。例如指定值 10s，相当于 cron 表达式 <code>&quot;0/10 * * * * ?&quot;</code></li>
<li>fixedDelayString，同 fixedDelay，值为字符串，并支持占位符</li>
<li>fixedRate，上一次开始执行时间点之后多长时间再执行</li>
<li>fixedRateString 同 fixedRate，值为字符串，并支持占位符</li>
<li>initialDelay，第一次延迟多长时间后再执行</li>
<li>initialDelayString，同 initialDelay，值为字符串，并支持占位符</li>
<li>timeUnit，以上计时属性的单位，默认毫秒（<code>TimeUnit.MILLISECONDS</code>）</li>
</ul>
<p>4、cron 属性接收的 cron 表达式支持占位符</p>
<p><code>application.yml</code> 中添加如下定义</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">scheduled:</span></span><br><span class="line">  <span class="attr">cron:</span> <span class="number">0</span><span class="string">/10</span> <span class="string">*</span> <span class="string">*</span>  <span class="string">*</span> <span class="string">*</span> <span class="string">?</span></span><br></pre></td></tr></table></figure>

<p>上述代码可更改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseScheduled</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;$&#123;scheduled.cron&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scheduled(fixedDelayString = &quot;5&quot;, timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">job</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;定时任务开始=&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;-&quot;</span> + LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">    BiFunction&lt;Integer, Integer, Callable&lt;String&gt;&gt; function = (id, second) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(second);</span><br><span class="line">                <span class="keyword">return</span> String.format(<span class="string">&quot;任务&#123; %s &#125;已完成，当前时间=&#123; %s &#125;&quot;</span>, id, LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    completionService.submit(function.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    completionService.submit(function.apply(<span class="number">2</span>, <span class="number">8</span>));</span><br><span class="line">    completionService.submit(function.apply(<span class="number">3</span>, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; <span class="number">3</span>; index++) &#123;</span><br><span class="line">        System.out.println(completionService.take().get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行几个周期，输出如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定时任务开始=scheduling-1-2023-06-25T21:26:36.841582700【job1立即执行首次，理论上5s后执行，但是单线程，要等job2，只能排队】</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T21:26:38.844894 &#125;【job2立即执行首次，任务1的延迟2s】</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T21:26:44.842944900 &#125;【job2立即执行首次，任务2的延迟8s】</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T21:26:46.842699200 &#125;【job2立即执行首次，任务3的延迟10s】</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T21:26:46.842699200【job2完成，job1立刻执行，再次排队】</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T21:26:53.846321200 &#125;【job2等待5s后再次执行，加上任务1的延迟2s，共7s】</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T21:26:59.845000500 &#125;【job2等待5s后再次执行，加上任务2的延迟8s，共13s】</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T21:27:01.844899100 &#125;【job2等待5s后再次执行，加上任务3的延迟10s，共15s】</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T21:27:01.844899100</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T21:27:08.846885700 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T21:27:14.846942200 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T21:27:16.847136600 &#125;</span><br></pre></td></tr></table></figure>

<p>可见，两个任务的执行时间无法并行，完成后必须等待其他定时任务。若改为 <code>fixedRateString</code>，则结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-06-25T22:03:37.192+08:00  INFO 20272 --- [           main] com.lab.snippet.SnippetApplication       : Started SnippetApplication in 1.151 seconds (process running for 1.417)</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:39.192069600 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:45.193633600 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:47.192106900 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:03:47.192106900</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:49.193520800 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:55.192690800 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:57.194620 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:03:57.194620</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:03:59.207931100 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:04:05.203253700 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:04:07.205267400 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:04:07.205267400</span><br></pre></td></tr></table></figure>

<p>此时，job2不在以上一次自己执行结束额时间为准，直接以job1的结束作为基准，2s后开始执行。但还是由于单线程，job1执行完仍然需要排队，等待job2完毕。</p>
<p>改为每5s执行一次，结果不可控</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-06-25T22:24:53.688+08:00  INFO 14464 --- [           main] com.lab.snippet.SnippetApplication       : Started SnippetApplication in 1.135 seconds (process running for 1.386)</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:24:57.005405200 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:03.004356200 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:05.006176400 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:05.006176400</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:12.016198400 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:18.001606600 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:20.001757800 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:20.001757800</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:25.000208500</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:27.002035 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:33.013051900 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:35.007493700 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:35.008453200</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:40.001605800</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:42.003821100 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:48.003383700 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:50.002780300 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:50.002780300</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:25:55.001144200</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:25:57.002327300 &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-06-25T22:27:40.868+08:00  INFO 8008 --- [           main] com.lab.snippet.SnippetApplication       : Started SnippetApplication in 1.142 seconds (process running for 1.386)</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:27:45.000486300</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:27:47.005465 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:27:53.006984800 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:27:55.006056500 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:27:55.007053500</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:02.009497100 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:08.013432600 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:10.003280800 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:10.003280800</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:15.000889200</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:17.005103900 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:23.004417100 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:25.002408 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:25.002408</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:30.000387200</span><br><span class="line">任务&#123; 1 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:32.016138300 &#125;</span><br><span class="line">任务&#123; 2 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:38.003692100 &#125;</span><br><span class="line">任务&#123; 3 &#125;已完成，当前时间=&#123; 2023-06-25T22:28:40.002122500 &#125;</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:40.002122500</span><br><span class="line">定时任务开始=scheduling-1-2023-06-25T22:28:45.001217</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>logback-日志配置</title>
    <url>/58863541-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="1-日志级别"><a href="#1-日志级别" class="headerlink" title="1 日志级别"></a>1 日志级别</h2><table>
<thead>
<tr>
<th align="center">优先级</th>
<th align="center">日志级别</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">trace</td>
<td align="center">追踪，指明程序运行轨迹</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">debug</td>
<td align="center">调试，实际应用中一般将其作为最低级别</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">info</td>
<td align="center">输出重要的信息，使用较多</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">warn</td>
<td align="center">警告</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">error</td>
<td align="center">错误</td>
</tr>
</tbody></table>
<h2 id="2-格式"><a href="#2-格式" class="headerlink" title="2 格式"></a>2 格式</h2><table>
<thead>
<tr>
<th align="right">输出格式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="right">%date{yyyy-MM-dd HH:mm:ss.SSS}</td>
<td>日志生产时间，精确到毫秒</td>
</tr>
<tr>
<td align="right">%-5level</td>
<td>日志级别。例如 <code>-5</code> 表示左对齐并且固定输出 5 个字符，如果不足在右边补 0（<code>ILoggingEvent.getLevel</code>方法返回值）</td>
</tr>
<tr>
<td align="right">%logger</td>
<td>logger 的名称，例如 <code>logger&#123;36&#125;</code> 表示 logger 名字最长 36 个字符（<code>ILoggingEvent.getLoggerName</code>方法返回值）</td>
</tr>
<tr>
<td align="right">%thread</td>
<td>输出当前线程名称（<code>ILoggingEvent.getThreadName</code>方法返回值）</td>
</tr>
<tr>
<td align="right">%p</td>
<td>日志输出格式</td>
</tr>
<tr>
<td align="right">%msg</td>
<td>日志内容</td>
</tr>
<tr>
<td align="right">%n</td>
<td>换行符</td>
</tr>
<tr>
<td align="right">%class</td>
<td>输出 java 类名</td>
</tr>
<tr>
<td align="right">%file</td>
<td>输出文件名</td>
</tr>
<tr>
<td align="right">%L</td>
<td>输出错误行号</td>
</tr>
<tr>
<td align="right">%method</td>
<td>输出方法名</td>
</tr>
<tr>
<td align="right">%l</td>
<td>输出语句所在的行数, 包括类名、方法名、文件名、行数</td>
</tr>
<tr>
<td align="right">hostName</td>
<td>本地机器名</td>
</tr>
<tr>
<td align="right">hostAddress</td>
<td>本地 ip 地址</td>
</tr>
</tbody></table>
<h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3 配置文件"></a>3 配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志输出格式和存储路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date&#123;HH:mm:ss.SSS&#125;\t[%thread]\t%-5level %logger&#123;36&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注：如果最后打成jar包，日志将输出在logs目录下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;INFO_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs/info.%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;WARN_ERR_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs/warn_err.%d&#123;yyyy-MM-dd&#125;.%i.log&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义控制台输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注1：如果最后打成jar包，该部分输出会出现在jar包所在目录下的sout.log文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注2：name属性命名随意，引用时对应即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打印格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- info类型配置（仅显示info，过滤warn、error）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- LevelFilter，按日志等级过滤 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;com.xx.LogbackFilter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 文件名样式、保存周期、文件大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;INFO_PATH&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--WARN、ERROR类型配置（仅显示warn及其以上等级）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_WARN_ERR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;WARN_ERR_PATH&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- turboFilter类型的过滤器比appender先触发 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turboFilter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.turbo.DynamicThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DefaultThreshold</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">DefaultThreshold</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OnHigherOrEqual</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">OnHigherOrEqual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">OnLower</span>&gt;</span>NEUTRAL<span class="tag">&lt;/<span class="name">OnLower</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Key</span>&gt;</span>cando<span class="tag">&lt;/<span class="name">Key</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>read<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>write<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>all<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MDCValueLevelPair</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">turboFilter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根目录输出等级为DEBUG --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_INFO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_WARN_ERR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-1-过滤器"><a href="#3-1-过滤器" class="headerlink" title="3.1 过滤器"></a>3.1 过滤器</h3><p>logbcak 允许给日志记录器 appender 配置一个或多个 Filter，或者给整体配置一个或多个 TurboFilter 实现当满足过滤器指定的条件时处理日志。</p>
<table>
<thead>
<tr>
<th align="center">过滤器</th>
<th align="center">类型</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">LevelFilter</td>
<td align="center">Filter</td>
<td align="left">对等于（onMatch）或不等于（onMismatch）指定 level 的日志进行处理</td>
</tr>
<tr>
<td align="center">ThresholdFilter</td>
<td align="center">Filter</td>
<td align="left">对大于或等于（onMatch）指定 level 的日志进行处理；小于（onMismatch）指定 level 的日志进行处理</td>
</tr>
<tr>
<td align="center">EvaluatorFilter</td>
<td align="center">Filter</td>
<td align="left">对满足（onMatch）或不满足（onMismatch）指定表达式的日志进行处理</td>
</tr>
<tr>
<td align="center">MDCFilter</td>
<td align="center">TurboFilter</td>
<td align="left">对等于（onMatch）或不等于（onMismatch） MDCKey 及其 Value 的日志进行处理</td>
</tr>
<tr>
<td align="center">DuplicateMessageFilter</td>
<td align="center">TurboFilter</td>
<td align="left">不记录多余的重复的日志。有两个子标签：<code>&lt;cacheSize&gt;</code> 表示内部缓存对旧消息引用的个数上限，默认 100；<code>&lt;allowedRepetitions&gt;</code> 表示允许消息出现的重复次数上限，超过次数上限的记录请求将被丢弃</td>
</tr>
<tr>
<td align="center">DynamicThresholdFilter</td>
<td align="center">TurboFilter</td>
<td align="left">动态版的 ThresholdFilter，根据 MDC 域中是否存在某个键，该键对应的值是否相等，可实现日志级别动态切换</td>
</tr>
<tr>
<td align="center">MarkerFilter</td>
<td align="center">TurboFilter</td>
<td align="left">对带有指定标记的日志进行处理</td>
</tr>
</tbody></table>
<blockquote>
<p>onMatch、onMismatch 的三种取值和处理方式：</p>
</blockquote>
<ul>
<li>DENY：拒绝了记录</li>
<li>NEUTRAL：本级过滤器放行，不记录。注意，如果日志途径的所有过滤器都是 NEUTRAL，则记录</li>
<li>ACCEPT：需要记录</li>
</ul>
<p><strong>EvaluatorFilter 例子</strong></p>
<p>在 <code>&lt;appender&gt;</code> 标签中使用，需要额外引入依赖：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://mvnrepository.com/artifact/org.codehaus.janino/janino</span></span><br><span class="line">implementation <span class="attr">group</span>: <span class="string">&#x27;org.codehaus.janino&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;janino&#x27;</span>, <span class="attr">version</span>: <span class="string">&#x27;3.1.9&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当前需要拒绝来自 <code>org.apache.http.wire</code> 类和 <code>org.apache.http.headers</code> 类的日志信息，其他日志记录：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.filter.EvaluatorFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">evaluator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">expression</span>&gt;</span></span><br><span class="line">            if(event.getLoggerName().contains(&quot;org.apache.http.wire&quot;) || event.getLoggerName().contains(&quot;org.apache.http.headers&quot;))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">expression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">evaluator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OnMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">OnMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>MDCFilter 例子</strong></p>
<p>例如，仅记录 MDCKey 为 cando，Value 为 read 的日志：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">turboFilter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.turbo.MDCFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MDCKey</span>&gt;</span>cando<span class="tag">&lt;/<span class="name">MDCKey</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Value</span>&gt;</span>read<span class="tag">&lt;/<span class="name">Value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turboFilter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>DuplicateMessageFilter 例子</strong></p>
<p>限制仅显示 1 条日志</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">turboFilter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.turbo.DuplicateMessageFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">AllowedRepetitions</span>&gt;</span>1<span class="tag">&lt;/<span class="name">AllowedRepetitions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turboFilter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.info(marker, <span class="string">&quot;this is marker&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;this is marker&quot;</span>);</span><br><span class="line">log.info(String.format(<span class="string">&quot;this is marker&quot;</span>, <span class="number">1</span>));</span><br><span class="line">log.info(String.format(<span class="string">&quot;this is marker&quot;</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>

<p>测试代码中第 2-4 行判断为重复，输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">16</span>:<span class="number">52</span>:<span class="number">01.698</span>	[Test worker]	INFO  s.ApplicationTests - <span class="built_in">this</span> is marker</span><br><span class="line"><span class="number">16</span>:<span class="number">52</span>:<span class="number">01.699</span>	[Test worker]	INFO  s.ApplicationTests - <span class="built_in">this</span> is marker</span><br></pre></td></tr></table></figure>

<p><strong>DynamicThresholdFilter 例子&#96;</strong></p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MDC.put(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">MDC.put(<span class="string">&quot;cando&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">MDC.put(<span class="string">&quot;cando&quot;</span>, <span class="string">&quot;write&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">MDC.put(<span class="string">&quot;cando&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">MDC.put(<span class="string">&quot;cando&quot;</span>, <span class="string">&quot;all&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">MDC.put(<span class="string">&quot;null&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">log.trace(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; TRACE &#125;&quot;</span>);</span><br><span class="line">log.debug(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; DEBUG &#125;&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; INFO &#125;&quot;</span>);</span><br><span class="line">log.warn(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; WARN &#125;&quot;</span>);</span><br><span class="line">log.error(<span class="string">&quot;key=&#123; null &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<ul>
<li>当 key 和 value 都对应时，记录大于等于给定 level 的日志</li>
<li>当 key 对应，value 不对应时，按<code>&lt;DefaultThreshold&gt;</code>标签处理</li>
<li>当 key 不对应时，无论 value 是否对应，所得结果不确定：在首位调用，仅记录<code>ERROR</code>，满足<code>&lt;DefaultThreshold&gt;</code>标签限定；若紧跟其他调用，会与该调用的等级相同。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.810</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; <span class="literal">null</span> &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	DEBUG s.ApplicationTests - key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; DEBUG &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	INFO  s.ApplicationTests - key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; INFO &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	WARN  s.ApplicationTests - key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; WARN &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; cando &#125;,value=&#123; read &#125;,level=&#123; ERROR &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	INFO  s.ApplicationTests - key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; INFO &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	WARN  s.ApplicationTests - key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; WARN &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; cando &#125;,value=&#123; write &#125;,level=&#123; ERROR &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; cando &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	WARN  s.ApplicationTests - key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; WARN &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; cando &#125;,value=&#123; all &#125;,level=&#123; ERROR &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	WARN  s.ApplicationTests - key=&#123; <span class="literal">null</span> &#125;,value=&#123; none &#125;,level=&#123; WARN &#125;</span><br><span class="line"><span class="number">13</span>:<span class="number">41</span>:<span class="number">52.811</span>	[Test worker]	ERROR s.ApplicationTests - key=&#123; <span class="literal">null</span> &#125;,value=&#123; none &#125;,level=&#123; ERROR &#125;</span><br></pre></td></tr></table></figure>

<p><strong>MarkerFilter 例子</strong></p>
<p>指定记录带有 test 标记的日志：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">turboFilter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.turbo.MarkerFilter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Marker</span>&gt;</span>test<span class="tag">&lt;/<span class="name">Marker</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OnMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">OnMatch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OnMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">OnMismatch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turboFilter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Marker</span> <span class="variable">marker</span> <span class="operator">=</span> MarkerFactory.getMarker(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">log.info(marker,<span class="string">&quot;this is marker&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;a normal log&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3-2-自定义过滤器"><a href="#3-2-自定义过滤器" class="headerlink" title="3.2 自定义过滤器"></a>3.2 自定义过滤器</h3><p>实现一个与上文相同的功能，拒绝来自 <code>org.apache.http.wire</code> 类和 <code>org.apache.http.headers</code> 类的日志信息，其他日志记录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogbackFilter</span> <span class="keyword">extends</span> <span class="title class_">Filter</span>&lt;ILoggingEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FilterReply <span class="title function_">decide</span><span class="params">(ILoggingEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(event.getLoggerName().contains(<span class="string">&quot;org.apache.http.wire&quot;</span>) || event.getLoggerName().contains(<span class="string">&quot;org.apache.http.headers&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> FilterReply.DENY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FilterReply.NEUTRAL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-orphan-参数创建独立空白分支</title>
    <url>/58865c50-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>创建一个文件夹 testbranch，添加一个文件 main.txt。执行 <code>git init</code> 初始化，执行提交。此时 master 分支有了第一个提交记录：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git init</span><br><span class="line">已初始化空的 <span class="title class_">Git</span> 仓库于 /<span class="title class_">Users</span>/userName/<span class="title class_">Desktop</span>/testbranch/.<span class="property">git</span>/</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git status</span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 以包含要提交的内容）</span><br><span class="line">	main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">提交为空，但是存在尚未跟踪的文件（使用 <span class="string">&quot;git add&quot;</span> 建立跟踪）</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line">[master（根提交） cd00bbe] init</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">0</span> <span class="title function_">insertions</span>(+), <span class="number">0</span> <span class="title function_">deletions</span>(-)</span><br><span class="line"> create mode <span class="number">100644</span> main.<span class="property">txt</span></span><br></pre></td></tr></table></figure>

<p>随意修改一下文件内容，再作一次提交。此时查看 master 的提交状态，可以看到有两次提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;again&quot;</span></span><br><span class="line">[master 9d01aa3] again</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> <span class="title function_">insertion</span>(+)</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">9d01aa3ed29dc9caa1b67175e1e2c7ce4db21712 (<span class="variable constant_">HEAD</span> -&gt; master) again</span><br><span class="line">cd00bbe75405be350fd7c4cc06d4b304ababe8c5 init</span><br></pre></td></tr></table></figure>

<p>此时新建一个分支，other-normal。使用 <code>git branch -a</code> 后可立刻看到新建的分支。再查看提交，发现与 master 是一致的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout -b other-normal</span><br><span class="line">切换到一个新分支 <span class="string">&#x27;other-normal&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">* other-normal</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">9d01aa3ed29dc9caa1b67175e1e2c7ce4db21712 (<span class="variable constant_">HEAD</span> -&gt; other-normal, master) again</span><br><span class="line">cd00bbe75405be350fd7c4cc06d4b304ababe8c5 init</span><br></pre></td></tr></table></figure>

<p>返回 master，使用 <code>git checkout --orphan other-orphan</code> 新建并切换到分支 other-orphan。再次使用 <code>git branch -a</code>，发现不能看到新建的分支。使用 <code>git log</code> 查看提交情况，发现当前确实在 other-orphan 分支上。</p>
<blockquote>
<p>注意：使用 –orphan 参数建立的分支必须要有提交后，才真正创建。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout master</span><br><span class="line">切换到分支 <span class="string">&#x27;master&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout --orphan other-orphan</span><br><span class="line">切换到一个新分支 <span class="string">&#x27;other-orphan&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">  other-normal</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log</span><br><span class="line"><span class="attr">fatal</span>: 您的当前分支 <span class="string">&#x27;other-orphan&#x27;</span> 尚无任何提交</span><br></pre></td></tr></table></figure>

<p>将 other-orphan 分支的 main.txt 文件改名为 orphan.txt 并提交，再次查看全部分支，已经可以看到 other-orphan，而且提交情况也是独立的，与 master 分支无关。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git status</span><br><span class="line">位于分支 other-orphan</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git rm --cached &lt;文件&gt;...&quot;</span> 以取消暂存）</span><br><span class="line">	新文件：   main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git add/rm &lt;文件&gt;...&quot;</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">&quot;git restore &lt;文件&gt;...&quot;</span> 丢弃工作区的改动）</span><br><span class="line">	删除：     main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 以包含要提交的内容）</span><br><span class="line">	orphan.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;orphan init&quot;</span></span><br><span class="line">[other-orphan（根提交） c2533ce] orphan init</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> <span class="title function_">insertion</span>(+)</span><br><span class="line"> create mode <span class="number">100644</span> orphan.<span class="property">txt</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">  other-normal</span><br><span class="line">* other-orphan</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">c2533cec5738396e99510ff8566f002547e5e000 (<span class="variable constant_">HEAD</span> -&gt; other-orphan) orphan init</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-push-提交到远程仓库出现-The-requested-URL-returned-error-403-错误</title>
    <url>/58865c51-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>曾用过一个 github 账号进行项目提交，现在使用另一个帐号在同一台机器进行提交时出现错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Permission to userName/repositorieName.git denied to OldUserName.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/userName/repositorieName.git/&#x27;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure>

<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>使用第一个账号提交时，系统保存了该账号的用户信息。在使用新帐号提交时，与已保存的用户信息不一致，所以报错。</p>
<h2 id="win10-解决方案"><a href="#win10-解决方案" class="headerlink" title="win10 解决方案"></a>win10 解决方案</h2><ul>
<li>打开 cmd，输入命令：<code>rundll32.exe keymgr.dll,KRShowKeyMgr</code>，出现「存储的用户名和密码」窗口；</li>
<li>将 github 相关的条目删除；</li>
<li>重新执行提交命令，按提示输入账户名及密码后，即可提交成功。</li>
</ul>
<h2 id="macOS-解决方案"><a href="#macOS-解决方案" class="headerlink" title="macOS 解决方案"></a>macOS 解决方案</h2><ul>
<li>进入<code>钥匙串</code>，在「登录」下找到「github.com」条目并删除；</li>
<li>重新执行提交命令，按提示输入账户名及密码后，即可提交成功。</li>
</ul>
<h2 id="通用解决方案"><a href="#通用解决方案" class="headerlink" title="通用解决方案"></a>通用解决方案</h2><p>进入库目录，找到 .git&#x2F;config 文件（macOS 可用终端执行 <code>vi .git/config</code> 直接进入修改），参考内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = true</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	ignorecase = true</span><br><span class="line">	precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = https://github.com/userName/repositorieName.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;other&quot;]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/other</span><br></pre></td></tr></table></figure>

<p>将用户名加入 [remote “origin”] 中的 url，最终修改为 <code>url = https://userName@github.com/userName/repositorieName.git</code>，接下来在提交项目时会要求输入密码。此后，系统将保存密码信息，以后这个库的提交将不再要求输入密码，也不会出现 403 错误。</p>
<h2 id="通用终极解决方案"><a href="#通用终极解决方案" class="headerlink" title="通用终极解决方案"></a>通用终极解决方案</h2><p>在 clone 项目时就将用户名加入路径，原路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b other https://github.com/userName/repositoryName.git</span><br></pre></td></tr></table></figure>

<p>添加 <code>userName@</code>，该路径修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b other https://userName@github.com/userName/repositoryName.git</span><br></pre></td></tr></table></figure>

<p>接下来在提交项目时会要求输入密码。此后，系统将保存密码信息，以后这个库的提交将不再要求输入密码，也不会出现 403 错误。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>使用多个-SSH-公钥连接多个-GitHub-远程仓库</title>
    <url>/58865c53-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>机器 A 一直使用账户 user1 的 SSH 公钥连接 github。现在新建账户 user2，希望在机器 A 也能够以 SSH 方式连接到 github</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>默认情况下，即机器 A 一直使用账户 user1。此时使用命令 <code>$ git remote -v</code> 可以查看当前的远程仓库关联如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin  git@github.com:user1/repositorieName1.git (fetch)</span><br><span class="line">origin  git@github.com:user1/repositorieName1.git (push)</span><br></pre></td></tr></table></figure>

<p>如果 user2 新建一个名为 repositorieName2 的仓库，此时想在机器 A 上使用命令 <code>$ git push -u origin master</code> 提交到远程仓库，会出现如下的错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: Permission to user2/repositorieName2.git denied to user2.</span><br><span class="line">fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure>

<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>机器 A 当前的公钥是 user1 的，user2 没有权限使用；想在 user2 的 github 账户中添加 user1 的公钥？也是不可能的，会提示公钥已经被使用。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>在 user2 的项目目录中打开命令行，执行命令：<code>ssh-keygen -t ed25519 -C &quot;second@email.com&quot; -f ~/.ssh/id_rsa_for_user2</code>，生成专属 user2 的密钥对，再进入 user2 的 github 账户配置公钥。</li>
</ol>
<blockquote>
<p>使用 ed25519 是参考了 github <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">相关文档</a></p>
</blockquote>
<ol start="2">
<li>在 <code>~/.ssh/</code> 目录下新建 <code>config</code> 文件，写入以下内容：</li>
</ol>
<blockquote>
<p>win10 路径：<code>C:\Users\Admin\.ssh</code></p>
</blockquote>
<blockquote>
<p>macOS 路径：<code>~/user/.ssh</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Default GitHub</span><br><span class="line">Host user1</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/user1_publickey</span><br><span class="line"></span><br><span class="line">Host user2</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/user2_publickey</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>回到命令行，执行命令：<code>$ git remote set-url origin git@user1:user1/repositorieName1.git</code>，修改默认的关联。也可以把原有的默认关联删除，重新添加。</li>
<li>再继续执行命令：<code>$ git remote add origin2 git@user2:user2/repositorieName2.git</code>，新添加一个 user2 的关联。</li>
<li>此时执行命令：<code>$ git remote -v</code>，应是以下结果：</li>
</ol>
<blockquote>
<p>如果 clone 用户名 user1 的远程仓库，命令要相应修改为 <code>git clone -b main git@user1:user1/repositorieName1.git</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin2  git@user2:user2/repositorieName2.git (fetch)</span><br><span class="line">origin2  git@user2:user2/repositorieName2.git (push)</span><br><span class="line">origin  git@user1:user1/repositorieName1.git (fetch)</span><br><span class="line">origin  git@user1:user1/repositorieName1.git (push)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>验证。可分别执行命令：<code>$ ssh -T git@user1</code>、<code>$ ssh -T git@user2</code>，均出现连接成功提示。至此，实现了多个 SSH 公钥连接多个 github 远程仓库的需求。</li>
</ol>
<blockquote>
<p>要加 <code>git@</code> 前缀，否则提示 <code>Permission denied (publickey)</code>（win10 环境，macOS 未实测）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi user1! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi user2! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：github 添加的是如果是 deploy key，会显示库名称，如：username&#x2F;xxx</p>
</blockquote>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>修改-host-表开启-gist</title>
    <url>/58865c52-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>win 10 的 hosts 文件路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts.ics</span><br></pre></td></tr></table></figure>

<p>macOS 10.14.6 的 hosts 文件直接通过终端进入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.30.253.118 gist.github.com</span><br><span class="line">192.30.253.119 gist.github.com</span><br></pre></td></tr></table></figure>

<p>注：该地址可能会变动，可进入 <a href="https://ipchaxun.com/gist.github.com/">https://ipchaxun.com/gist.github.com/</a> 查询地址，目前最新的地址如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140.82.112.4</span><br><span class="line">140.82.114.4 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>将-VSCode-添加到右键菜单</title>
    <url>/58868360-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Windows 10 或 macOS 10.14 下安装 VSCode 后，右键快速打开选项并没有快捷启动。</p>
<h2 id="Windows-10-解决方案"><a href="#Windows-10-解决方案" class="headerlink" title="Windows 10 解决方案"></a>Windows 10 解决方案</h2><p>通过注册表添加三个位置的快速打开选项：文件、目录、桌面（目录内）的空白位置。</p>
<h3 id="1、添加至文件的右键菜单"><a href="#1、添加至文件的右键菜单" class="headerlink" title="1、添加至文件的右键菜单"></a>1、添加至文件的右键菜单</h3><p>定位注册表中如下位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\*\shell</span><br></pre></td></tr></table></figure>

<p>参考以下结构，在 shell 下新建一个项 Open with VSCode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Open with VSCode</span><br><span class="line">    ├── (默认)（在右键菜单显示的名称）</span><br><span class="line">    ├── Icon（在右键菜单显示的图标路径）</span><br><span class="line">    └── command</span><br><span class="line">        └── (默认)（执行的命令行及应用路径）</span><br></pre></td></tr></table></figure>

<p>添加相应字符串值即可实现点击文件的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open with VSCode&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2、添加至目录的右键菜单"><a href="#2、添加至目录的右键菜单" class="headerlink" title="2、添加至目录的右键菜单"></a>2、添加至目录的右键菜单</h3><p>定位至 <code>HKEY_CLASSES_ROOT\Directory\shell</code>，按照相同结构设置即可实现点击目录的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open Folder as VSCode Project&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3、添加至桌面（目录内）的空白位置的右键菜单"><a href="#3、添加至桌面（目录内）的空白位置的右键菜单" class="headerlink" title="3、添加至桌面（目录内）的空白位置的右键菜单"></a>3、添加至桌面（目录内）的空白位置的右键菜单</h3><p>定位至 <code>HKEY_CLASSES_ROOT\Directory\Background\shell</code>，按照相同结构设置即可实现点击桌面（目录内）的空白位置的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open Folder as VSCode Project&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="macOS-10-14-解决方案"><a href="#macOS-10-14-解决方案" class="headerlink" title="macOS 10.14 解决方案"></a>macOS 10.14 解决方案</h2><p>通过快速操作添加两个位置的快速打开选项：文件、目录。</p>
<h3 id="1、打开自动操作，文稿类型选取-快速操作"><a href="#1、打开自动操作，文稿类型选取-快速操作" class="headerlink" title="1、打开自动操作，文稿类型选取 快速操作"></a>1、打开自动操作，文稿类型选取 <code>快速操作</code></h3><img src="/58868360-2a1e-11ee-846a-89c1529ebdf1/1.png" class="">

<h3 id="2、左侧资源库选择-文件和文件夹，对应其右侧子菜单栏双击-打开访达项目，"><a href="#2、左侧资源库选择-文件和文件夹，对应其右侧子菜单栏双击-打开访达项目，" class="headerlink" title="2、左侧资源库选择 文件和文件夹，对应其右侧子菜单栏双击 打开访达项目，"></a>2、左侧资源库选择 <code>文件和文件夹</code>，对应其右侧子菜单栏双击 <code>打开访达项目</code>，</h3><h3 id="3、在-工作流程收到当前-选择-文件或文件夹，位于-选择-访达"><a href="#3、在-工作流程收到当前-选择-文件或文件夹，位于-选择-访达" class="headerlink" title="3、在 工作流程收到当前 选择 文件或文件夹，位于 选择 访达"></a>3、在 <code>工作流程收到当前</code> 选择 <code>文件或文件夹</code>，<code>位于</code> 选择 <code>访达</code></h3><h3 id="4、在-打开方式-找到-Visual-Studio-Code-app"><a href="#4、在-打开方式-找到-Visual-Studio-Code-app" class="headerlink" title="4、在 打开方式 找到 Visual Studio Code.app"></a>4、在 <code>打开方式</code> 找到 <code>Visual Studio Code.app</code></h3><img src="/58868360-2a1e-11ee-846a-89c1529ebdf1/2.png" class="">

<h3 id="5、完成以上设置后，cmd-S-将该快速操作保存为-Open-with-VSCode-即可"><a href="#5、完成以上设置后，cmd-S-将该快速操作保存为-Open-with-VSCode-即可" class="headerlink" title="5、完成以上设置后，cmd+S 将该快速操作保存为 Open with VSCode 即可"></a>5、完成以上设置后，<code>cmd+S</code> 将该快速操作保存为 <code>Open with VSCode</code> 即可</h3>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>有关-Payload-在维基百科的释义</title>
    <url>/58868361-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="Payload-computing"><a href="#Payload-computing" class="headerlink" title="Payload (computing)"></a>Payload (computing)</h2><p>In computing and telecommunications, the payload is the part of transmitted data that is the actual intended message. Headers and metadata are sent only to enable payload delivery.</p>
<p>在计算和通信中，有效载荷是传输数据的一部分，是实际要发送的消息。报头和元数据仅用于支持有效载荷的传递。</p>
<p>In the context of a computer virus or worm, the payload is the portion of the malware which performs malicious action.</p>
<p>在计算机病毒或蠕虫的上下文中，有效载荷是执行恶意行为的恶意软件的一部分。</p>
<p>The term is borrowed from transportation, where payload refers to the part of the load that pays for transportation.</p>
<p>这个术语是从「运输」一词借用而来的，「有效载荷」指的是支付运输费用的那部分载荷。</p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>In computer security, the payload is the part of the private user text which could also contain malware such as worms or viruses which performs the malicious action; deleting data, sending spam or encrypting data.[3] In addition to the payload, such malware also typically has overhead code aimed at simply spreading itself, or avoiding detection.</p>
<p>在计算机安全中，有效载荷是私人用户文本的一部分，它也可能包含恶意软件，如蠕虫或执行恶意行为的病毒；删除数据、发送垃圾邮件或加密数据。除了有效载荷，这种恶意软件通常也有一些开销代码，目的是简单地传播自己，或者避免检测。</p>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><p>In computer programming, the most common usage of the term is in the context of message protocols, to differentiate the protocol overhead from the actual data. For example, a JSON web service response might be:</p>
<p>在计算机编程中，该术语最常见的用法是在消息协议上下文中使用，以将协议开销与实际数据区分开来。例如，JSON web 服务响应可能是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The string Hello, world! is the payload, while the rest is protocol overhead.</p>
<p>字符串 <code>Hello, world!</code> 为有效负载，其余为协议开销。</p>
<h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>In the computer networking, data to be transmitted is the payload, but is almost always encapsulated in some type of a frame composed of framing bits and a frame check sequence.[4][5] Examples are Ethernet frames, Point-to-Point Protocol (PPP) frames, Fibre Channel frames, and V.42 modem frames.</p>
<p>在计算机网络中，要传输的数据是有效载荷，但几乎总是封装在由帧位和帧检查序列组成的某种类型的帧中。[4][5]的例子是以太网帧、点对点协议（PPP）帧、光纤通道帧和 V.42 调制解调器帧。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>payload</tag>
      </tags>
  </entry>
  <entry>
    <title>3-things-every-java-developer-should-stop-doing</title>
    <url>/5886d182-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h1 id="3-Things-Every-Java-Developer-Should-Stop-Doing"><a href="#3-Things-Every-Java-Developer-Should-Stop-Doing" class="headerlink" title="3 Things Every Java Developer Should Stop Doing"></a>3 Things Every Java Developer Should Stop Doing</h1><p><strong>每个 Java 开发者都应该停止的三件事</strong></p>
<blockquote>
<p>转译自：<a href="https://dzone.com/articles/3-things-every-java-developer-should-stop-doing">https://dzone.com/articles/3-things-every-java-developer-should-stop-doing</a></p>
</blockquote>
<blockquote>
<p>Looking for a few bad habits to drop? Let’s take a look at null, functional programming, and getters and setters to see how you can improve your coding.</p>
</blockquote>
<p>前言：想改掉一些坏习惯吗？让我们从 null、函数式编程以及 getter 和 setter 着手，看看如何改善代码。</p>
<p>From returning null values to overusing getters and setters, there are idioms that we as Java developers are accustom to making, even when unwarranted. While they may be appropriate in some occasions, they are usually forces of habit or fallbacks that we make to get the system working. In this article, we will go through three things that are common among Java developers, both novice and advanced, and explore how they can get us into trouble. It should be noted that these are not hard-and-fast rules that should always be adhered to, regardless of the circumstances. At times, there may be a good reason to use these patterns to solve a problem, but on the whole, they should be used a lot less than they are now. To start us off, we will begin with one of the most prolific, but double-edged keywords in Java: Null.</p>
<p>作为 Java 开发人员，我们会使用一些习惯用法，典型的例子，如：返回 null 值、滥用 getter 和 setter，即使在没有依据的情况下也是如此。虽然在某些情况下，使用它们可能是适当的，但通常是我们为使系统正常工作而形成的习惯或权宜之计。在本文中，我们将介绍 Java 开发（包括新手和高级开发人员）中常见的三种情况，并探究它们是如何给我们带来麻烦的。应该指出的是，文中总结的规则并不是无论何时都应该始终遵守的硬性要求。有时候，可能有一个很好的理由来使用这些模式解决问题，但是总的来说，还是应该减少这些用法。首先，我们将从 Null 这个关键字开始，它也是 Java 中使用最频繁、但也是最具两面性特性的关键字之一。</p>
<h2 id="1-Returning-Null"><a href="#1-Returning-Null" class="headerlink" title="1. Returning Null"></a>1. Returning Null</h2><p><strong>返回 Null</strong></p>
<p>Null has been the best friend and worst enemy of developers for decades and null in Java is no different. In high-performance applications, null can be a solid means of reducing the number of objects and signaling that a method does not have a value to return. In contrast to throwing an exception, which has to capture the entire stack trace when it is created, null serves as a quick and low-overhead way to signal clients that no value can be obtained.</p>
<p>null 一直是开发者最好的朋友，也是最大的敌人，这在 Java 中也不例外。在高性能应用中，使用 null 是一种减少对象数量的可靠方法，它表明方法没有要返回的值。与抛出异常（创建异常时必须捕获整个堆栈跟踪）不同，使用 null 是一种快速且低开销的方法，用于通知客户机不能获取任何值。</p>
<p>Outside the context of high-performance systems, null can wreak havoc in an application by creating more tedious checks for null return values and causing NullPointerExceptions when dereferencing a null object. In most applications, nulls are returned for three primary reasons: (1) to denote no elements could be found for a list, (2) to signal that no valid value could be found, even if an error did not occur, or (3) to denote a special case return value.</p>
<p>在高性能系统的环境之外，null 可以通过创建更繁琐的 null 返回值检查来破坏应用程序，并在非关联化 null 对象时导致 NullPointerExceptions 异常。在大多数应用程序中，返回 null 有三个主要原因：（1）表示列表中找不到元素；（2）表示即使没有发生错误，也找不到有效值;（3）表示特殊情况下的返回值。</p>
<p>Barring any performance reasons, each of these cases has a much better solution which does not use null and force developers to handle null cases. Whatsmore, clients of these methods are not left scratching their heads wondering if the method will return a null in some edge case. In each case, we will devise a cleaner approach that does not involve returning a null value.</p>
<p>除非有任何性能方面的原因，否则以上每一种情况都有更好的解决方案，它们不使用 null，并且强制开发人员处理出现 null 的情况。更重要的是，这些方法的客户端不会为该方法是否会在某些边缘情况下返回 null 而伤脑筋。在每种情况下，我们将设计一种不返回 null 值的简洁方法。</p>
<h2 id="No-Elements"><a href="#No-Elements" class="headerlink" title="No Elements"></a>No Elements</h2><p><strong>集合中没有元素的情况</strong></p>
<p>When returning lists or other collections, it can be common to see a null collection returned in order to signal that elements for that collection could not be found. For example, we could create a service that manages users in a database that resembles the following (some method and class definitions have been left out for brevity):</p>
<p>在返回列表或其他集合时，通常会看到返回空集合，以表明无法找到该集合的元素。例如，我们可以创建一个服务来管理数据库中的用户，该服务类似于以下内容（为了简洁起见，省略了一些方法和类定义）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        User[] usersFromDb = getUsersFromDatabase();</span><br><span class="line">        <span class="keyword">if</span> (usersFromDb == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No users found in database</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(usersFromDb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserServer</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">List&lt;Users&gt; users = service.getUsers();</span><br><span class="line"><span class="keyword">if</span> (users != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User found: &quot;</span> + user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since we have elected to return a null value in the case of no users, we are forcing our client to handle this case before iterating over the list of users. If instead, we returned an empty list to denote no users were found, the client can remove the null check entirely and loop through the users as normal. If there are no users, the loop will be skipped implicitly without having to manually handle that case; in essence, looping through the list of users functions as we intend for both an empty and populated list without having to manually handle one case or the other:</p>
<p>因为我们选择在没有用户的情况下返回 null 值，所以我们在遍历用户列表之前强制客户端处理这种情况。如果我们返回一个空列表来表示没有找到用户，那么客户端可以完全删除空检查并像往常一样遍历用户。如果没有用户，则隐式跳过循环，而不必手动处理这种情况；从本质上说，循环遍历用户列表的功能就像我们为空列表和填充列表所做的那样，而不需要手动处理任何一种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        User[] usersFromDb = getUsersFromDatabase();</span><br><span class="line">        <span class="keyword">if</span> (usersFromDb == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No users found in database</span></span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(usersFromDb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserServer</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">List&lt;Users&gt; users = service.getUsers();</span><br><span class="line"><span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;User found: &quot;</span> + user.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In the case above, we have elected to return an immutable, empty list. This is an acceptable solution, so long as we document that the list is immutable and should not be modified (doing so may throw an exception). If the list must be mutable, we can return an empty, mutable list, as in the following example:</p>
<p>在上面的例子中，我们返回的是一个不可变的空列表。这是一个可接受的解决方案，只要我们记录该列表是不可变的并且不应该被修改（这样做可能会抛出异常）。如果列表必须是可变的，我们可以返回一个空的可变列表，如下例所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    User[] usersFromDb = getUsersFromDatabase();</span><br><span class="line">    <span class="keyword">if</span> (usersFromDb == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No users found in database</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();    <span class="comment">// A mutable list</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(usersFromDb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>In general, the following rule should be adhered to when signaling that no elements could be found:</p>
<p>一般来说，在发出找不到元素的信号时，应遵守以下规则：</p>
<p><strong>Return an empty collection (or list, set, queue, etc.) to denote that no elements can be found</strong></p>
<p>返回一个空集合（或 list、set、queue 等等）表明找不到元素。</p>
<p>Doing so not only reduces the special-case handling that clients must perform, but it also reduces the inconsistencies in our interface (i.e. we return a list object sometimes and not others).</p>
<p>这样做不仅减少了客户端必须执行的特殊情况处理，而且还减少了接口中的不一致性（例如，我们有时返回一个 list 对象，而不是其他对象）。</p>
<h2 id="Optional-Value"><a href="#Optional-Value" class="headerlink" title="Optional Value"></a>Optional Value</h2><p><strong>可选值</strong></p>
<p>Many times, null values are returned when we wish to inform a client that an optional value is not present, but no error has occurred. For example, getting a parameter from a web address. In some cases, the parameter may be present, but in other cases, it may not. The lack of this parameter does not necessarily denote an error, but rather, it denotes that the user did not want the functionality that is included when the parameter is provided (such as sorting). We can handle this by returning null if no parameter is present or the value of the parameter if one is supplied (some methods have been removed for brevity):</p>
<p>很多时候，我们希望在没有发生错误时通知客户端不存在可选值，此时返回 null。例如，从 web 地址获取参数。在某些情况下，参数可能存在，但在其他情况下，它可能不存在。缺少此参数并不一定表示错误，而是表示用户不希望提供该参数时包含的功能（例如排序）。如果没有参数，则返回 null；如果提供了参数，则返回参数值（为了简洁起见，删除了一些方法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserListUrl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String url;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserListUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSortingValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (urlContainsSortParameter(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> extractSortParameter(url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"><span class="type">UserListUrl</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserListUrl</span>(<span class="string">&quot;http://localhost/api/v2/users&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">sortingParam</span> <span class="operator">=</span> url.getSortingValue();</span><br><span class="line"><span class="keyword">if</span> (sortingParam != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">UserSorter</span> <span class="variable">sorter</span> <span class="operator">=</span> UserSorter.fromParameter(sortingParam);</span><br><span class="line">    <span class="keyword">return</span> userService.getUsers(sorter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When no parameter is supplied, a null is returned and a client must handle this case, but nowhere in the signature of the getSortingValue method does it state that the sorting value is optional. For us to know that this method is optional and may return a null if no parameter is present, we would have to read the documentation associated with the method (if any were provided).</p>
<p>当没有提供参数时，返回 null，客户端必须处理这种情况，但是在 getSortingValue 方法的签名中，没有任何地方声明排序值是可选的。如果要知道这个方法是可选的，如果没有参数，可能返回null，我们必须阅读与该方法相关的文档（如果提供了文档）。</p>
<p>Instead, we can make the optionality explicit returning an Optional object. As we will see, the client still has to handle the case when no parameter is present, but now that requirement is made explicit. Whatsmore, the Optional class provides more mechanisms to handle a missing parameter than a simple null check. For example, we can simply check for the presence of the parameter using the query method (a state-testing method) provided by Optional:</p>
<p>相反，我们可以使可选性显式地返回一个 Optional 对象。正如我们将看到的，当没有参数存在时，客户端仍然需要处理这种情况，但是现在这个需求已经明确了。更重要的是，Optional 类提供了比简单的 null 检查更多的机制来处理丢失的参数。例如，我们可以使用 Optional 类提供的查询方法（一种状态测试方法）简单地检查参数是否存在:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserListUrl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String url;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserListUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">getSortingValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (urlContainsSortParameter(url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.of(extractSortParameter(url));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"><span class="type">UserListUrl</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserListUrl</span>(<span class="string">&quot;http://localhost/api/v2/users&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; sortingParam = url.getSortingValue();</span><br><span class="line"><span class="keyword">if</span> (sortingParam.isPresent()) &#123;</span><br><span class="line">    <span class="type">UserSorter</span> <span class="variable">sorter</span> <span class="operator">=</span> UserSorter.fromParameter(sortingParam.get());</span><br><span class="line">    <span class="keyword">return</span> userService.getUsers(sorter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This is nearly identical to that of the null-check case, but we have made the optionality of the parameter explicit (i.e. the client cannot access the parameter without calling get(), which will throw a NoSuchElementException if the optional is empty). If we were not interested in returning the list of users based on the optional parameter in the web address, but rather, consuming the parameter in some manner, we could use the ifPresentOrElse method to do so:</p>
<p>这与「空检查」的情况几乎相同，但是我们已经明确了参数的可选性（即客户机在不调用 <code>get()</code> 的情况下无法访问参数，如果可选参数为空，则会抛出NoSuchElementException）。如果我们不希望根据 web 地址中的可选参数返回用户列表，而是以某种方式使用该参数，我们可以使用 ifPresentOrElse 方法来这样做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sortingParam.ifPresentOrElse(</span><br><span class="line">    param -&gt; System.out.println(<span class="string">&quot;Parameter is :&quot;</span> + param),</span><br><span class="line">    () -&gt; System.out.println(<span class="string">&quot;No parameter supplied.&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>This greatly reduces the noise required for null checking. If we wished to disregard the parameter if no parameter is supplied, we could do so using the ifPresent method:</p>
<p>这极大降低了「空检查」的影响。如果我们希望在没有提供参数时忽略参数，可以使用 ifPresent 方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sortingParam.ifPresent(param -&gt; System.out.println(<span class="string">&quot;Parameter is :&quot;</span> + param));</span><br></pre></td></tr></table></figure>

<p>In either case, using an Optional object, rather than returning null, explicitly forces clients to handle the case that a return value may not be present and provides many more avenues for handling this optional value. Taking this into account, we can devise the following rule:</p>
<p>在这两种情况下，使用 Optional 对象要优于返回 null 以及显式地强制客户端处理返回值可能不存在的情况，为处理这个可选值提供了更多的途径。考虑到这一点，我们可以制定以下规则：</p>
<p><strong>If a return value is optional, ensure clients handle this case by returning an Optional that contains a value if one is found and is empty if no value can be found</strong></p>
<p>如果返回值是可选的，则通过返回一个 Optional 来确保客户端处理这种情况，该可选的值在找到值时包含一个值，在找不到值时为空</p>
<h2 id="Special-Case-Value"><a href="#Special-Case-Value" class="headerlink" title="Special-Case Value"></a>Special-Case Value</h2><p><strong>特殊情况值</strong></p>
<p>The last common use case is that of a special case, where a normal value cannot be obtained and a client should handle a corner case different than the others. For example, suppose we have a command factory from which clients periodically request commands to complete. If no command is ready to be completed, the client should wait 1 second before asking again. We can accomplish this by returning a null command, which clients must handle, as illustrated in the example below (some methods are not shown for brevity):</p>
<p>最后一个常见用例是特殊用例，在这种情况下无法获得正常值，客户端应该处理与其他用例不同的极端情况。例如，假设我们有一个命令工厂，客户端定期从命令工厂请求命令。如果没有命令可以获得，客户端应该等待 1 秒钟再请求。我们可以通过返回一个空命令来实现这一点，客户端必须处理这个空命令，如下面的例子所示（为了简洁起见，没有显示一些方法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Read&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Write&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Command <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldRead()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReadCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (shouldWrite()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">CommandFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommandFactory</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> factory.getCommand();</span><br><span class="line">    <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Since the CommandFactory can return null commands, clients are obligated to check if the command received is null and if it is, sleep for 1 second. This creates a set of conditional logic that clients must handle on their own. We can reduce this overhead by creating a null-object (sometimes called a special-case object). A null-object encapsulates the logic that would have been executed in the null scenario (namely, sleeping for 1 second) into an object that is returned in the null case. For our command example, this means creating a SleepCommand that sleeps when executed:</p>
<p>由于 CommandFactory 可以返回空命令，客户端有义务检查接收到的命令是否为空，如果为空，则休眠1秒。这将创建一组必须由客户端自行处理的条件逻辑。我们可以通过创建一个「空对象」（有时称为特殊情况对象）来减少这种开销。「空对象」将在 null 场景中执行的逻辑（休眠 1 秒）封装到 null 情况下返回的对象中。对于我们的命令示例，这意味着创建一个在执行时休眠的 SleepCommand：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Command <span class="title function_">getCommand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldRead()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReadCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (shouldWrite()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WriteCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SleepCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">CommandFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommandFactory</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> factory.getCommand();</span><br><span class="line">    command.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>As with the case of returning empty collections, creating a null-object allows clients to implicitly handle special cases as if they were the normal case. This is not always possible, though; there may be instances where the decision for dealing with a special case must be made by the client. This can be handled by allowing the client to supply a default value, as is done with the Optional class. In the case of Optional, clients can obtain the contained value or a default using the orElse method:</p>
<p>与返回空集合的情况一样，创建「空对象」允许客户端隐式处理特殊情况，就像它们是正常情况一样。但这并不总是可行的；在某些情况下，处理特殊情况的决定必须由客户做出。这可以通过允许客户端提供默认值来处理，就像使用 Optional 类一样。在 Optional 的情况下，客户端可以使用 orElse 方法获取包含的值或默认值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserListUrl</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserListUrl</span>(<span class="string">&quot;http://localhost/api/v2/users&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; sortingParam = url.getSortingValue();</span><br><span class="line"><span class="type">String</span> <span class="variable">sort</span> <span class="operator">=</span> sortingParam.orElse(<span class="string">&quot;ASC&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>If there is a supplied sorting parameter (i.e. if the Optional contains a value), this value will be returned. If no value exists, “ASC” will be returned by default. The Optional class also allows a client to create a default value when needed, in case the default creation process is expensive (i.e. the default will be created only when needed):</p>
<p>如果有一个提供的排序参数（例如，如果 Optional 包含一个值），这个值将被返回。如果不存在值，默认情况下将返回「ASC」。Optional 类还允许客户端在需要时创建默认值，以防默认创建过程开销较大（即只在需要时创建默认值）:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">UserListUrl</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserListUrl</span>(<span class="string">&quot;http://localhost/api/v2/users&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; sortingParam = url.getSortingValue();</span><br><span class="line"><span class="type">String</span> <span class="variable">sort</span> <span class="operator">=</span> sortingParam.orElseGet(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// Expensive computation</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Using a combination of null-objects and default values, we can devise the following rule:</p>
<p>结合「空对象」和默认值的用法，我们可以设计以下规则：</p>
<p><strong>When possible, handle null cases with a null-object or allow clients to supply a default value</strong></p>
<p>如果可能，使用「空对象」处理使用 null 关键字的情况，或者允许客户端提供默认值</p>
<h2 id="2-Defaulting-to-Functional-Programming"><a href="#2-Defaulting-to-Functional-Programming" class="headerlink" title="2. Defaulting to Functional Programming"></a>2. Defaulting to Functional Programming</h2><p><strong>默认使用函数式编程</strong></p>
<p>Since streams and lambdas were introduced in Java Development Kit (JDK) 8, there has been a push to migrate towards functional programming, and rightly so. Before lambdas and streams, performing simple functional tasks were cumbersome and resulted in severely unreadable code. For example, filtering a collection in the traditional style resulted in code that resembled the following:</p>
<p>自从在 JDK 8 中引入了 stream 和 lambda 表达式之后，就出现了向函数式编程迁移的趋势，这理当如此。在 lambda 表达式和 stream 出现之前，执行简单的功能任务是非常麻烦的，并且会导致代码可读性的严重下降。例如，以下代码用传统方式过滤一个集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Iterator&lt;Foo&gt; iterator = foos.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterator.next().getValue() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>While this code is compact, it does not tell us in an obvious way that we are trying to remove elements of a collection if some criterion is satisfied. Instead, it tells us that we are iterating over a collection while there are more elements in the collection and removing each element if its value is greater than 10 (we can surmise that filtering is occurring, but it obscured in the verbosity of the code). We can shrink this logic down to one statement using functional programming:</p>
<p>虽然这段代码很紧凑，但它并没有以一种明显的方式告诉我们，当满足某个条件时，我们将尝试删除集合的元素。相反，它告诉我们，当集合中有更多的元素时将遍历集合，并将删除值大于 10 的元素（我们可以假设正在进行筛选，但是删除元素的部分被代码的冗长所掩盖）。我们可以使用函数式编程将这个逻辑压缩为一条语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">foos.removeIf(foo -&gt; foo.getValue() &gt; <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>Not only is this statement much more concise than its iterative alternative, it also tells us exactly what it is trying to do. We can even make it more readable if we name the predicate and pass it to the removeIf method:</p>
<p>这个语句不仅比迭代方式更简洁，而且准确的告诉我们它的行为。如果我们为 predicate 命名并将其传递给 removeIf 方法，甚至可以使其更具可读性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;Foo&gt; valueGreaterThan10 = foo -&gt; foo.getValue() &gt; <span class="number">10</span>;</span><br><span class="line">foos.removeIf(valueGreaterThan10);</span><br></pre></td></tr></table></figure>

<p>The final line of this snippet reads like a sentence in English, informing us exactly of what the statement is doing. With code that looks so compact and readable, it is tempting to try and use functional programming in every situation where iteration is required, but this is a naive philosophy. Not every situation lends itself to functional programming. For example, if we tried to print the cross product of the set of suits and ranks in a deck of cards (every combination of suits and ranks), we could create the following (see Effective Java, 3rd Edition for a more detailed listing of this example):</p>
<p>这段代码的最后一行读起来像一个英语句子，准确地告诉我们语句在做什么。对于看起来如此紧凑和极具可读性的代码，在任何需要迭代的情况下尝试使用函数式编程是很让人向往的，但这是一种天真的想法。并不是每种情况都适合函数式编程。例如，如果我们尝试在一副牌中打印一组花色和等级的排列组合（花色和等级的每一种组合），我们可以创建以下内容（参见 Effective Java，第三版，获得这个示例的详细内容）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Suit</span> &#123;</span><br><span class="line">    CLUB, DIAMOND, HEART, SPADE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">Rank</span> &#123;</span><br><span class="line">    ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING;</span><br><span class="line">&#125;</span><br><span class="line">Collection&lt;Suit&gt; suits = EnumSet.allOf(Suit.class);</span><br><span class="line">Collection&lt;Rank&gt; ranks = EnumSet.allOf(Rank.class);</span><br><span class="line">suits.stream()</span><br><span class="line">    .forEach(suit -&gt; &#123;</span><br><span class="line">        ranks.stream().forEach(rank -&gt; System.out.println(<span class="string">&quot;Suit: &quot;</span> + suit + <span class="string">&quot;, rank: &quot;</span> + rank));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>While this is not over-complicated to read, it is not the most straightforward implementation we could devise. It is pretty clear that we are trying to force streams into a realm where traditional iteration is much more favorable. If we used traditional iteration, we could have simplified the cross product of suits and ranks to the following:</p>
<p>虽然读起来并不复杂，但这种实现并不是最简单的。很明显，我们正试图强行使用 stream，而此时使用传统迭代明显更有利。如果我们使用传统的迭代方法，我们可以将 花色和等级的排列组合简化为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Suit suit: suits) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Rank rank: ranks) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Suit: &quot;</span> + suit + <span class="string">&quot;, rank: &quot;</span> + rank);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This style, although much less flashy, is much more straightforward. We can quickly see that we are attempting to iterate over each suit and rank and pair each rank with each suit. The tediousness of functional programming becomes much more acute the larger the stream expression becomes. Take for example the following code snippet created by Joshua Bloch in Effective Java, 3rd Edition (pp. 205, Item 45) to find all the anagrams over a specified length contained in a dictionary at the path supplied by the user:</p>
<p>这种风格虽然不那么浮华，但却直截了当得多。我们可以很快地理解，我们试图遍历每个花色和等级，并将每个等级与每个花色配对。流表达式越大，函数式编程的乏味性就越明显。以 Joshua Bloch 在《Effective Java, 3rd Edition》第 205 页，第 45 项中创建的以下代码片段为例，在用户提供的路径上查找字典中包含的指定长度内的所有词组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Anagrams</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">dictionary</span> <span class="operator">=</span> Paths.get(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minGroupSize</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;String&gt; words = Files.lines(dictionary)) &#123;</span><br><span class="line">            words.collect(</span><br><span class="line">                groupingBy(word -&gt; word.chars().sorted()</span><br><span class="line">                           .collect(StringBuilder::<span class="keyword">new</span>,</span><br><span class="line">                               (sb, c) -&gt; sb.append((<span class="type">char</span>) c),</span><br><span class="line">                               StringBuilder::append).toString()))</span><br><span class="line">                .values().stream()</span><br><span class="line">                    .filter(group -&gt; group.size() &gt;= minGroupSize)</span><br><span class="line">                    .map(group -&gt; group.size() + <span class="string">&quot;: &quot;</span> + group)</span><br><span class="line">                    .forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Even the most seasoned stream adherents would probably balk at this implementation. It is unclear as to the intention of the code and would take a decent amount of thinking to uncover what the above stream manipulations are trying to accomplish. This does not mean that streams are complicated or that they are too wordy, but they are not always the best choice. As we saw above, using the removeIf reduced a complicated group of statements into a single, easily-comprehensible statement. Therefore, we should not try to replace every instance of traditional iteration with streams or even lambdas. Instead, we should abide by the following rule when deciding whether to functional programming or use the traditional route:</p>
<p>即使是经验最丰富的 stream 使用者也可能会对这个实现感到迷茫。短时间内很难理解代码的意图，需要大量的思考才能发现上面的 stream 操作试图实现什么。这并不意味着 stream 一定很复杂或太冗长，只是因为它们不总是最好的选择。正如我们在上面看到的，使用 removeIf 可以将一组复杂的语句简化为一个易于理解的语句。因此，我们不应该试图用 stream 甚至 lambda 表达式替换传统迭代的每个使用场景。相反，在决定是使用函数式编程还是使用传统路线时，我们应该遵循以下规则：</p>
<p><strong>Functional programming and traditional iteration both have their benefits and disadvantages: Use whichever results in the simplest and most readable code</strong></p>
<p>函数式编程和传统的迭代都有其优点和缺点：应该以简易性和可读性为准来选择</p>
<p>Although it may be tempting to use the flashiest, most up-to-date features of Java in every possible scenario, this is not always the best route. Sometimes, the old-school features work best.</p>
<p>尽管在每个可能的场景中使用 Java 最炫、最新的特性可能很让人向往，但这并不总是最好的方法。有时候，老式的功能效果反而最好。</p>
<h2 id="3-Creating-Indiscriminate-Getters-and-Setters"><a href="#3-Creating-Indiscriminate-Getters-and-Setters" class="headerlink" title="3. Creating Indiscriminate Getters and Setters"></a>3. Creating Indiscriminate Getters and Setters</h2><p><strong>滥用 getter 和 setter</strong></p>
<p>One of the first things that novice programmers are taught is to encapsulate the data associated with a class in private fields and expose them through public methods. In practice, this results in creating getters to access the private data of a class and setters to modify the private data of a class:</p>
<p>新手程序员学到的第一件事是将与类相关的数据封装在私有字段中，并通过公共方法公开它们。在实际使用时，通过创建 getter 来访问类的私有数据，创建 setter 来修改类的私有数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>While this is a great practice for newer programmers to learn, it is not a practice that should go unrefined into intermediate or advanced programming. What normally occurs in practice is that every private field is given a pair of getters and setters, exposing the internals of the class to external entities. This can cause some serious issues, especially if the private fields are mutable. This is not only a problem with setters but even when only a getter is present. Take for example the following class, which exposes its only field using a getter:</p>
<p>虽然这对于新程序员来说是一个很好的学习实践，但这种做法不能未经思索就应用在中级或高级编程。在实际中通常发生的情况是，每个私有字段都有一对 getter 和 setter 将类的内部内容公开给外部实体。这会导致一些严重的问题，特别是在私有字段是可变的情况下。这不仅是 setter 的问题，甚至在只有 getter 时也是如此。以下面的类为例，该类使用 getter 公开其唯一的字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Foo foo;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bar</span><span class="params">(Foo foo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.foo = foo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Foo <span class="title function_">getFoo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This exposure may seem innocuous since we have wisely restricted removed a setter method, but it is far from it. Suppose that another class accesses an object of type Bar and changes the underlying value of Foo without the Bar object knowing:</p>
<p>由于我们删除了 setter 方法，这么做可能看起来明智且无害，但并非如此。假设另一个类访问 Bar 类型的对象，并在 Bar 对象不知道的情况下更改 Foo 的底层值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Foo</span> <span class="variable">foo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="type">Bar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bar</span>(foo);</span><br><span class="line"><span class="comment">// Another place in the code</span></span><br><span class="line">bar.getFoo().setValue(-<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>In this case, we have changed the underlying value of the Foo object without informing the Bar object. This can cause some serious problems if the value that we provided the Foo object breaks an invariant of the Bar object. For example, if we had an invariant that stated the value of Foo could not be negative, then the above snippet silently breaks this invariant without notifying the Bar object. When the Bar object goes to use the value of its Foo object, things may go south very quickly, especially if the Bar object assumed that the invariant held since it did not expose a setter to directly reassign the Foo object it held. This can even cause failure to a system if data is severely altered, as in the following example of an array being inadvertently exposed:</p>
<p>在本例中，我们更改了 Foo 对象的基础值，而没有通知 Bar 对象。如果我们提供的 Foo 对象的值破坏了 Bar 对象的一个不变量，这可能会导致一些严重的问题。举个例子，如果我们有一个不变量，它表示 Foo 的值不可能是负的，那么上面的代码片段将在不通知 Bar 对象的情况下静默修改这个不变量。当 Bar 对象使用它的 Foo 对象值时，事情可能会迅速向不好的方向发展，尤其是如果 Bar 对象假设这是不变的，因为它没有暴露 setter 直接重新分配它所保存的 Foo 对象。如果数据被严重更改，这甚至会导致系统失败，如下面例子所示，数组的底层数据在无意中暴露：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">public</span> String[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(String[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String e: array) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayReader arrayReader;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reader</span><span class="params">(ArrayReader arrayReader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayReader = arrayReader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ArrayReader <span class="title function_">getArrayReader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arrayReader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayReader.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ArrayReader</span> <span class="variable">arrayReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayReader</span>();</span><br><span class="line">arrayReader.setArray(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;);</span><br><span class="line"><span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reader</span>(arrayReader);</span><br><span class="line">reader.getArrayReader().setArray(<span class="literal">null</span>);</span><br><span class="line">reader.read();</span><br></pre></td></tr></table></figure>

<p>Executing this code would cause a NullPointerException because the array associated with the ArrayReader object is null when it tries to iterate over the array. What is disturbing about this NullPointerException is that it can occur long after the change to the ArrayReader was made and maybe even in an entirely different context (such as in a different part of the code or maybe even in a different thread), making the task of tracking down the problem very difficult.</p>
<p>执行此代码将导致 NullPointerException 异常，因为当 ArrayReader 的实例对象试图遍历数组时，与该对象关联的数组为 null。这个 NullPointerException 异常的令人不安之处在于，它可能在对 ArrayReader 进行更改很久之后才发生，甚至可能发生在完全不同的上下文中（例如在代码的不同部分中，甚至在不同的线程中），这使得调试变得非常困难。</p>
<p>The astute reader may also notice that we could have made the private ArrayReader field final since we did not expose a way to reassign it after it has been set through the constructor. Although it might seem that this would make the ArrayReader constant, ensuring that the ArrayReader object we return cannot be changed, this is not the case. Instead, adding final to a field only ensures that the field itself is not reassigned (i.e. we cannot create a setter for that field). It does not stop the state of the object itself from being changed. If we tried to add final to the getter method, this is futile as well, since final modifier on a method only means that the method cannot be overridden by subclasses.</p>
<p>读者如果仔细考虑，可能还会注意到，我们可以将私有的 ArrayReader 字段设置为 final，因为我们在通过构造函数赋值之后，没有对它重新赋值的方法。虽然这看起来会使 ArrayReader 成为常量，确保我们返回的 ArrayReader 对象不会被更改，但事实并非如此。如果将 final 添加到字段中只能确保字段本身没有重新赋值（即，不能为该字段创建 setter）而不会阻止对象本身的状态被更改。或者我们试图将 final 添加到 getter 方法中，这也是徒劳的，因为方法上的 final 修饰符只意味着该方法不能被子类重写。</p>
<p>We can even go one step further and defensively copy the ArrayReader object in the constructor of Reader, ensuring that the object that was passed into the object cannot be tampered with after it has been supplied to the Reader object. For example, the following cannot happen:</p>
<p>我们甚至可以更进一步考虑，在 Reader 的构造函数中防御性地复制 ArrayReader 对象，确保在将对象提供给 Reader 对象之后，传入该对象的对象不会被篡改。例如，应避免以下情况发生：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ArrayReader</span> <span class="variable">arrayReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayReader</span>();</span><br><span class="line">arrayReader.setArray(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;);</span><br><span class="line"><span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reader</span>(arrayReader);</span><br><span class="line">arrayReader.setArray(<span class="literal">null</span>);    <span class="comment">// Change arrayReader after supplying it to Reader</span></span><br><span class="line">reader.read();    <span class="comment">// NullPointerException thrown</span></span><br></pre></td></tr></table></figure>

<p>Even with these three changes (the final modifier on the field, the final modifier on the getter, and the defensive copy of the ArrayReader supplied to the constructor), we still have not solved the problem. The problem is not found in how we are exposing the underlying data of our class, but in the fact that we are doing it in the first place. For us to solve this issue, we have to stop exposing the internal data of our class and instead provide a method to change the underlying data, while still adhering to the class invariants. The following code solves this problem, while at the same time introducing a defensive copy of the supplied ArrayReader and marking the ArrayReader field final, as should be the case since there is no setter:</p>
<p>即使有了这三个更改（字段上增加 final 修饰符、getter 上增加 final 修饰符以及提供给构造函数的 ArrayReader 的防御性副本），我们仍然没有解决问题。问题不在于我们公开底层数据的方式，而是因为我们是在一开始就是错的。要解决这个问题，我们必须停止公开类的内部数据，而是提供一种方法来更改底层数据，同时仍然遵循类不变量。下面的代码解决了这个问题，同时引入了提供的 ArrayReader 的防御性副本，并将 ArrayReader 字段标记为 final，因为没有 setter，所以应该是这样：</p>
<p><strong>译注：原文的如下代码有一处错误，Reader 类中的 setArrayReaderArray 方法返回值类型应为 void，该方法是为了取代 setter，不应产生返回值。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayReader <span class="title function_">copy</span><span class="params">(ArrayReader other)</span> &#123;</span><br><span class="line">        <span class="type">ArrayReader</span> <span class="variable">copy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayReader</span>();</span><br><span class="line">        String[] originalArray = other.getArray();</span><br><span class="line">        copy.setArray(Arrays.copyOf(originalArray, originalArray.length));</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... Existing class ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayReader arrayReader;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reader</span><span class="params">(ArrayReader arrayReader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayReader = ArrayReader.copy(arrayReader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ArrayReader <span class="title function_">setArrayReaderArray</span><span class="params">(String[] array)</span> &#123;</span><br><span class="line">        arrayReader.setArray(Objects.requireNonNull(array));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayReader.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ArrayReader</span> <span class="variable">arrayReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayReader</span>();</span><br><span class="line">arrayReader.setArray(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;);</span><br><span class="line"><span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reader</span>(arrayReader);</span><br><span class="line">reader.read();</span><br><span class="line"><span class="type">Reader</span> <span class="variable">flawedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reader</span>(arrayReader);</span><br><span class="line">flawedReader.setArrayReaderArray(<span class="literal">null</span>);    <span class="comment">// NullPointerException thrown</span></span><br></pre></td></tr></table></figure>

<p>If we look at the flawed reader, a NullPointerException is still thrown, but it is thrown immediately when the invariant (that a non-null array is used when reading) is broken, not at some later time. This ensures that the invariant fails-fast, which makes debugging and finding the root of the problem much easier.</p>
<p>如果我们查看这个有缺陷的读取器，它仍然会抛出 NullPointerException 异常，但在不变量（读取时使用非空数组）被破坏时，会立即抛出该异常，而不是在稍后的某个时间。这确保了不变式失败的速度很快，这使得调试和找到问题的根源变得容易得多。</p>
<p>We can take this principle one step further and state that it is a good idea to make the fields of a class completely inaccessible if there is no pressing need to allow for the state of a class to be changed. For example, we could make the Reader class fully encapsulated by removing any methods that modify its state after creation:</p>
<p>我们可以进一步利用这一原则。如果不迫切需要更改类的状态，那么让类的字段完全不可访问是一个好主意。例如，我们可以通过删除所有能够修改 Reader 类实例对象状态的方法，实现 Reader 类的完全封装：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayReader arrayReader;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reader</span><span class="params">(ArrayReader arrayReader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayReader = ArrayReader.copy(arrayReader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> &#123;</span><br><span class="line">        arrayReader.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ArrayReader</span> <span class="variable">arrayReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayReader</span>();</span><br><span class="line">arrayReader.setArray(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>&#125;);</span><br><span class="line"><span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reader</span>(arrayReader);</span><br><span class="line"><span class="comment">// No changes can be made to the Reader after instantiation</span></span><br><span class="line">reader.read();</span><br></pre></td></tr></table></figure>

<p>Taking this concept to its logical conclusion, it is a good idea to make a class immutable if it is possible. Thus, the state of the object never changes after the object has been instantiated. For example, we can create an immutable Car object as follows:</p>
<p>从逻辑上总结这个概念，如果可能的话，让类不可变是一个好主意。因此，在实例化对象之后，对象的状态永远不会改变。例如，我们可以创建一个不可变的 Car 对象如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String make;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String model;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String make, String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.make = make;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMake</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> make;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It is important to note that if the fields of the class are non-primitive, a client can modify the underlying object as we saw above. Thus, immutable objects should return defensive copies of these objects, disallowing clients to modify the internal state of the immutable object. Note, though, that defensive copying can reduce performance since a new object is created each time the getter is called. This issue should not be prematurely optimized (disregarding immutability for the promise of possible performance increases), but it should be noted. The following snippet provides an example of defensive copying for method return values:</p>
<p>需要注意的是，如果类的字段不是基本数据类型，客户端可以如前所述那样修改底层对象。因此，不可变对象应该返回这些对象的防御性副本，不允许客户端修改不可变对象的内部状态。但是请注意，防御性复制会降低性能，因为每次调用 getter 时都会创建一个新对象。对于这个缺陷，不应该过早地进行优化（忽视不可变性，以保证可能的性能提高），但是应该注意到这一点。下面的代码片段提供了一个方法返回值的防御性复制示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transmission</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Transmission <span class="title function_">copy</span><span class="params">(Transmission other)</span> &#123;</span><br><span class="line">        <span class="type">Transmission</span> <span class="variable">copy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Transmission</span>();</span><br><span class="line">        copy.setType(other.getType);</span><br><span class="line">        <span class="keyword">return</span> copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String make;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Transmission transmission;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String make, String model, Transmission transmission)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.make = make;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">        <span class="built_in">this</span>.transmission = Transmission.copy(transmission);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMake</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> make;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Transmission <span class="title function_">getTransmission</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Transmission.copy(transmission);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>This leaves us with the following principle:</p>
<p>这给我们提示了以下原则：</p>
<p><strong>Make classes immutable, unless there is a pressing need to change the state of a class. All fields of an immutable class should be marked as private and final to ensure that no reassignments are performed on the fields and no indirect access should be provided to the internal state of the fields</strong></p>
<p>使类不可变，除非迫切需要更改类的状态。不可变类的所有字段都应该标记为 private 和 final，以确保不会对字段执行重新赋值，也不会对字段的内部状态提供间接访问</p>
<p>Immutability also brings with it some very important advantages, such as the ability of the class to be easily used in a multi-threaded context (i.e. two threads can share the object without fear that one thread will alter the state of the object while the other thread is accessing that state). In general, there are many more instances that we can create immutable classes than we realize at first: Many times, we add getters or setters out of habit.</p>
<p>不变性还带来了一些非常重要的优点，例如类能够在多线程上下文中轻松使用（即两个线程可以共享对象，而不用担心一个线程会在另一个线程访问该状态时更改该对象的状态）。总的来说，在很多实际情况下我们可以创建不可变的类，要比我们意识到的要多很多，只是我们习惯了添加了 getter 或 setter。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><strong>结论</strong></p>
<p>Many of the applications we create end up working, but in a large number of them, we introduce sneaky problems that tend to creep up at the worst possible times. In some of those cases, we do things out of convenience, or even out of habit, and pay little mind to whether these idioms are practical (or safe) in the context we use them. In this article, we delved into three of the most common of these practices, such null return values, affinity for functional programming, and careless getters and setters, along with some pragmatic alternatives. While the rules in this article should not be taken as absolute, they do provide some insight into the uncommon dangers of common practices and may help in fending off laborious errors in the future.</p>
<p>我们创建的许多应用程序最终都能正常工作，但是在大量应用程序中，我们无意引入的一些问题可能只会在最极端的情况下出现。在某些情况下，我们做事情是出于方便，甚至是出于习惯，而很少注意这些习惯在我们使用的上下文中是否实用（或安全）。在本文中，我们深入研究了在实际应用中最常见的三种问题，如：空返回值、函数式编程的魅力、粗心的 getter 和 setter，以及一些实用的替代方法。虽然本文中的规则不是绝对的，但是它们确实为一些在实际应用中遇到的罕见问题提供了见解，并且在将来可能会有助于避免产生一些需要费力解决的错误。</p>
]]></content>
      <categories>
        <category>文献翻译</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-中使用-issues-模版和-pull-request-模版</title>
    <url>/5886aa70-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、issues-模版"><a href="#一、issues-模版" class="headerlink" title="一、issues 模版"></a>一、issues 模版</h2><h3 id="1-1-默认模版"><a href="#1-1-默认模版" class="headerlink" title="1.1 默认模版"></a>1.1 默认模版</h3><ul>
<li>在代码库新建目录：<code>.github</code></li>
<li>在 <code>.github</code> 目录下添加 <code>ISSUE_TEMPLATE.md</code> 文件作为 issues 默认模版。当创建 issue 时，若未建立多模版或选择了 <code>Open a regular issue</code> 时，系统会引用该模版。</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/36018696/65121507-e9a21400-da21-11e9-823e-808e3bfb4d09.png" alt="1"></p>
<h3 id="1-2-多模版"><a href="#1-2-多模版" class="headerlink" title="1.2 多模版"></a>1.2 多模版</h3><ul>
<li>在代码库新建目录：<code>.github/ISSUE_TEMPLATE</code></li>
<li>该目录下可添加多个 <code>.md</code> 文件作为 issues 模版。当创建 issue 时，系统会展示这些模版供选择。</li>
<li><code>.md</code> 文件参考格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 该模版的名称（创建 issue 时，系统展示模版列表时会显示该名称）</span><br><span class="line">about: 该模版的描述（创建 issue 时，系统展示模版列表时会显示该描述）</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文内容……</span><br></pre></td></tr></table></figure>

<h3 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h3><ul>
<li>issues 的默认模版和多模版可同时存在。</li>
<li>关于 issues 模版的描述可详见帮助文档：<a href="https://help.github.com/articles/manually-creating-a-single-issue-template-for-your-repository/">https://help.github.com/articles/manually-creating-a-single-issue-template-for-your-repository/</a></li>
</ul>
<h2 id="二、pull-request-模版"><a href="#二、pull-request-模版" class="headerlink" title="二、pull request 模版"></a>二、pull request 模版</h2><h3 id="2-1-默认模版"><a href="#2-1-默认模版" class="headerlink" title="2.1 默认模版"></a>2.1 默认模版</h3><ul>
<li>在代码库新建目录：<code>.github</code></li>
<li>在 <code>.github</code> 目录下添加 <code>PULL_REQUEST_TEMPLATE.md</code> 文件作为 pull request 默认模版。当创建不带参数的 pull request 时，系统会引用该模版。</li>
</ul>
<h3 id="2-2-多模版"><a href="#2-2-多模版" class="headerlink" title="2.2 多模版"></a>2.2 多模版</h3><ul>
<li>在代码库新建目录：<code>.github/PULL_REQUEST_TEMPLATE</code></li>
<li>该目录下可添加多个 <code>.md</code> 文件作为 pull request 模版。</li>
<li>pull request 模版要通过查询参数来调用。例如，要使用 <code>pr-template-1.md</code> 这个模版，可使用如下查询：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/用户名/代码库名称/compare/分支名称?expand=1&amp;template=pr-template-1.md</span><br><span class="line">或参考GitHub帮助文档的格式，如下。两者效果相同。</span><br><span class="line">https://github.com/用户名/代码库名称/compare/master...分支名称?expand=1&amp;template=pr-template-1.md</span><br></pre></td></tr></table></figure>
<ul>
<li>可选查询参数<ul>
<li><code>expand=1</code>，直接跳转到 pull request 界面。如果不带此参数会先到 compare 界面，需手动进入pull request 界面。</li>
<li><code>template=pr-template-1.md</code>，调用名为 <code>pr-template-1.md</code> 的模版。如果不带此参数，则调用默认模版。</li>
<li><code>title=New+bug+report</code>（或者 <code>title=New%20bug%20report</code>），指定 pull request 的标题为 <code>New bug report</code></li>
<li>其他参数可详见帮助文档：<a href="https://help.github.com/articles/about-automation-for-issues-and-pull-requests-with-query-parameters/">https://help.github.com/articles/about-automation-for-issues-and-pull-requests-with-query-parameters/</a></li>
</ul>
</li>
</ul>
<h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h3><ul>
<li>pull request 的默认模版和多模版可同时存在。</li>
<li>关于 pull request 模版的描述可详见帮助文档：<a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/">https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/</a></li>
</ul>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-中独立仓库与组织的权限</title>
    <url>/5886aa71-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、独立仓库（公开或私有）"><a href="#一、独立仓库（公开或私有）" class="headerlink" title="一、独立仓库（公开或私有）"></a>一、独立仓库（公开或私有）</h2><p>独立仓库包含 <strong>仓库拥有者和外部协作者</strong> 两种角色，相关权限如下表</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">直接写入</th>
<th align="center">issue 操作<br>[删除、隐藏、修改]</th>
<th align="center">添加标签</th>
<th align="center">分支操作<br>[删除、创建]</th>
<th align="center">邀请校对</th>
<th align="center">被邀请校对</th>
<th align="center">校对操作<br>[同意、驳回、重校]</th>
<th align="center">强制合并</th>
<th align="center">Setting 菜单可见</th>
</tr>
</thead>
<tbody><tr>
<td align="center">仓库拥有者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">外部协作者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p><strong>注：Setting 菜单是否可见决定了是否具备删库、设置分支规则、邀请外部协作者、密钥设置等高级权限。</strong></p>
<h2 id="二、组织"><a href="#二、组织" class="headerlink" title="二、组织"></a>二、组织</h2><p>组织包含 <strong>组织拥有者、成员、外部协作者</strong> 三种角色，以及 <strong>Read、Write、Admin</strong> 三种权限。</p>
<h3 id="1、Base-permissions（基本权限）"><a href="#1、Base-permissions（基本权限）" class="headerlink" title="1、Base permissions（基本权限）"></a>1、Base permissions（基本权限）</h3><p>Base permissions to the organization’s repositories apply to all members and excludes outside collaborators. Since organization members can have permissions from multiple sources, members and collaborators who have been granted a higher level of access than the base permissions will retain their higher permission privileges.</p>
<p>组织存储库的基本权限适用于所有成员（不含外部协作者）。由于组织成员可以拥有多个库的自定义权限，因此被授予比基本权限更高级别访问权限时，成员和协作者将保留更高的权限。</p>
<p>基本权限包含如下几种：</p>
<ul>
<li>None，Members will only be able to clone and pull public repositories. To give a member additional access, you’ll need to add them to teams or make them collaborators on individual repositories.</li>
</ul>
<p>成员只能对公共库实施 clone 和 pull 操作。要为成员提供额外的访问权限，需要将它们添加到团队中，或者让它们成为各个存储库的外部协作者。</p>
<ul>
<li>Read，Members will be able to clone and pull all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone 和 pull 操作。</p>
<ul>
<li>Write，Members will be able to clone, pull, and push all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone、pull 和 push 操作。</p>
<ul>
<li>Admin，Members will be able to clone, pull, push, and add new collaborators to all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone、pull、push 和添加外部协作者的操作。</p>
<h3 id="2、组织角色"><a href="#2、组织角色" class="headerlink" title="2、组织角色"></a>2、组织角色</h3><ul>
<li>Owner，Has full administrative access to the entire organization.</li>
</ul>
<p>对整个组织具有完全的管理访问权限。<strong>组织角色为 Owner 时，对于组织中每一个库而言，默认权限都是 Admin。</strong></p>
<ul>
<li>Member，Can see every member and non-secret team in the organization, and can create new repositories.</li>
</ul>
<p>可以查看组织中的每个成员和非机密团队，并可以创建新的存储库。<strong>组织角色为 Member 时，对于组织中每一个库而言，默认权限都与基本权限相同。</strong></p>
<h3 id="3、库权限"><a href="#3、库权限" class="headerlink" title="3、库权限"></a>3、库权限</h3><p>Read、Write、Admin，详见基本权限的描述。<strong>如果需要在某一个库中授予某个成员高于基本权限的权限，需要将其添加为外部协作者。</strong></p>
<h3 id="4、组织权限总结如下"><a href="#4、组织权限总结如下" class="headerlink" title="4、组织权限总结如下"></a>4、组织权限总结如下</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">直接写入</th>
<th align="center">issue 操作<br>[删除、隐藏、修改]</th>
<th align="center">添加标签</th>
<th align="center">分支操作<br>[删除、创建]</th>
<th align="center">邀请校对</th>
<th align="center">被邀请校对</th>
<th align="center">校对操作<br>[同意、驳回、重校]</th>
<th align="center">强制合并</th>
<th align="center">库 Setting 菜单可见</th>
<th align="center">组织 Setting 菜单可见</th>
</tr>
</thead>
<tbody><tr>
<td align="center">组织拥有者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">Read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">Write</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">Admin</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>git-常用命令</title>
    <url>/5886aa72-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<!--
注意：在 issues 使用锚点不能使用 [title](#title) 这种方式
 -->

<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="目录">目录</a></h2><ul>
<li><a href="#初始化仓库">初始化仓库</a></li>
<li><a href="#全局配置用户名和邮箱地址">全局配置用户名和邮箱地址</a></li>
<li><a href="#删除全局配置的用户名和邮箱地址">删除全局配置的用户名和邮箱地址</a></li>
<li><a href="#对当前仓库配置用户名和邮箱地址">对当前仓库配置用户名和邮箱地址</a></li>
<li><a href="#查看全局配置的用户名和邮箱">查看全局配置的用户名和邮箱</a></li>
<li><a href="#查看当前仓库的用户名和邮箱">查看当前仓库的用户名和邮箱</a></li>
<li><a href="#生成-SSH-公钥">生成-SSH-公钥</a></li>
<li><a href="#关联远程仓库">关联远程仓库</a></li>
<li><a href="#把本地库的所有内容推送到远程库">把本地库的所有内容推送到远程库</a></li>
<li><a href="#从远程仓库克隆">从远程仓库克隆</a></li>
<li><a href="#将修改的文件提交到暂存区">将修改的文件提交到暂存区</a></li>
<li><a href="#将文件从暂存区提交到版本库">将文件从暂存区提交到版本库</a></li>
<li><a href="#修改-commit-的注释信息">修改-commit-的注释信息</a></li>
<li><a href="#查看当前提交状态">查看当前提交状态</a></li>
<li><a href="#查看文件具体变更内容">查看文件具体变更内容</a></li>
<li><a href="#查看提交的历史版本">查看提交的历史版本</a></li>
<li><a href="#查看操作命令历史记录">查看操作命令历史记录</a></li>
<li><a href="#版本回退">版本回退</a></li>
<li><a href="#撤销修改或提交">撤销修改或提交</a></li>
<li><a href="#删除文件">删除文件</a></li>
<li><a href="#分支操作">分支操作</a></li>
<li><a href="#对比两个分支差异">对比两个分支差异</a></li>
<li><a href="#保存工作现场">保存工作现场</a></li>
<li><a href="#查看已经保存工作现场">查看已经保存工作现场</a></li>
<li><a href="#恢复工作现场">恢复工作现场</a></li>
<li><a href="#获取远程仓库最新提交到本地">获取远程仓库最新提交到本地</a></li>
<li><a href="#打标签">打标签</a></li>
<li><a href="#查看所有标签">查看所有标签</a></li>
<li><a href="#补标签">补标签</a></li>
<li><a href="#查看标签信息">查看标签信息</a></li>
<li><a href="#删除标签">删除标签</a></li>
<li><a href="#将标签推送到远程">将标签推送到远程</a></li>
<li><a href="#清空缓存">清空缓存</a></li>
</ul>
<h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a><a name="初始化仓库">初始化仓库</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="全局配置用户名和邮箱地址"><a href="#全局配置用户名和邮箱地址" class="headerlink" title="全局配置用户名和邮箱地址"></a><a name="全局配置用户名和邮箱地址">全局配置用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email email@example.com</span><br></pre></td></tr></table></figure>

<p>注意：如果一台机器需要使用多个 ssh 公钥的方式，不应使用全局配置，而是每个仓库独立配置。否则提交时，远程仓库的 commit 记录会显示是全局用户做的提交操作。</p>
<h2 id="删除全局配置的用户名和邮箱地址"><a href="#删除全局配置的用户名和邮箱地址" class="headerlink" title="删除全局配置的用户名和邮箱地址"></a><a name="删除全局配置的用户名和邮箱地址">删除全局配置的用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global --unset user.name</span><br><span class="line">$ git config --global --unset user.email</span><br></pre></td></tr></table></figure>

<h2 id="对当前仓库配置用户名和邮箱地址"><a href="#对当前仓库配置用户名和邮箱地址" class="headerlink" title="对当前仓库配置用户名和邮箱地址"></a><a name="对当前仓库配置用户名和邮箱地址">对当前仓库配置用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name &quot;Your Name&quot;</span><br><span class="line">$ git config user.email email@example.com</span><br></pre></td></tr></table></figure>

<h2 id="查看全局配置的用户名和邮箱"><a href="#查看全局配置的用户名和邮箱" class="headerlink" title="查看全局配置的用户名和邮箱"></a><a name="查看全局配置的用户名和邮箱">查看全局配置的用户名和邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure>

<h2 id="查看当前仓库的用户名和邮箱"><a href="#查看当前仓库的用户名和邮箱" class="headerlink" title="查看当前仓库的用户名和邮箱"></a><a name="查看当前仓库的用户名和邮箱">查看当前仓库的用户名和邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="生成-SSH-公钥"><a href="#生成-SSH-公钥" class="headerlink" title="生成-SSH-公钥"></a><a name="生成-SSH-公钥">生成-SSH-公钥</a></h2><p>1、为 <code>git@example.com</code> 用户生成 SSH 公钥 <code>id_rsa</code> 文件，并保存在默认目录 <code>~/.ssh</code> 下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;git@example.com &quot; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>2、测试 username （默认用户名为 git）的 SSH 链接是否正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh –T &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a><a name="关联远程仓库">关联远程仓库</a></h2><p>添加名称为 origin 的关联信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:username/name.git</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/name.git</span><br></pre></td></tr></table></figure>

<p>查看全部关联的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<h2 id="把本地库的所有内容推送到远程库"><a href="#把本地库的所有内容推送到远程库" class="headerlink" title="把本地库的所有内容推送到远程库"></a><a name="把本地库的所有内容推送到远程库">把本地库的所有内容推送到远程库</a></h2><p>1、通常添加参数 <code>-u</code>，简化提交远程库流程。例如：把本地的 master 分支和远程的 master 分支关联：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>2、使用参数 -u 关联后，推送最新修改命令简化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure>

<h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a><a name="从远程仓库克隆">从远程仓库克隆</a></h2><p>1、默认方式，克隆全部分支，并指定本地文件夹名称为 dirName</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:username/repositoryname.git dirName</span><br></pre></td></tr></table></figure>

<p>2、克隆指定分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone -b branchname https://github.com/username/repositoryname.git</span><br></pre></td></tr></table></figure>

<p>git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>
<h2 id="将修改的文件提交到暂存区"><a href="#将修改的文件提交到暂存区" class="headerlink" title="将修改的文件提交到暂存区"></a><a name="将修改的文件提交到暂存区">将修改的文件提交到暂存区</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add &lt;filename.xxx&gt; [-u][.][-A]</span><br></pre></td></tr></table></figure>

<p><code>-u</code> 参数：提交被修改（modified）和被删除（deleted）文件，不包括新文件（new）</p>
<p><code>.</code>参数：提交新文件（new）和被修改（modified）文件，不包括被删除（deleted）文件</p>
<p><code>-A</code>参数：提交所有变化，包括新文件（new）、被修改（modified）文件、被删除（deleted）文件</p>
<h2 id="将文件从暂存区提交到版本库"><a href="#将文件从暂存区提交到版本库" class="headerlink" title="将文件从暂存区提交到版本库"></a><a name="将文件从暂存区提交到版本库">将文件从暂存区提交到版本库</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;create new file&quot;</span><br></pre></td></tr></table></figure>

<h2 id="修改-commit-的注释信息"><a href="#修改-commit-的注释信息" class="headerlink" title="修改 commit 的注释信息"></a><a name="修改 commit 的注释信息">修改 commit 的注释信息</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="查看当前提交状态"><a href="#查看当前提交状态" class="headerlink" title="查看当前提交状态"></a><a name="查看当前提交状态">查看当前提交状态</a></h2><p>可以查看是否存在变更，但不能查看具体变更了什么内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h2 id="查看文件具体变更内容"><a href="#查看文件具体变更内容" class="headerlink" title="查看文件具体变更内容"></a><a name="查看文件具体变更内容">查看文件具体变更内容</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看提交的历史版本"><a href="#查看提交的历史版本" class="headerlink" title="查看提交的历史版本"></a><a name="查看提交的历史版本">查看提交的历史版本</a></h2><p>默认情况下显示的信息冗长，使用时通常 <code>--pretty=oneline</code> 参数。例子：仅显示提交的最近 3 条提交历史版本号，只能显示 head 指向的当前版本和之前的版本信息</p>
<p>1、本地仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline -3</span><br><span class="line">或</span><br><span class="line">$ git log --oneline -3</span><br></pre></td></tr></table></figure>

<p>2、远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log origin/master --pretty=oneline -3</span><br><span class="line">或</span><br><span class="line">$ git log origin/master --oneline -3</span><br></pre></td></tr></table></figure>

<h2 id="查看操作命令历史记录"><a href="#查看操作命令历史记录" class="headerlink" title="查看操作命令历史记录"></a><a name="查看操作命令历史记录">查看操作命令历史记录</a></h2><p>使用该命令可以某版本在执行回退后再次返回某版本，前提是不退出当前命令行窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a><a name="版本回退">版本回退</a></h2><p>1、回退到上一个版本：<code>$ git reset --hard HEAD^</code></p>
<p>2、回退到上上一个版本：<code>$ git reset --hard HEAD^^</code></p>
<p>3、回退到上 50 个版本：<code>$ git reset --hard HEAD~50</code></p>
<p>4、根据版本号回退，版本号不必输入完全，可区别即可：<code>$ git reset --hard &lt;versionCode&gt;</code></p>
<h2 id="撤销修改或提交"><a href="#撤销修改或提交" class="headerlink" title="撤销修改或提交"></a><a name="撤销修改或提交">撤销修改或提交</a></h2><p>1、修改后还没有被放到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;fileName.xxx&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、修改后已经放到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<p>3、修改后已经提交到版本库。此时，使用版本回退，回退到指定版本</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><a name="删除文件">删除文件</a></h2><p>1、从暂存区删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<p>2、从暂存区恢复文件，只能恢复文件到最新版本，并丢失最近一次提交后修改的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a><a name="分支操作">分支操作</a></h2><p>1、本地分支</p>
<ul>
<li>创建本地分支：<code>$ git branch feature-local</code></li>
<li>切换到本地分支：<code>$ git checkout feature-local</code></li>
<li>创建并同时切换到本地分支：<code>$ git checkout –b feature-local</code></li>
</ul>
<p>2、远程分支</p>
<ul>
<li>在远程开好分支 feature-branch，本地获取：<code>$ git checkout -b feature-local origin/feature-branch</code></li>
<li>本地创建名为 dev 的远程分支：<code>$ git checkout -b dev origin/dev</code></li>
<li>指定推送本地的 feature-local 分支到远程 origin 的 feature-branch 分支，若远程不存在该分支则新建：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  git push origin feature-local:feature-branch</span><br></pre></td></tr></table></figure>

<p>3、查看所有分支（本地分支和远程分支）:<code>$ git branch -a</code></p>
<p>4、合并分支</p>
<p>要合并 dev 分支到 master 主分支。先切换到 master 分支后，执行命令：<code>$ git merge dev</code></p>
<p>注：通常合并分支时 git 会用 Fast forward 模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用 Fast forward 模式，git 就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息：<code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p>
<p>5、查看分支历史：<code>$ git log --graph --pretty=oneline --abbrev-commit</code>，若内容过多，可仅显示前 10 条：<code>$ git log --oneline -10</code></p>
<p>6、删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>如果分支还没有合并，使用上条命令会出现提示阻止删除，此时需要强行删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -D &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>7、合并远程分支到本地</p>
<ul>
<li>在本地新建一个 temp 分支，并将远程 origin 仓库的 master 分支代码下载到本地 temp 分支：<code>git fetch origin master:tmp</code></li>
<li>比较本地代码与刚刚从远程下载下来的代码的区别：<code>git diff tmp</code></li>
<li>合并 temp 分支到本地的 master 分支：<code>git merge tmp</code></li>
<li>如果不想保留 temp 分支 可以用这步删除：<code>git branch -d temp</code></li>
</ul>
<p>注意：若提交历史不同，无法合并，参见「合并两个不同提交历史的分支」。</p>
<p>8、合并两个不同提交历史的分支</p>
<ul>
<li>将远程仓库的更新获取到本地分支 temp：<code>git fetch origin master:temp</code></li>
<li>此时若直接合并，因为提交历史不同，出现 fatal: refusing to merge unrelated histories 错误，需要增加参数，强制合并即可。：<code>git merge temp --allow-unrelated-histories</code></li>
</ul>
<p>9、切换分支时出现 “error: The following untracked working tree files……”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br><span class="line">        ……（涉及的文件列表）</span><br><span class="line">Please move or remove them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>

<p>解决方式：删除上述涉及的文件即可。执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -d -fx</span><br></pre></td></tr></table></figure>

<p>git clean 参数</p>
<ul>
<li>-n 显示将要删除的文件和目录；</li>
<li>-x 删除忽略文件已经对 git 来说不识别的文件</li>
<li>-d 删除未被添加到 git 的路径中的文件</li>
<li>-f 强制运行</li>
</ul>
<h2 id="对比两个分支差异"><a href="#对比两个分支差异" class="headerlink" title="对比两个分支差异"></a><a name="对比两个分支差异">对比两个分支差异</a></h2><p>有 2 个分支：master、dev。</p>
<p>1、查看 dev 有，而 master 中没有的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log dev ^master</span><br></pre></td></tr></table></figure>

<p>2、查看 dev 中比 master 中多提交了哪些内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log master..dev</span><br></pre></td></tr></table></figure>

<p>3、只比较两个分支有什么不一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log dev...master</span><br></pre></td></tr></table></figure>

<p>在上述情况下，再显示出每个提交是在哪个分支上：<code>git log --left-right dev...master</code></p>
<p>根据 <code>–left-right dev…master</code> 的顺序，左箭头 &lt; 表示是 dev 分支提交；右箭头 &gt; 表示 master 分支提交</p>
<h2 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a><a name="保存工作现场">保存工作现场</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>

<p>注意：要提交到暂存区才可以执行 stash，可以执行多次 stash</p>
<h2 id="查看已经保存工作现场"><a href="#查看已经保存工作现场" class="headerlink" title="查看已经保存工作现场"></a><a name="查看已经保存工作现场">查看已经保存工作现场</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<h2 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a><a name="恢复工作现场">恢复工作现场</a></h2><ul>
<li><p>使用 git stash apply 恢复：<code>$ git stash apply stash@&#123;0&#125;</code>，但这种方式恢复后 stash 内容并不删除，需要用 git stash drop 来删除：<code>$ git stash drop stash@&#123;0&#125;</code></p>
</li>
<li><p>另一种方式是用 git stash pop，恢复的同时把 stash 内容也删了：<code>$ git stash pop stash@&#123;0&#125;</code></p>
</li>
</ul>
<h2 id="获取远程仓库最新提交到本地"><a href="#获取远程仓库最新提交到本地" class="headerlink" title="获取远程仓库最新提交到本地"></a><a name="获取远程仓库最新提交到本地">获取远程仓库最新提交到本地</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p>如果 git pull 提示 no tracking information，则说明本地分支和远程分支的链接关系没有创建，执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p>抓取远程分支最新提交到本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin 远端分支名:本地分支名</span><br></pre></td></tr></table></figure>

<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a><a name="打标签">打标签</a></h2><p>切换到需要打标签的分支上执行命令：<code>$ git tag v1.0</code></p>
<h2 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a><a name="查看所有标签">查看所有标签</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>

<h2 id="补标签"><a href="#补标签" class="headerlink" title="补标签"></a><a name="补标签">补标签</a></h2><p>查看历史提交，找到需要补标签的提交的 id，执行命令：<code>$ git tag v0.9 &lt;commitId&gt;</code>，也可以为标签添加说明，用 -a 指定标签名，-m 指定说明文字：<code>$ git tag -a v0.1 -m &quot;version 0.1&quot; &lt;commitId&gt;</code></p>
<p>注：标签不是按时间顺序列出，而是按字母排序的</p>
<h2 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a><a name="查看标签信息">查看标签信息</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git show &lt;tagName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a><a name="删除标签">删除标签</a></h2><ul>
<li>删除本地标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>删除远程标签，要先删除本地标签，再 push</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">$ git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>

<h2 id="将标签推送到远程"><a href="#将标签推送到远程" class="headerlink" title="将标签推送到远程"></a><a name="将标签推送到远程">将标签推送到远程</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br></pre></td></tr></table></figure>

<p>一次性推送全部尚未推送到远程的本地标签：<code>$ git push origin –-tags</code></p>
<h2 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a><a name="清空缓存">清空缓存</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure>

<p>例如，当 ignore 文件更新时，如果不清空缓存，则不生效。</p>
<h2 id="命令行创建空白-gitignore-文件"><a href="#命令行创建空白-gitignore-文件" class="headerlink" title="命令行创建空白 .gitignore 文件"></a><a name="命令行创建空白 .gitignore 文件">命令行创建空白 .gitignore 文件</a></h2><p>进入库目录，命令行执行 <code>touch .gitignore</code> 即可。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-问题备忘</title>
    <url>/5886d180-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="git-删除远程仓库文件"><a href="#git-删除远程仓库文件" class="headerlink" title="git 删除远程仓库文件"></a>git 删除远程仓库文件</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>git 提交到远程仓库后发现有遗漏的文件未添加到 <code>.ignore</code> 文件中</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>例如不需要提交 target 目录，可执行 <code>git rm -r --cached target</code>，重新 commit 和 push 即可</p>
<p>说明：</p>
<ul>
<li><p>删除工作区文件，并且将这次删除放入暂存区，<code>git rm [file1] [file2] ...</code></p>
</li>
<li><p>停止追踪指定文件，但该文件会保留在工作区，<code>git rm --cached [file]</code></p>
</li>
</ul>
<h2 id="git-提交时出现警告-LF-will-be-replaced-by-CRLF-in"><a href="#git-提交时出现警告-LF-will-be-replaced-by-CRLF-in" class="headerlink" title="git 提交时出现警告 LF-will-be-replaced-by-CRLF-in"></a>git 提交时出现警告 LF-will-be-replaced-by-CRLF-in</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>提交时出现警告：<code>warning: LF will be replaced by CRLF </code>，但是不影响提交。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>配置选项修改，把 core.autocrlf 设置成 false。其他选项如下：<ul>
<li>git config –global core.autocrlf true #默认值</li>
<li>git config –global core.autocrlf input #从库中迁出代码不转换</li>
<li>git config –global core.autocrlf false  #不转换</li>
</ul>
</li>
</ul>
<h2 id="git-提交时中文文件名显示的解决方案"><a href="#git-提交时中文文件名显示的解决方案" class="headerlink" title="git 提交时中文文件名显示的解决方案"></a>git 提交时中文文件名显示的解决方案</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>git 提交时中文显示为乱码，有碍观瞻</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">117 files changed, 11670 insertions(+), 5 deletions(-)</span><br><span class="line"> create mode 100644 &quot;content/Excel/SUMIFS \345\207\275\346\225\260.md&quot;</span><br><span class="line"> create mode 100644 &quot;content/Excel/VBA \344\275\277\347\224\250 ReDim \345\256\236\347\216\260\344\272\214\347\273\264\345\212\250\346\200\201\346\225\260\347\273\204.md&quot;</span><br><span class="line"> create mode 100644 &quot;content/Excel/VBA \345\210\240\351\231\244\346\211\200\346\234\211\345\267\245\344\275\234\350\241\250\347\232\204\347\251\272\350\241\214.md&quot;</span><br></pre></td></tr></table></figure>

<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>执行 <code>git config --global core.quotepath false</code> 即可，上述提交的文件名已经可以辨认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">117 files changed, 11670 insertions(+), 5 deletions(-)</span><br><span class="line"> create mode 100644 content/Excel/SUMIFS 函数.md</span><br><span class="line"> create mode 100644 content/Excel/VBA 使用 ReDim 实现二维动态数组.md</span><br><span class="line"> create mode 100644 content/Excel/VBA 删除所有工作表的空行.md</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore-文件通用参考版本</title>
    <url>/5886d181-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><ul>
<li><code>/mtk/</code>，过滤整个文件夹</li>
<li><code>*.zip</code>，过滤所有.zip 文件</li>
<li><code>/mtk/do.c</code>，过滤某个具体文件</li>
</ul>
<h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>只需要管理 <code>/mtk/</code> 目录中的 one.txt 文件，这个目录中的其他文件都不需要管理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mtk/</span><br><span class="line">!/mtk/one.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，如果前面的规则匹配的范围更大，则后面的规则将不会生效。</li>
<li>如果在创建 .gitignore 文件之前 push，即使在 .gitignore 文件中写入新的过滤规则，这些规则也不会起作用，Git 仍然会对所有文件进行版本管理。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.</span><br><span class="line"></span><br><span class="line">.gradle</span><br><span class="line">!gradle/wrapper/gradle-wrapper.jar</span><br><span class="line">!**/src/main/**/build/</span><br><span class="line">!**/src/test/**/build/</span><br><span class="line">HELP.md</span><br><span class="line"></span><br><span class="line"># STS</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line"># IntelliJ IDEA</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">out/</span><br><span class="line">!**/src/main/**/out/</span><br><span class="line">!**/src/test/**/out/</span><br><span class="line"></span><br><span class="line"># NetBeans</span><br><span class="line">/nbproject/private/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line"></span><br><span class="line"># VS Code</span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line"># dependencies</span><br><span class="line">/node_modules</span><br><span class="line">/.pnp</span><br><span class="line">.pnp.js</span><br><span class="line"></span><br><span class="line"># testing</span><br><span class="line">/coverage</span><br><span class="line"></span><br><span class="line"># production</span><br><span class="line">/build</span><br><span class="line"></span><br><span class="line"># misc</span><br><span class="line">.DS_Store</span><br><span class="line">.env.local</span><br><span class="line">.env.development.local</span><br><span class="line">.env.test.local</span><br><span class="line">.env.production.local</span><br><span class="line"></span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next-主题构建首页动态更新目录</title>
    <url>/5886f890-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<blockquote>
</blockquote>
<!-- more -->

<h3 id="1-问题及需求"><a href="#1-问题及需求" class="headerlink" title="1 问题及需求"></a>1 问题及需求</h3><p><strong>问题</strong></p>
<ul>
<li>首页（home）默认显示按日期排序的文章列表，使用 <code>&lt;!-- more --&gt;</code> 省略内容仍显得繁杂冗长；</li>
<li>分类（categories）页面虽然有按类型、日期排序的文章列表，但切换分类需要往返多次。</li>
</ul>
<p><strong>需求</strong></p>
<ul>
<li>建立一个首页目录，将文章分类（categories 参数）和标题，分别作为列表的一级、二级显示；</li>
<li>标题即为文章链接，点击可直接到达；想查看其他分类，直接回到首页即可。</li>
</ul>
<h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h3><h3 id="2-1-建立文件"><a href="#2-1-建立文件" class="headerlink" title="2.1 建立文件"></a>2.1 建立文件</h3><p>在 <code>source/</code> 下建立 <code>index.md</code>，命名标题，内容留空。</p>
<h3 id="2-2-关闭默认首页"><a href="#2-2-关闭默认首页" class="headerlink" title="2.2 关闭默认首页"></a>2.2 关闭默认首页</h3><p>修改 hexo 配置文件 <code>_config.yml</code>，找到 <code>index_generator</code> 配置项，修改 <code>path</code> 属性为一个无效值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator</span>:</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">  <span class="attr">per_page</span>: <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by</span>: -date</span><br></pre></td></tr></table></figure>

<p>此时启动项目后，首页将不再出现文章列表，转而显示 <code>index.md</code> 内容。</p>
<blockquote>
<p>注：<code>index.md</code> 在渲染后成为 <code>index.html</code></p>
</blockquote>
<h3 id="3-动态更新目录"><a href="#3-动态更新目录" class="headerlink" title="3 动态更新目录"></a>3 动态更新目录</h3><p>若文章分类多，每次更新、调整文章都需要将相应链接手工同步到首页也是一件相当繁琐的事情。因此有必要考虑自动更新首页。</p>
<h3 id="3-1-hexo-加载顺序"><a href="#3-1-hexo-加载顺序" class="headerlink" title="3.1 hexo 加载顺序"></a>3.1 hexo 加载顺序</h3><p>根据 hexo 文档 <a href="https://hexo.io/zh-cn/api/posts#%E6%B8%B2%E6%9F%93">https://hexo.io/zh-cn/api/posts#%E6%B8%B2%E6%9F%93</a> 关于渲染顺序的说明，要实现 <code>index.md</code> 的写入，要在 <code>hexo g</code> 命令执行之前完成，可引入 before_post_render 过滤器实现该需求。</p>
<h3 id="3-2-hexo-过滤器"><a href="#3-2-hexo-过滤器" class="headerlink" title="3.2 hexo 过滤器"></a>3.2 hexo 过滤器</h3><p>过滤器文档：<a href="https://hexo.io/zh-cn/api/filter#%E6%A6%82%E8%A6%81">https://hexo.io/zh-cn/api/filter#%E6%A6%82%E8%A6%81</a></p>
<p>在主题目录下 <code>themes\next\filters\</code> 新建 <code>index.js</code>，添加 priority 分别为 9 和 10 的两个 before_post_render 过滤器，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> categoriesMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首页目录不显示草稿内容</span></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">source</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;_drafts&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">path</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;index&quot;</span>) &lt; <span class="number">0</span> &amp;&amp; data.<span class="property">categories</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> curCategorie = data.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (categoriesMap.<span class="title function_">has</span>(curCategorie)) &#123;</span><br><span class="line">            <span class="keyword">let</span> valueArray = categoriesMap.<span class="title function_">get</span>(curCategorie);</span><br><span class="line">            valueArray = valueArray.<span class="title function_">concat</span>(<span class="string">`  - [<span class="subst">$&#123;data.title&#125;</span>](/<span class="subst">$&#123;data.path&#125;</span>)\n`</span>)</span><br><span class="line">            categoriesMap.<span class="title function_">set</span>(curCategorie, valueArray);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            categoriesMap.<span class="title function_">set</span>(curCategorie, [<span class="string">`  - [<span class="subst">$&#123;data.title&#125;</span>](/<span class="subst">$&#123;data.path&#125;</span>)\n`</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_post_render&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 精确定位index.html，防止误写其他路径不同但同名的文件</span></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">path</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;index&quot;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> categoriesMap.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">            data.<span class="property">content</span> += <span class="string">`- <span class="subst">$&#123;key&#125;</span>\n`</span></span><br><span class="line">            <span class="keyword">let</span> valueArray = categoriesMap.<span class="title function_">get</span>(key);</span><br><span class="line">            valueArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">                data.<span class="property">content</span> += element;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>代码说明</p>
<ul>
<li>第一个过滤器遍历全部文章，获取所有现存的分类及所属文章链接；</li>
<li>第二个过滤器写入 <code>index.html</code></li>
</ul>
<h3 id="3-3-有关属性"><a href="#3-3-有关属性" class="headerlink" title="3.3 有关属性"></a>3.3 有关属性</h3><p>为探究 data 为何物，可打断点观察其结构：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  title<span class="punctuation">:</span> <span class="string">&quot;DataGrip-2018.3.4-数据导出配置案例&quot;</span><span class="punctuation">,</span></span><br><span class="line">  date<span class="punctuation">:</span> <span class="punctuation">&#123;</span>……文章生成日期的有关参数（略）<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  _content<span class="punctuation">:</span> <span class="string">&quot;……正文内容（略）&quot;</span><span class="punctuation">,</span></span><br><span class="line">  source<span class="punctuation">:</span> <span class="string">&quot;_posts/DataGrip-2018-3-4-数据导出配置案例.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">  raw<span class="punctuation">:</span> <span class="string">&quot;……正文内容（略）&quot;</span><span class="punctuation">,</span></span><br><span class="line">  slug<span class="punctuation">:</span> <span class="string">&quot;DataGrip-2018-3-4-数据导出配置案例&quot;</span><span class="punctuation">,</span></span><br><span class="line">  published<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  updated<span class="punctuation">:</span> <span class="punctuation">&#123;</span>……文章更新日期的有关参数（略）<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  comments<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  layout<span class="punctuation">:</span> <span class="string">&quot;post&quot;</span><span class="punctuation">,</span></span><br><span class="line">  photos<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  link<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  _id<span class="punctuation">:</span> <span class="string">&quot;cljzhnjmb001oz0u6en5ab6xb&quot;</span><span class="punctuation">,</span></span><br><span class="line">  path<span class="punctuation">:</span> <span class="string">&quot;2022/12/07/DataGrip-2018-3-4-数据导出配置案例/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  permalink<span class="punctuation">:</span> <span class="string">&quot;http://www.dcheng.site/2022/12/07/DataGrip-2018-3-4-%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B/&quot;</span><span class="punctuation">,</span></span><br><span class="line">  full_source<span class="punctuation">:</span> <span class="string">&quot;C:\\mainProjects\\blog\\source\\_posts\\DataGrip-2018-3-4-数据导出配置案例.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">  asset_dir<span class="punctuation">:</span> <span class="string">&quot;C:\\mainProjects\\blog\\source\\_posts\\DataGrip-2018-3-4-数据导出配置案例\\&quot;</span><span class="punctuation">,</span></span><br><span class="line">  tags<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        name<span class="punctuation">:</span> <span class="string">&quot;DataGrip&quot;</span><span class="punctuation">,</span></span><br><span class="line">        _id<span class="punctuation">:</span> <span class="string">&quot;cljzhnjmc001uz0u6hlov172o&quot;</span><span class="punctuation">,</span></span><br><span class="line">        slug<span class="punctuation">:</span> <span class="string">&quot;DataGrip&quot;</span><span class="punctuation">,</span></span><br><span class="line">        path<span class="punctuation">:</span> <span class="string">&quot;tags/DataGrip/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        permalink<span class="punctuation">:</span> <span class="string">&quot;http://www.dcheng.site/tags/DataGrip/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        posts<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          data<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          length<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        length<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    length<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  categories<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        name<span class="punctuation">:</span> <span class="string">&quot;配置案例&quot;</span><span class="punctuation">,</span></span><br><span class="line">        _id<span class="punctuation">:</span> <span class="string">&quot;cljzhnjmc001tz0u6967u3bji&quot;</span><span class="punctuation">,</span></span><br><span class="line">        slug<span class="punctuation">:</span> <span class="string">&quot;配置案例&quot;</span><span class="punctuation">,</span></span><br><span class="line">        path<span class="punctuation">:</span> <span class="string">&quot;categories/配置案例/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        permalink<span class="punctuation">:</span> <span class="string">&quot;http://www.dcheng.site/categories/%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        posts<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          data<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          length<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        length<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    length<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  content<span class="punctuation">:</span> <span class="string">&quot;……正文内容（略）&quot;</span><span class="punctuation">,</span></span><br><span class="line">  site<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-最终效果"><a href="#4-最终效果" class="headerlink" title="4 最终效果"></a>4 最终效果</h3><p><img src="/5886f890-2a1e-11ee-846a-89c1529ebdf1/%E5%9B%BE1-%E9%BB%98%E8%AE%A4%E6%95%88%E6%9E%9C.png" alt="图1-默认效果"></p>
<center>图1-默认效果</center>

</br>

<p><img src="/5886f890-2a1e-11ee-846a-89c1529ebdf1/%E5%9B%BE2-%E5%8A%A8%E6%80%81%E7%9B%AE%E5%BD%95%E6%95%88%E6%9E%9C.png" alt="图2-动态目录效果"></p>
<center>图2-动态目录效果</center>

<hr>
]]></content>
      <categories>
        <category>部署和安装</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-Navicat-远程连接阿里云服务器的-MySQL-数据库</title>
    <url>/5886f891-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用 Navicat 连接阿里云远程 MySQL 数据库。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1、开放权限"><a href="#1、开放权限" class="headerlink" title="1、开放权限"></a>1、开放权限</h3><p>登录 MySql，此时用命令指定用户名 root 可以通过密码 123456 访问所有数据库，之后刷新权限。相应的命令及结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="2、设置服务器安全组的端口放行规则"><a href="#2、设置服务器安全组的端口放行规则" class="headerlink" title="2、设置服务器安全组的端口放行规则"></a>2、设置服务器安全组的端口放行规则</h3><p><strong>ECS 云服务器安全组设置如下：</strong></p>
<img src="/5886f891-2a1e-11ee-846a-89c1529ebdf1/1.png" class="">

<p><strong>轻量应用服务器防火墙设置如下：</strong></p>
<img src="/5886f891-2a1e-11ee-846a-89c1529ebdf1/2.png" class="">

<h3 id="3、设置-Navicat"><a href="#3、设置-Navicat" class="headerlink" title="3、设置 Navicat"></a>3、设置 Navicat</h3><p>进入 Navicat，新建连接，在「常规」选项卡中输入开放权限时的信息，用户名：root；密码：123456</p>
<img src="/5886f891-2a1e-11ee-846a-89c1529ebdf1/3.png" class="">
]]></content>
      <categories>
        <category>部署和安装</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-github+Action-部署-Hexo-博客</title>
    <url>/5886f892-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为便于叙述，统一说明如下：</p>
<ul>
<li>博客 github 源码仓库默认分支为 main，ssh 地址：<code>git@github.com:username/blog.git</code></li>
<li><code>username.github.io</code>：博客部署仓库，默认分支为 main</li>
<li><code>hexo_deploy</code>：本地私钥文件</li>
<li>&#96;hexo_deploy.pub：本地公钥文件</li>
<li>主题以 NexT 8.13.2 为例</li>
</ul>
<blockquote>
<p>本地 hexo 安装、主题部署流程较简单，步骤省略。</p>
</blockquote>
<h2 id="1、配置本地博客源代码库"><a href="#1、配置本地博客源代码库" class="headerlink" title="1、配置本地博客源代码库"></a>1、配置本地博客源代码库</h2><p>在本地博客源代码仓库根目录 <code>_config.yml</code> 文件中增加如下部署配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：github 目前仅允许 ssh 提交，部署仓库必须为 ssh 地址</p>
</blockquote>
<h2 id="2、配置专用密钥对"><a href="#2、配置专用密钥对" class="headerlink" title="2、配置专用密钥对"></a>2、配置专用密钥对</h2><p>本地重新生成一组密钥对，如 <code>hexo_deploy.pub</code> 与 <code>hexo_deploy</code>。私钥配置到 github 源码仓库的 <code>repository secret</code>，公钥配置到 <code>username.github.io</code> 部署仓库的 <code>Deploy keys</code>。该密钥对专用于「源码仓库」与「部署仓库」之间的 Action 自动部署。</p>
<blockquote>
<p>github 源码库新建后即可配置：依次进入 <code>Settings -&gt; Secrets -&gt; Actions -&gt; New repository secret</code>，名称取 <code>HEXO_DEPLOY_SECRET</code>，值取自 <code>hexo_deploy</code> 内容；<code>username.github.io.git</code> 部署仓库配置步骤略。</p>
</blockquote>
<p>也可以拿用户公钥 <code>SSH keys</code>（可访问全部仓库）及其对应的私钥完成该步骤，但是用户公钥不一致时（比如办公室和家里使用的用户公钥不同，除非复制同一份密钥对），Action 自动部署的私钥也要更改，使用专用密钥对可避免这个问题。</p>
<h2 id="3、创建-Action"><a href="#3、创建-Action" class="headerlink" title="3、创建 Action"></a>3、创建 Action</h2><p>在本地博客源代码库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，参考内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">hexo-blog-deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">username@gmail.com</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">username/username.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">19.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_SECRET:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_SECRET&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="comment"># 配置私钥，否则无法访问部署库，提示 git@github.com: Permission denied (publickey).</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_SECRET&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 设置用户名和邮箱，否则提示 Please tell me who you are.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="string">          # 全局搜索插件</span></span><br><span class="line"><span class="string">          npm install hexo-generator-searchdb --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="4、常用命令"><a href="#4、常用命令" class="headerlink" title="4、常用命令"></a>4、常用命令</h2><ul>
<li>本地启动：<code>hexo s</code></li>
<li>清除缓存：<code>hexo clean</code></li>
<li>新建草稿：<code>hexo new draft &lt;filename&gt;</code></li>
<li>发布草稿：<code>hexo publish [layout] &lt;filename&gt;</code></li>
</ul>
<h2 id="5、其他"><a href="#5、其他" class="headerlink" title="5、其他"></a>5、其他</h2><h2 id="（可选）部署留言栏-Utterances"><a href="#（可选）部署留言栏-Utterances" class="headerlink" title="（可选）部署留言栏 Utterances"></a>（可选）部署留言栏 Utterances</h2><p>安装 github 应用： <code>https://github.com/apps/utterances</code></p>
<p>next 最新版本已经集成 Utterances，因此不需要复制安装完成后的模板，直接在主题文件根目录下设置 <code>_config.yml</code> 文件即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">username/username.github.io</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>

<h2 id="（可选）部署留言栏-giscus"><a href="#（可选）部署留言栏-giscus" class="headerlink" title="（可选）部署留言栏 giscus"></a>（可选）部署留言栏 giscus</h2><p>进入官网（<code>https://giscus.app/</code>）可拿到一段已经填充配置内容的 <code>&lt;script&gt;</code> 标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://giscus.app/client.js&quot;</span><br><span class="line">    data-repo=&quot;[在此输入仓库]&quot;</span><br><span class="line">    data-repo-id=&quot;[在此输入仓库 ID]&quot;</span><br><span class="line">    data-category=&quot;[在此输入分类名]&quot;</span><br><span class="line">    data-category-id=&quot;[在此输入分类 ID]&quot;</span><br><span class="line">    data-mapping=&quot;pathname&quot;</span><br><span class="line">    data-strict=&quot;0&quot;</span><br><span class="line">    data-reactions-enabled=&quot;1&quot;</span><br><span class="line">    data-emit-metadata=&quot;0&quot;</span><br><span class="line">    data-input-position=&quot;bottom&quot;</span><br><span class="line">    data-theme=&quot;preferred_color_scheme&quot;</span><br><span class="line">    data-lang=&quot;zh-CN&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果要在每一篇文章后添加评论功能，以 next 主题为例，仅供参考。进入 <code>themes/next/layout/_macro/post.njk</code> 文件，找到模板中「文章末尾」（注释标志为 <code>END POST BODY</code>，如下所示），将上述片段加入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### <span class="variable constant_">END</span> <span class="variable constant_">POST</span> <span class="variable constant_">BODY</span> ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line">&lt;footer <span class="keyword">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span><br><span class="line">  &#123;%- <span class="keyword">if</span> is_index %&#125;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;post-eof&quot;</span> style=<span class="string">&quot;margin:20px auto 20px;width:100%;background: transparent;border-top: 1px solid #e2e0e0&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &#123;&#123;- <span class="title function_">next_inject</span>(<span class="string">&#x27;postBodyEnd&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> post.<span class="property">reward_settings</span>.<span class="property">enable</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-reward.njk&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.<span class="property">creative_commons</span>.<span class="property">license</span> and theme.<span class="property">creative_commons</span>.<span class="property">post</span> and post.<span class="property">copyright</span> !== <span class="literal">false</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-copyright.njk&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.<span class="property">follow_me</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-followme.njk&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: theme.<span class="property">cache</span>.<span class="property">enable</span>&#125;) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line">    &#123;###   add giscus  ###&#125;</span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span><br><span class="line">        data-repo=<span class="string">&quot;[在此输入仓库]&quot;</span></span><br><span class="line">        data-repo-id=<span class="string">&quot;[在此输入仓库 ID]&quot;</span></span><br><span class="line">        data-category=<span class="string">&quot;[在此输入分类名]&quot;</span></span><br><span class="line">        data-category-id=<span class="string">&quot;[在此输入分类 ID]&quot;</span></span><br><span class="line">        data-mapping=<span class="string">&quot;pathname&quot;</span></span><br><span class="line">        data-strict=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-reactions-enabled=<span class="string">&quot;1&quot;</span></span><br><span class="line">        data-emit-metadata=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-input-position=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">        data-theme=<span class="string">&quot;preferred_color_scheme&quot;</span></span><br><span class="line">        data-lang=<span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">        crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        <span class="keyword">async</span>&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;%- <span class="keyword">if</span> post.<span class="property">tags</span> and post.<span class="property">tags</span>.<span class="property">length</span> %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = <span class="string">&#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="keyword">if</span> theme.<span class="property">tag_icon</span> <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span> %&#125;</span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span><br><span class="line">        &#123;%- <span class="keyword">for</span> tag <span class="keyword">in</span> post.<span class="property">tags</span>.<span class="title function_">toArray</span>() %&#125;</span><br><span class="line">          &lt;a href=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> rel=<span class="string">&quot;tag&quot;</span>&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.<span class="property">name</span> &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（可选）部署域名"><a href="#（可选）部署域名" class="headerlink" title="（可选）部署域名"></a>（可选）部署域名</h2><p>参考官方文档：<a href="%60https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages%60">验证用户站点的域</a></p>
<blockquote>
<p>注意：需要在 blog 源代码库 source 目录下放置 CNAME 文件。之后步骤按官方文档进行</p>
</blockquote>
]]></content>
      <categories>
        <category>部署和安装</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>部署-ubuntu-服务器</title>
    <url>/58871fa0-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>本例使用系统版本为 Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.19.0-35-generic x86_64)</p>
<blockquote>
<p>提示：win 环境下最好使用 UltraISO 烧写镜像文件。经实测，按照官方文档推荐的 balenaEtcher 有损坏 U 盘风险。</p>
</blockquote>
<h2 id="安装-ssh"><a href="#安装-ssh" class="headerlink" title="安装 ssh"></a>安装 ssh</h2><p>执行下列命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>验证服务是否启动：<code>sudo systemctl status ssh</code></p>
<h2 id="安装-Mariadb"><a href="#安装-Mariadb" class="headerlink" title="安装 Mariadb"></a>安装 Mariadb</h2><p>两种主要方式：</p>
<p>1、Repositories 安装方式：<code>https://mariadb.org/download/?t=repo-config&amp;d=22.04+%22jammy%22&amp;v=10.11&amp;r_m=neusoft</code></p>
<p>2、从 <code>https://archive.mariadb.org/mariadb-10.11.2/bintar-linux-systemd-x86_64/</code> 获得链接，直接下载压缩包</p>
<blockquote>
<p>本地二进制压缩包链接：<code>https://archive.mariadb.org/mariadb-10.11.2/bintar-linux-systemd-x86_64/mariadb-10.11.2-linux-systemd-x86_64.tar.gz</code></p>
</blockquote>
<p>本例采用第一种。依次执行下列命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https curl</span><br><span class="line">sudo curl -o /etc/apt/trusted.<span class="property">gpg</span>.<span class="property">d</span>/mariadb_release_signing_key.<span class="property">asc</span> <span class="string">&#x27;https://mariadb.org/mariadb_release_signing_key.asc&#x27;</span></span><br><span class="line">sudo sh -c <span class="string">&quot;echo &#x27;deb https://mirrors.neusoft.edu.cn/mariadb/repo/10.11/ubuntu jammy main&#x27; &gt;&gt;/etc/apt/sources.list&quot;</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mariadb-server</span><br></pre></td></tr></table></figure>

<p>3、验证服务是否启动：<code>sudo systemctl status mariadb</code></p>
<blockquote>
<p>注意：安装完成后要执行 <code>sudo -i</code> 切换 root 再通过 <code>mariadb -u root</code> 进入设置密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;MyNewPass4!&#39;;</code></p>
</blockquote>
<p>4、配置文件</p>
<p>配置文件路径为：<code>/etc/mysql/mariadb.conf.d/50-server.cnf</code></p>
<p>5、取消 IP 限制</p>
<p>当执行 <code>netstat -an|grep 3306</code> 命令发现如下反馈，说明此时无法远程连接数据库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ netstat -an|grep <span class="number">3306</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               <span class="variable constant_">LISTEN</span></span><br></pre></td></tr></table></figure>

<p>打开配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mariadb.<span class="property">conf</span>.<span class="property">d</span>/<span class="number">50</span>-server.<span class="property">cnf</span></span><br></pre></td></tr></table></figure>

<p>找到 <code>bind-address = 127.0.0.1</code> 注释掉。</p>
<blockquote>
<p>可能需要安装 vim 编辑器，执行 <code>sudo apt-get install vim</code></p>
</blockquote>
<h2 id="部署-JDK"><a href="#部署-JDK" class="headerlink" title="部署 JDK"></a>部署 JDK</h2><p>以 corretto 为例。按相应 JDK 版本依次执行命令：</p>
<p>官方文档：<a href="https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/generic-linux-install.html">https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/generic-linux-install.html</a></p>
<p>1、JDK11</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &#x27;deb https://apt.corretto.aws stable main&#x27;</span><br><span class="line">sudo apt-get update; sudo apt-get install -y java-11-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<p>2、JDK17</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &#x27;deb https://apt.corretto.aws stable main&#x27;</span><br><span class="line">sudo apt-get update; sudo apt-get install -y java-17-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<p>3、卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg --remove java-11-amazon-corretto-jdk</span><br><span class="line">sudo dpkg --remove java-17-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<h2 id="修改本地网络地址"><a href="#修改本地网络地址" class="headerlink" title="修改本地网络地址"></a>修改本地网络地址</h2><p>1、固定 IP</p>
<p>通过 <code>ip a</code> 命令查看网咖信息。修改前：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ip a</span><br><span class="line"><span class="number">1</span>: <span class="attr">lo</span>: &lt;<span class="variable constant_">LOOPBACK</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="variable constant_">UNKNOWN</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: <span class="attr">ens33</span>: &lt;<span class="variable constant_">BROADCAST</span>,<span class="variable constant_">MULTICAST</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">1500</span> qdisc fq_codel state <span class="variable constant_">UP</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:0<span class="attr">c</span>:<span class="number">29</span>:<span class="attr">cb</span>:<span class="attr">bf</span>:c6 brd <span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet <span class="number">192.168</span><span class="number">.160</span><span class="number">.133</span>/<span class="number">24</span> brd <span class="number">192.168</span><span class="number">.160</span><span class="number">.255</span> scope <span class="variable language_">global</span> dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1555sec preferred_lft 1555sec</span><br><span class="line">    inet6 <span class="attr">fe80</span>::85<span class="attr">bd</span>:<span class="attr">d35d</span>:<span class="attr">f025</span>:dcf4/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>查看 <code>/etc/netplan</code> 网络配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ls /etc/netplan</span><br><span class="line"><span class="number">01</span>-network-manager-all.<span class="property">yaml</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>sudo vim /etc/netplan/*.yaml</code>，添加以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Let</span> <span class="title class_">NetworkManager</span> manage all devices on <span class="variable language_">this</span> system</span><br><span class="line"><span class="attr">network</span>:</span><br><span class="line">    <span class="attr">version</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">renderer</span>: <span class="title class_">NetworkManager</span></span><br><span class="line">    <span class="attr">ethernets</span>:</span><br><span class="line">       <span class="attr">ens33</span>:</span><br><span class="line">          <span class="attr">addresses</span>: [<span class="number">192.168</span><span class="number">.160</span><span class="number">.134</span>/<span class="number">24</span>]</span><br><span class="line">          <span class="attr">routes</span>:</span><br><span class="line">            - <span class="attr">to</span>: <span class="keyword">default</span></span><br><span class="line">              <span class="attr">via</span>: <span class="number">192.168</span><span class="number">.160</span><span class="number">.2</span></span><br><span class="line">          <span class="attr">nameservers</span>:</span><br><span class="line">             <span class="attr">addresses</span>: [<span class="number">180.76</span><span class="number">.76</span><span class="number">.76</span>, <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>]</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>ens33：拟设置的网卡名称</li>
<li>addresses：拟设置的固定 ip 和掩码。掩码 24 表示前 24 位有效，剩下的 8 位可以是 0-254 之间的任一地址（255 为广播地址），例如 255.255.255.255 是 IPv4 中最大可能的 IP 地址，每个数字（255）都是由 8 个比特位表示的，每个比特位非 0 即 1，最大值即为 11111111，因此掩码 24 表示 255.255.255.0。同理，xxx.xxx.xxx.xxx&#x2F;32，表示掩码为 192.168.0.0</li>
<li>routes：网关地址。default 也可以写为 <code>0.0.0.0/0</code> 或 <code>0/0</code></li>
<li>nameservers：DNS 地址</li>
</ul>
<blockquote>
<p>网关若使用 <code>gateway4</code> 属性会提示 <code>** (process:9908): WARNING **: 22:03:51.792: gateway4 has been deprecated, use default routes instead. See the &#39;Default routes&#39; section of the documentation for more details.</code></p>
</blockquote>
<p>执行 <code>sudo netplan try</code> 使配置生效。修改后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ip a</span><br><span class="line"><span class="number">1</span>: <span class="attr">lo</span>: &lt;<span class="variable constant_">LOOPBACK</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="variable constant_">UNKNOWN</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: <span class="attr">ens33</span>: &lt;<span class="variable constant_">BROADCAST</span>,<span class="variable constant_">MULTICAST</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">1500</span> qdisc fq_codel state <span class="variable constant_">UP</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:0<span class="attr">c</span>:<span class="number">29</span>:<span class="attr">cb</span>:<span class="attr">bf</span>:c6 brd <span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet <span class="number">192.168</span><span class="number">.160</span><span class="number">.134</span>/<span class="number">24</span> brd <span class="number">192.168</span><span class="number">.160</span><span class="number">.255</span> scope <span class="variable language_">global</span> noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 <span class="attr">fe80</span>::20<span class="attr">c</span>:29<span class="attr">ff</span>:<span class="attr">fecb</span>:bfc6/<span class="number">64</span> scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>2、开启 dhcp</p>
<p>无需再设置 addresses 属性（实际上 routes 属性也可以移除）。配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Let</span> <span class="title class_">NetworkManager</span> manage all devices on <span class="variable language_">this</span> system</span><br><span class="line"><span class="attr">network</span>:</span><br><span class="line">    <span class="attr">version</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">renderer</span>: <span class="title class_">NetworkManager</span></span><br><span class="line">    <span class="attr">ethernets</span>:</span><br><span class="line">       <span class="attr">ens33</span>:</span><br><span class="line">          <span class="attr">dhcp4</span>: <span class="literal">true</span></span><br><span class="line">          <span class="attr">routes</span>:</span><br><span class="line">            - <span class="attr">to</span>: <span class="keyword">default</span></span><br><span class="line">              <span class="attr">via</span>: <span class="number">192.168</span><span class="number">.160</span><span class="number">.2</span></span><br><span class="line">          <span class="attr">nameservers</span>:</span><br><span class="line">             <span class="attr">addresses</span>: [<span class="number">180.76</span><span class="number">.76</span><span class="number">.76</span>, <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>]</span><br></pre></td></tr></table></figure>

<h2 id="其他工具或命令"><a href="#其他工具或命令" class="headerlink" title="其他工具或命令"></a>其他工具或命令</h2><p>查看 CPU、内存使用情况：<code>sudo apt-get install htop</code></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>一般系统默认带有防火墙。安装命令：<code>sudo apt install ufw</code></p>
<p>1、允许 ssh（<strong>特别注意开启，否则下次连接将无法远程连接</strong>）</p>
<p>执行 <code>sudo ufw allow ssh</code> 或 <code>sudo ufw allow 22</code> 创建防火墙规则，允许 22 端口上的所有连接。</p>
<p>2、启用 ufw</p>
<p>执行 <code>sudo ufw enable</code>，确认启动后可通过 <code>sudo ufw status verbose</code> 查看状态。</p>
<blockquote>
<p>注：当状态为 <code>Status: inactive</code> 说明 ufw 未启动。如果处于活动状态，将显示 <code>Status: active</code>，并列出所有规则。</p>
</blockquote>
<p>3、拒绝连接</p>
<p>执行 <code>sudo ufw deny from 192.1.110.24</code>，则拒绝全部来自该 IP 的连接。</p>
<p>4、删除规则</p>
<p>执行 <code>sudo ufw status numbered</code> 查看规则列表，获知规则的序号，再执行 <code>sudo ufw delete 3</code>（删除第 3 条规则）</p>
<p>5、端口规则设置</p>
<p>ufw 默认的策略是允许出，不允许进，这个可以在配置文件 <code>/etc/default/ufw</code> 中看到。出规则需要配置。</p>
<p>配置文件片段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DEFAULT_INPUT_POLICY</span> = <span class="string">&quot;DROP&quot;</span>;</span><br><span class="line"><span class="variable constant_">DEFAULT_OUTPUT_POLICY</span> = <span class="string">&quot;ACCEPT&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>允许 http 连接：<code>sudo ufw allow http</code> 或 <code>sudo ufw allow 80</code></li>
<li>阻止 http 连接：<code>sudo ufw denty http</code> 或 <code>sudo ufw denty 80</code></li>
<li>开放特定端口范围：<code>sudo ufw allow 3000:3007/tcp</code></li>
</ul>
<blockquote>
<p>注：如果不指定协议，会自动允许 tcp 和 udp 两种协议。</p>
</blockquote>
<ul>
<li>限制 IP 允许连接的端口：<code>sudo ufw allow from 192.1.110.24 to any port 22</code></li>
<li>配合子网掩码限制网段：<code>sudo ufw allow from 192.1.110.24/24</code></li>
<li>监听来自指定网卡的连接：<code>sudo ufw allow in on eth1 to any port 3306</code></li>
</ul>
<p>6、停止和重置</p>
<ul>
<li>停用 ufw：<code>sudo ufw disable</code></li>
<li>重置 ufw 规则：<code>sudo ufw reset</code></li>
</ul>
<h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><ul>
<li>显示所有连接：<code>lsof -i</code></li>
<li>仅获取 ipv6 流量：<code>lsof -i6</code></li>
<li>显示端口信息：<code>lsof -i :5432</code></li>
</ul>
<blockquote>
<p>lsof 命令参数：<code>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</code></p>
</blockquote>
<ul>
<li>列出所有：<code>netstat -a </code></li>
<li>使用 ip 地址列出所有监听状态的 tcp 端口以及程序名：<code>netstat -atnlp</code></li>
</ul>
<blockquote>
<p>netstat 命令参数：</p>
</blockquote>
<ul>
<li>显示所有连接中的 Socket：<code>-a</code> 或 <code>--all</code></li>
<li>显示正在使用 Socket 的程序识别码和程序名称：<code>-p</code> 或 <code>--programs</code></li>
<li>显示 TCP 传输协议的连线状况：<code>-t</code> 或 <code>--tcp</code></li>
<li>显示 UDP 传输协议的连线状况：<code>-u</code> 或 <code>--udp</code></li>
</ul>
<p>显示结果参数释义：</p>
<ul>
<li><p><code>Proto</code>：协议名（tcp 协议还是 udp 协议还是 unix 协议）</p>
</li>
<li><p><code>Recv-Q</code>：网络接收队列。表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走，recv()如果接收队列 Recv-Q 一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击；</p>
</li>
<li><p><code>send-Q</code>：网路发送队列。对方没有收到的数据或者说没有 Ack 的,还是本地缓冲区.</p>
</li>
<li><p><code>Local Address</code>：表示监听服务器上对应的 ip 地址的对应端口 (0.0.0.0 表示本地所有 ip)</p>
</li>
<li><p><code>Foreign Address</code>：与本机端口通信的外部 socket。显示规则与 Local Address 相同</p>
</li>
<li><p><code>State</code>：链路状态。共有 12 中可能的状态</p>
<ul>
<li><p>LISTEN ：正在监听端口，可以接受连接</p>
</li>
<li><p>SYN_SENT：socket 正在积极尝试建立一个连接，即处于发送后连接前的一个等待但未匹配进入连接的状态</p>
</li>
<li><p>SYN_RECV：收到对方的连接建立请求</p>
</li>
<li><p>ESTABLISHED：代表一个打开的连接，双方可以进行或已经在数据交互</p>
</li>
<li><p>FIN_WAIT1：socket 已关闭，连接正在或正要关闭</p>
</li>
<li><p>CLOSE_WAIT：等待关闭。当对方关闭一个 SOCKET 后发送 FIN 报文给自己，系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 CLOSE_WAIT 状态。接下来需要考虑的事情是察看你是否还有数据发送给对方，如果没有就可以关闭这个 SOCKET，发送 FIN 报文给对方，也即关闭连接。所以在 CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</p>
</li>
<li><p>FIN_WAIT2：连接已关闭，并且 socket 正在等待远端结束</p>
</li>
<li><p>LAST_ACK：被动关闭一方在发送 FIN 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态</p>
</li>
<li><p>TIME_WAIT：socket 正在等待关闭处理仍在网络上的数据包。表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 TIME_WAIT 状态，而无须经过 FIN_WAIT_2 状态。</p>
</li>
<li><p>CLOSING：比较少见，等待远程 TCP 对连接中断的确认</p>
</li>
<li><p>CLOSED：没有任何连接状态。被动关闭端在接受到 ACK 包后，就进入该状态。连接结束</p>
</li>
<li><p>UNKNOWN：未知的状态</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>部署和安装</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>mariadb</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture-异步处理任务</title>
    <url>/58871fa1-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<blockquote>
<p>oracle JDK8 有关内容的文档：<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html</a></p>
</blockquote>
<h2 id="创建异步任务"><a href="#创建异步任务" class="headerlink" title="创建异步任务"></a>创建异步任务</h2><p>runAsync 执行 CompletableFuture 任务，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span></span><br><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span></span><br></pre></td></tr></table></figure>

<p>supplyAsync 执行 CompletableFuture 任务，可有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span><br><span class="line"><span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不指定 Executor 实现，则使用 <code>ForkJoinPool.commonPool()</code> 作为执行异步代码的线程池</p>
</blockquote>
<p>创建异步任务后，可根据需求进行如下的操作：</p>
<table>
<thead>
<tr>
<th align="left">方法名称</th>
<th align="left">类型</th>
<th align="left">传参</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">thenRun</td>
<td align="left">单任务消费</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenRunAsync</td>
<td align="left">单任务消费</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenApply</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenApplyAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenAccept</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenAcceptAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenCombine</td>
<td align="left">双任务消费（与）</td>
<td align="left">要传参（两个任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenCombineAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">要传参（两个任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenAcceptBoth</td>
<td align="left">双任务消费（与）</td>
<td align="left">要传参（两个任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenAcceptBothAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">要传参（两个任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterBoth</td>
<td align="left">双任务消费（与）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterBothAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">applyToEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">要传参（已完成任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">applyToEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">要传参（已完成任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">acceptEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">要传参（已完成任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">acceptEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">要传参（已完成任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">whenComplete</td>
<td align="left">单任务消费</td>
<td align="left">要传参（正常返回值和异常）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">whenCompleteAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参（正常返回值和异常）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">handle</td>
<td align="left">单任务消费</td>
<td align="left">要传参（正常返回值和异常）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">handleAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参（正常返回值和异常）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">exceptionally</td>
<td align="left">单任务消费</td>
<td align="left">要传参 （异常）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenCompose</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">allOf</td>
<td align="left">多任务消费（与）</td>
<td align="left">要传参（任务列表）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">anyOf</td>
<td align="left">多任务消费（或）</td>
<td align="left">要传参（任务列表）</td>
<td align="left">无返回值</td>
</tr>
</tbody></table>
<blockquote>
<p>不带 Async 版本由上一个任务的线程继续执行该任务，Async 版本可以指定执行该异步任务的 Executor 实现，如果不指定，默认使用 <code>ForkJoinPool.commonPool()</code></p>
</blockquote>
<h2 id="单任务消费"><a href="#单任务消费" class="headerlink" title="单任务消费"></a>单任务消费</h2><table>
<thead>
<tr>
<th align="left">回调方法</th>
<th align="left">类型</th>
<th align="left">传参</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">thenRun</td>
<td align="left">单任务消费</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenRunAsync</td>
<td align="left">单任务消费</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenAccept</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenAcceptAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenApply</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenApplyAsync</td>
<td align="left">单任务消费</td>
<td align="left">要传参</td>
<td align="left">有返回值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">supplyAsyncTask</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;supplyAsyncTask=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, executor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// thenApply</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">thenApplyTask</span> <span class="operator">=</span> supplyAsyncTask.thenApply((param) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenApplyTask=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// thenApplyAsync不指定线程池</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">thenApplyAsyncTask</span> <span class="operator">=</span> supplyAsyncTask.thenApplyAsync((param) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenApplyAsyncTask=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// thenApplyAsync指定线程池</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">thenApplyAsyncTask2</span> <span class="operator">=</span> supplyAsyncTask.thenApplyAsync((param) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenApplyAsyncTask2=&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;, executor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不调用get()将不执行回调</span></span><br><span class="line">    thenApplyAsyncTask.get();</span><br><span class="line">    thenApplyAsyncTask2.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭线程池</span></span><br><span class="line">    executor.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">supplyAsyncTask=pool-1-thread-1</span><br><span class="line">thenApplyAsyncTask2=pool-1-thread-2</span><br><span class="line">thenApplyTask=pool-1-thread-2</span><br><span class="line">thenApplyAsyncTask=ForkJoinPool.commonPool-worker-3</span><br></pre></td></tr></table></figure>

<h2 id="双任务消费（与）"><a href="#双任务消费（与）" class="headerlink" title="双任务消费（与）"></a>双任务消费（与）</h2><p>将两个 CompletableFuture 组合起来，只有这两个都正常执行完了，才会执行某个任务。</p>
<table>
<thead>
<tr>
<th align="left">方法名称</th>
<th align="left">类型</th>
<th align="left">传参</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">thenCombine</td>
<td align="left">双任务消费（与）</td>
<td align="left">有传参（两个任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenCombineAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">有传参（两个任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">thenAcceptBoth</td>
<td align="left">双任务消费（与）</td>
<td align="left">有传参（两个任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">thenAcceptBothAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">有传参（两个任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterBoth</td>
<td align="left">双任务消费（与）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterBothAsync</td>
<td align="left">双任务消费（与）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task1</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;task1&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">task2</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;task2&quot;</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">task3</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; <span class="string">&quot;task3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    task1.thenCombine(task2, (param1, param2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// task1task2</span></span><br><span class="line">        System.out.println(param1 + param2);</span><br><span class="line">        <span class="keyword">return</span> param1 + param2;</span><br><span class="line">    &#125;).thenCombine(task3, (param12, param3) -&gt; &#123;</span><br><span class="line">        <span class="comment">// task1task2task3</span></span><br><span class="line">        System.out.println(param12 + param3);</span><br><span class="line">        <span class="keyword">return</span> param12 + param3;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    task1.thenAcceptBoth(task2, (param1, param2) -&gt; &#123;</span><br><span class="line">        <span class="comment">// task1task2</span></span><br><span class="line">        System.out.println(param1 + param2);</span><br><span class="line">    &#125;).thenAcceptBoth(task3, (param12, param3) -&gt; &#123;</span><br><span class="line">        <span class="comment">// nulltask3</span></span><br><span class="line">        System.out.println(param12 + param3);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    task1.runAfterBoth(task2, () -&gt; &#123;</span><br><span class="line">        <span class="comment">// task1 and task2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;task1 and task2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双任务消费（或）"><a href="#双任务消费（或）" class="headerlink" title="双任务消费（或）"></a>双任务消费（或）</h2><p>将两个 CompletableFuture 组合起来，只要其中一个执行完了，就执行回调方法。</p>
<table>
<thead>
<tr>
<th align="left">方法名称</th>
<th align="left">类型</th>
<th align="left">传参</th>
<th align="left">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">applyToEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">有传参（已完成任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">applyToEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">有传参（已完成任务的执行结果）</td>
<td align="left">有返回值</td>
</tr>
<tr>
<td align="left">acceptEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">有传参（已完成任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">acceptEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">有传参（已完成任务的执行结果）</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterEither</td>
<td align="left">双任务消费（或）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
<tr>
<td align="left">runAfterEitherAsync</td>
<td align="left">双任务消费（或）</td>
<td align="left">无传参</td>
<td align="left">无返回值</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task1</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;task1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">var</span> <span class="variable">task2</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;task2&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">var</span> <span class="variable">task3</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;task3&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    task1.applyToEither(task2, (param) -&gt; &#123;</span><br><span class="line">        <span class="comment">// applyToEither=task2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;applyToEither=&quot;</span> + param);</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;).acceptEither(task3, (param) -&gt; &#123;</span><br><span class="line">        <span class="comment">// acceptEither=task2 或 acceptEither=task3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;acceptEither=&quot;</span> + param);</span><br><span class="line">    &#125;).get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// task1 or task2</span></span><br><span class="line">    task1.runAfterEither(task2,()-&gt; System.out.println(<span class="string">&quot;task1 or task2&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="whenComplete、whenCompleteAsync"><a href="#whenComplete、whenCompleteAsync" class="headerlink" title="whenComplete、whenCompleteAsync"></a>whenComplete、whenCompleteAsync</h3><p>某个任务执行完成后，执行的回调方法，无返回值。可以访问 CompletableFuture 的结果和异常作为参数，使用它们并执行想要的操作。此方法并不能转换完成的结果。会内部抛出异常。其正常返回的 CompletableFuture 的结果来自上个任务。</p>
<h3 id="handle、handleAsync"><a href="#handle、handleAsync" class="headerlink" title="handle、handleAsync"></a>handle、handleAsync</h3><p>不论正常返回还是出异常都会进入 handle，参数通常为 <code>new BiFunction&lt;T, Throwable, R&gt;();</code>，其中</p>
<ul>
<li>T：上一任务传入的对象类型</li>
<li>Throwable：上一任务传入的异常</li>
<li>R：返回的对象类型</li>
</ul>
<blockquote>
<p>handle 和 thenApply 的区别：如果任务出现异常不会进入 thenApply；任务出现异常也会进入 handle，可对异常处理。</p>
</blockquote>
<blockquote>
<p>handle 和 whenComplete 的区别：handle 可对传入值 T 进行转换，并产生自己的返回结果 R；whenComplete 的返回值和上级任务传入的结果一致，不能转换。</p>
</blockquote>
<blockquote>
<p>whenComplete、whenCompleteAsync、handle 和 handleAsync 的输入参数一个是正常结果一个是异常结果，而 exceptionally 的输入参数为异常结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">supplyAsyncTask</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// 制造一个异常</span></span><br><span class="line">        <span class="comment">// int value = 1 / 0;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;supplyAsyncTask&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">handle</span> <span class="operator">=</span> supplyAsyncTask.handle((s, throwable) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (Optional.ofNullable(throwable).isPresent()) &#123;</span><br><span class="line">            <span class="keyword">return</span> throwable.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>() &#123;&#123;</span><br><span class="line">            add(s);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// supplyAsyncTask异常时，输出1：java.lang.ArithmeticException: / by zero</span></span><br><span class="line">    <span class="comment">// 输出2：[supplyAsyncTask]</span></span><br><span class="line">    System.out.println(handle.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="exceptionally"><a href="#exceptionally" class="headerlink" title="exceptionally"></a>exceptionally</h3><p>某个任务执行抛出异常时执行的回调方法。抛出异常作为参数，传递到回调方法。仅处理异常情况。如果任务成功完成，那么将被跳过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">supplyAsyncTask</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="type">double</span> error=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;, executor).exceptionally((e)-&gt;&#123;</span><br><span class="line">        <span class="comment">// java.lang.ArithmeticException: / by zero</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &quot;error&quot;</span></span><br><span class="line">    System.out.println(supplyAsyncTask.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="complete"><a href="#complete" class="headerlink" title="complete"></a>complete</h3><p>如果尚未完成，则将 <code>get()</code> 和相关方法返回的值设置为给定值。如果此调用导致此 CompletableFuture 转换到完成状态，则返回 true，否则返回 false。文档描述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">If not already completed, sets the value returned by get() and related methods to the given value.</span><br><span class="line"></span><br><span class="line">Params:</span><br><span class="line">value – the result value</span><br><span class="line">Returns:</span><br><span class="line">true if this invocation caused this CompletableFuture to transition to a completed state, else false</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">task1</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">15</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若get放在此处，一直等待task1完成，输出10</span></span><br><span class="line">    <span class="comment">// System.out.println(task1.get());</span></span><br><span class="line">    <span class="comment">// 强制task1完成，输出true</span></span><br><span class="line">    System.out.println(task1.complete(<span class="number">5</span>));</span><br><span class="line">    <span class="comment">// 输出5</span></span><br><span class="line">    System.out.println(task1.get());</span><br><span class="line">    <span class="comment">// task1已完成，输出false</span></span><br><span class="line">    System.out.println(task1.complete(<span class="number">50</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="thenCompose"><a href="#thenCompose" class="headerlink" title="thenCompose"></a>thenCompose</h3><p>源码定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenCompose</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span>;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span> ;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">thenComposeAsync</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn, Executor executor)</span> ;</span><br></pre></td></tr></table></figure>

<p>thenCompose 方法会在某个任务执行完成后，将该任务的执行结果作为入参，执行指定的方法。该方法会返回一个新的 CompletableFuture 实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">task1</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task2</span> <span class="operator">=</span> task1.thenCompose(param -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is task2 param=&quot;</span> + param);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;this is task2 square&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Math.pow(param, <span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).thenApply(param -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thenApply get the square=&quot;</span> + param);</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task3</span> <span class="operator">=</span> task1.thenCompose(param -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is task3 param=&quot;</span> + param);</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;this is task3 square&quot;</span>);</span><br><span class="line">            System.out.println(Math.pow(param, <span class="number">2</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;task2 get=&quot;</span> + task2.get());</span><br><span class="line">    System.out.println(<span class="string">&quot;task3 get=&quot;</span> + task3.get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="built_in">this</span> is task2 param=<span class="number">10</span></span><br><span class="line"><span class="built_in">this</span> is task2 square</span><br><span class="line">thenApply get the square=<span class="number">100.0</span></span><br><span class="line"><span class="built_in">this</span> is task3 param=<span class="number">10</span></span><br><span class="line"><span class="built_in">this</span> is task3 square</span><br><span class="line"><span class="number">100.0</span></span><br><span class="line">task2 get=<span class="number">100.0</span></span><br><span class="line">task3 get=<span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="allOf"><a href="#allOf" class="headerlink" title="allOf"></a>allOf</h3><p>静态方法，阻塞等待所有给定的 CompletableFuture 执行结束后，返回一个 <code>CompletableFuture&lt;Void&gt;</code> 结果。所有任务都执行完成后，才执行 allOf 的回调方法。如果任意一个任务异常，执行 get 方法时会抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task1</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;task1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">var</span> <span class="variable">task2</span> <span class="operator">=</span> CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;task2 is over&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    CompletableFuture.allOf(task1, task2).whenComplete((param, throwable) -&gt; &#123;</span><br><span class="line">        <span class="comment">// null</span></span><br><span class="line">        System.out.println(param);</span><br><span class="line">    &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">        <span class="comment">// task3 allOf throwable=java.lang.ArithmeticException: / by zero</span></span><br><span class="line">        System.out.println(<span class="string">&quot;task3 allOf throwable=&quot;</span> + throwable.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="anyOf"><a href="#anyOf" class="headerlink" title="anyOf"></a>anyOf</h3><p>静态方法，阻塞等待任意一个给定的 CompletableFuture 对象执行结束后，返回一个 <code>CompletableFuture&lt;Void&gt;</code> 结果。任意一个任务执行完，就执行 anyOf 的回调方法。如果执行的任务异常，执行 get 方法时会抛出异常。</p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletionService-及时获取任务返回值</title>
    <url>/588746b0-2a1e-11ee-846a-89c1529ebdf1/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><p>定义如下的 TaskCallable 类，返回值的延迟输出时间根据传入值决定：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title class_">TaskCallable</span><span class="params">(String taskID, Double value, Double rate)</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(value.longValue());</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;taskID=&#123; %s &#125; result=&#123; %s*%s -&gt; %s &#125;&quot;</span>, taskID, value, rate, value * rate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向线程池添加三个任务，执行时间有所区别，最后依次调用 <code>get()</code> 方法输出结果。</p>
<p><a href="https://github.com/inspiration-lab/java-snippet-testing/blob/main/src/main/java/com/lab/snippet/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5/ExecutorService/ExecutorServiceRun.java">查看完整示例代码</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">futureList</span> <span class="operator">=</span> Arrays.asList(</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;1aa8c994-281e-4fbb-a09b-cdf389eedf3b&quot;</span>, <span class="number">1000.0</span>, <span class="number">0.5</span>)),</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;321996c2-73c0-411a-8e66-fcfa04d94ae1&quot;</span>, <span class="number">5000.0</span>, <span class="number">1.0</span>)),</span><br><span class="line">        executorService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;3df9d22e-17d9-4b48-a821-867974681d6e&quot;</span>, <span class="number">600.0</span>, <span class="number">1.2</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; futureList.size(); index++) &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">result</span> <span class="operator">=</span> futureList.get(index).get();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">taskID=&#123; 1aa8c994-281e-4fbb-a09b-cdf389eedf3b &#125; result=&#123; <span class="number">1000.0</span>*<span class="number">0.5</span> -&gt; <span class="number">500.0</span> &#125;</span><br><span class="line">taskID=&#123; 321996c2-73c0-411a-<span class="number">8e66</span>-fcfa04d94ae1 &#125; result=&#123; <span class="number">5000.0</span>*<span class="number">1.0</span> -&gt; <span class="number">5000.0</span> &#125;</span><br><span class="line">taskID=&#123; 3df9d22e-17d9-4b48-a821-867974681d6e &#125; result=&#123; <span class="number">600.0</span>*<span class="number">1.2</span> -&gt; <span class="number">720.0</span> &#125;</span><br><span class="line">计时器&#123; b10bbd47-63c4-<span class="number">4545</span>-b236-15303f40cc1f &#125;停止，耗时=&#123; 5004ms &#125;</span><br></pre></td></tr></table></figure>

<p>由于 <code>get()</code> 方法是阻塞的，因此如果某个 Future 执行时间太长，整个遍历过程将会阻塞，无法及时从已完成的 Future 拿到返回值。上述例子中，即使 600ms 的任务，也只能等到前两个长时间任务都完成后才能输出。</p>
<h2 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h2><p>CompletionSerive 接口的实现类 ExecutorCompletionService 优化了获取异步操作结果。ExecutorCompletionService 中内置了存放 Future 的队列 completionQueue，在任务调用完成后，将要返回的 future 放入到该队列。客户端通过 <code>take()</code> 方法得到 future，再调用 <code>get()</code> 方法从而获取任务执行结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">QueueingFuture</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">FutureTask</span>&lt;Void&gt; &#123;</span><br><span class="line">    QueueingFuture(RunnableFuture&lt;V&gt; task,</span><br><span class="line">                    BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue) &#123;</span><br><span class="line">        <span class="built_in">super</span>(task, <span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.task = task;</span><br><span class="line">        <span class="built_in">this</span>.completionQueue = completionQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Future&lt;V&gt; task;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Future&lt;V&gt;&gt; completionQueue;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">done</span><span class="params">()</span> &#123; completionQueue.add(task); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>向 CompletionService 提交任务的方式与 ExecutorService 一样。两者的区别在于取结果的方式。有了 CompletionService，可以不再需要 Future 集合。如果要得到最早的执行结果，调用 <code>completionService.take().get()</code> 即可：</p>
<p><a href="https://github.com/inspiration-lab/java-snippet-testing/blob/main/src/main/java/com/lab/snippet/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5/ExecutorService/CompletionServiceRun.java">查看完整示例代码</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">CompletionService&lt;String&gt; completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>&lt;&gt;(executorService);</span><br><span class="line"></span><br><span class="line">completionService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;1aa8c994-281e-4fbb-a09b-cdf389eedf3b&quot;</span>, <span class="number">1000.0</span>, <span class="number">0.5</span>));</span><br><span class="line">completionService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;321996c2-73c0-411a-8e66-fcfa04d94ae1&quot;</span>, <span class="number">5000.0</span>, <span class="number">1.0</span>));</span><br><span class="line">completionService.submit(<span class="keyword">new</span> <span class="title class_">TaskCallable</span>(<span class="string">&quot;3df9d22e-17d9-4b48-a821-867974681d6e&quot;</span>, <span class="number">600.0</span>, <span class="number">1.2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; <span class="number">3</span>; index++) &#123;</span><br><span class="line">    System.out.println(completionService.take().get());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">executorService.shutdown();</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">taskID=&#123; 3df9d22e-17d9-4b48-a821-867974681d6e &#125; result=&#123; <span class="number">600.0</span>*<span class="number">1.2</span> -&gt; <span class="number">720.0</span> &#125;</span><br><span class="line">taskID=&#123; 1aa8c994-281e-4fbb-a09b-cdf389eedf3b &#125; result=&#123; <span class="number">1000.0</span>*<span class="number">0.5</span> -&gt; <span class="number">500.0</span> &#125;</span><br><span class="line">taskID=&#123; 321996c2-73c0-411a-<span class="number">8e66</span>-fcfa04d94ae1 &#125; result=&#123; <span class="number">5000.0</span>*<span class="number">1.0</span> -&gt; <span class="number">5000.0</span> &#125;</span><br><span class="line">计时器&#123; 7223efb6-ec07-<span class="number">4294</span>-8f23-8b73b536c9b4 &#125;停止，耗时=&#123; 5002ms &#125;</span><br></pre></td></tr></table></figure>

<h2 id="CompletionService-结合异步实现多线程处理任务"><a href="#CompletionService-结合异步实现多线程处理任务" class="headerlink" title="CompletionService 结合异步实现多线程处理任务"></a>CompletionService 结合异步实现多线程处理任务</h2><p>定义一个任务队列，异步执行「入队」和「出队」，最终通过CompletionService获取全部任务的返回结果。</p>
<p><a href="https://github.com/inspiration-lab/java-snippet-testing/blob/main/src/main/java/com/lab/snippet/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%BC%82%E6%AD%A5/ExecutorService/AsyncRun.java">查看完整示例代码</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义队列</span></span><br><span class="line">LinkedBlockingDeque&lt;TaskCallable&gt; linkedBlockingDeque = <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 模拟任务数量</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">taskCount</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 获取CPU核心数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">coreNum</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">// 定义线程池</span></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">customPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(coreNum, coreNum, coreNum, TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">customPoolCurrent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable, String.format(<span class="string">&quot;customPool-thread-%s&quot;</span>, customPoolCurrent.getAndIncrement()));</span><br><span class="line">                thread.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">CompletionService&lt;String&gt; completionService = <span class="keyword">new</span> <span class="title class_">ExecutorCompletionService</span>&lt;&gt;(customPool);</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">pushElement</span> <span class="operator">=</span> CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; taskCount; index++) &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">value</span> <span class="operator">=</span> Math.random() * <span class="number">1000</span>;</span><br><span class="line">        <span class="type">var</span> <span class="variable">taskCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskCallable</span>(UUID.randomUUID().toString(), value, Math.random());</span><br><span class="line">        linkedBlockingDeque.push(taskCallable);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;线程 %s 完成 %s 入队&quot;</span>, Thread.currentThread().getName(), taskCallable));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">300</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">submitTask</span> <span class="operator">=</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flagTask</span> <span class="operator">=</span> pushElement.isDone();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flagPeek</span> <span class="operator">=</span> Optional.ofNullable(linkedBlockingDeque.peek()).isPresent();</span><br><span class="line">            <span class="comment">// 当【入队任务完成】且【队列没有元素可取】时结束</span></span><br><span class="line">            <span class="keyword">if</span> (flagTask == <span class="literal">true</span> &amp;&amp; flagPeek == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flagPeek == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="comment">// 仅【队列没有元素可取】时，跳过</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 【队列有元素可取】时，添加任务到线程池</span></span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">            <span class="type">var</span> <span class="variable">taskCallable</span> <span class="operator">=</span> linkedBlockingDeque.take();</span><br><span class="line">            completionService.submit(taskCallable);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;线程 %s 将 %s 提交到线程池&quot;</span>, Thread.currentThread().getName(), taskCallable));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">submit</span> <span class="operator">=</span> submitTask.get();</span><br><span class="line"><span class="keyword">if</span> (!submit) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; taskCount; index++) &#123;</span><br><span class="line">        System.out.println(completionService.take().get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customPool.shutdown();</span><br><span class="line">customPool.awaitTermination(<span class="number">3</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">1</span> 完成 TaskCallable[taskID=29ad9f36-<span class="number">2e25</span>-457a-8a50-40b2619ccd85, value=<span class="number">297.9894322218015</span>, rate=<span class="number">0.39525736986090654</span>] 入队</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">1</span> 完成 TaskCallable[taskID=<span class="number">72434730</span>-e52a-<span class="number">4819</span>-a249-25b1e8450c81, value=<span class="number">861.735810794833</span>, rate=<span class="number">0.0508273434713048</span>] 入队</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">2</span> 将 TaskCallable[taskID=<span class="number">72434730</span>-e52a-<span class="number">4819</span>-a249-25b1e8450c81, value=<span class="number">861.735810794833</span>, rate=<span class="number">0.0508273434713048</span>] 提交到线程池</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">1</span> 完成 TaskCallable[taskID=6f25d9e6-9f38-4d84-ac59-259324f800f1, value=<span class="number">931.5744113116666</span>, rate=<span class="number">0.8237427385465251</span>] 入队</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">1</span> 完成 TaskCallable[taskID=6e3de271-<span class="number">2169</span>-49c7-a425-9973304379a9, value=<span class="number">754.2015420496596</span>, rate=<span class="number">0.480198992823775</span>] 入队</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">2</span> 将 TaskCallable[taskID=6e3de271-<span class="number">2169</span>-49c7-a425-9973304379a9, value=<span class="number">754.2015420496596</span>, rate=<span class="number">0.480198992823775</span>] 提交到线程池</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">1</span> 完成 TaskCallable[taskID=ffcb4a5e-603b-46dd-b4d0-02dc2bc7204c, value=<span class="number">259.60270090020333</span>, rate=<span class="number">0.404730459043419</span>] 入队</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">2</span> 将 TaskCallable[taskID=ffcb4a5e-603b-46dd-b4d0-02dc2bc7204c, value=<span class="number">259.60270090020333</span>, rate=<span class="number">0.404730459043419</span>] 提交到线程池</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">2</span> 将 TaskCallable[taskID=6f25d9e6-9f38-4d84-ac59-259324f800f1, value=<span class="number">931.5744113116666</span>, rate=<span class="number">0.8237427385465251</span>] 提交到线程池</span><br><span class="line">线程 ForkJoinPool.commonPool-worker-<span class="number">2</span> 将 TaskCallable[taskID=29ad9f36-<span class="number">2e25</span>-457a-8a50-40b2619ccd85, value=<span class="number">297.9894322218015</span>, rate=<span class="number">0.39525736986090654</span>] 提交到线程池</span><br><span class="line">taskID=&#123; <span class="number">72434730</span>-e52a-<span class="number">4819</span>-a249-25b1e8450c81 &#125; result=&#123; <span class="number">861.735810794833</span>*<span class="number">0.0508273434713048</span> -&gt; <span class="number">43.7997420367923</span> &#125;</span><br><span class="line">taskID=&#123; 6e3de271-<span class="number">2169</span>-49c7-a425-9973304379a9 &#125; result=&#123; <span class="number">754.2015420496596</span>*<span class="number">0.480198992823775</span> -&gt; <span class="number">362.1668208783845</span> &#125;</span><br><span class="line">taskID=&#123; ffcb4a5e-603b-46dd-b4d0-02dc2bc7204c &#125; result=&#123; <span class="number">259.60270090020333</span>*<span class="number">0.404730459043419</span> -&gt; <span class="number">105.06912030425069</span> &#125;</span><br><span class="line">taskID=&#123; 29ad9f36-<span class="number">2e25</span>-457a-8a50-40b2619ccd85 &#125; result=&#123; <span class="number">297.9894322218015</span>*<span class="number">0.39525736986090654</span> -&gt; <span class="number">117.78251922633414</span> &#125;</span><br><span class="line">taskID=&#123; 6f25d9e6-9f38-4d84-ac59-259324f800f1 &#125; result=&#123; <span class="number">931.5744113116666</span>*<span class="number">0.8237427385465251</span> -&gt; <span class="number">767.3776567337393</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
