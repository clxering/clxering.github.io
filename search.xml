<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DataGrip-2018.3.4-数据导出配置案例</title>
    <url>/2022/12/07/DataGrip-2018-3-4-%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%87%BA%E9%85%8D%E7%BD%AE%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>官方文档：<a href="https://www.jetbrains.com/help/datagrip">https://www.jetbrains.com/help/datagrip</a> ，该文档默认是最新版本，可手动选择旧版本。</p>
<h1 id="1-数据导出"><a href="#1-数据导出" class="headerlink" title="1 数据导出"></a>1 数据导出</h1><p>DataGrip 导出整个数据库或单个表均支持两种方式，<code>Dump Data to File(s)</code> 以及 <code>Dump with ‘mysqldump’</code>。以下例子均采用 MySQL</p>
<h2 id="1-1-Dump-Data-to-File-s"><a href="#1-1-Dump-Data-to-File-s" class="headerlink" title="1.1 Dump Data to File(s)"></a>1.1 Dump Data to File(s)</h2><p>导出整个数据库的菜单选项如下所示。导出单个表的菜单选项减少了 <code>Overwrite Existing Files</code> 和 <code>Single File</code>，其余相同。</p>
<blockquote>
<p>注：如果数据库只有一个表，菜单与导出单个表的相同</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----------------------------------|【导出格式】</span><br><span class="line">SQL Inserts</span><br><span class="line">SQL Updates</span><br><span class="line">HTML Table</span><br><span class="line">----------------------------------|【导出格式】</span><br><span class="line">Tab-separated (TSV)</span><br><span class="line">Comma-separated (CSV)</span><br><span class="line">----------------------------------|【导出格式】</span><br><span class="line">HTML-Groovy.html.groovy</span><br><span class="line">HTML-JavaScript.html.js</span><br><span class="line">SQL-Insert-Statements.sql.groovy</span><br><span class="line">XML-Groovy.xml,groovy</span><br><span class="line">CSV-Groovy.csv.groovy</span><br><span class="line">JSON-Groovy.json.groovy</span><br><span class="line">----------------------------------|【行为】</span><br><span class="line">Skip Computed Columns (SQL)【不添加计算列】</span><br><span class="line">Skip Generated Columns (SQL)【不添加自动生成的列，如自动增长列】</span><br><span class="line">Add Table Definition (SQL)【添加表定义】</span><br><span class="line">Overwrite Existing Files【导出整个数据库时可用。若出现重名，不勾选时生成文件名后有序号，勾选则覆盖】</span><br><span class="line">Single File【导出整个数据库时可用。将各个表的 sql 合并到一个文件，否则每个表分别生成一个文件。勾选 Single File 后，Overwrite Existing Files 失效，无论是否勾选。此时若出现重名，将弹出对话框提示是否覆盖或改名】</span><br><span class="line">----------------------------------|</span><br><span class="line">Configure CSV Formats...</span><br><span class="line">Go to Scripts Directory</span><br><span class="line">----------------------------------|</span><br></pre></td></tr></table></figure>

<p>创建数据库 onlytest，包含两个结构类似的表 employee、manager，其中 employee 包含计算列。创建 sql 如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> onlytest.employee</span><br><span class="line">(</span><br><span class="line">  ID       <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name     tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age      <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  tenyears <span class="type">int</span> <span class="keyword">as</span> ((`age` <span class="operator">+</span> <span class="number">10</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> onlytest.manager</span><br><span class="line">(</span><br><span class="line">  ID   <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age  <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-1-Add-Table-Definition-SQL"><a href="#1-1-1-Add-Table-Definition-SQL" class="headerlink" title="1.1.1 Add Table Definition (SQL)"></a>1.1.1 Add Table Definition (SQL)</h3><p>若勾选 <code>Add Table Definition (SQL)</code>、<code>Single File</code>，导出格式选择 <code>SQL Inserts</code>，则在添加数据前创建表时的定义（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee</span><br><span class="line">(</span><br><span class="line">  ID       <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name     tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age      <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  tenyears <span class="type">int</span> <span class="keyword">as</span> ((`age` <span class="operator">+</span> <span class="number">10</span>))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> manager</span><br><span class="line">(</span><br><span class="line">  ID   <span class="type">bigint</span> auto_increment</span><br><span class="line">    <span class="keyword">primary</span> key,</span><br><span class="line">  name tinytext <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age  <span class="type">int</span>      <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<p>不勾选则仅生成 insert（<code>SQL Updates</code> 结果以此类推）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age, tenyears) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-Skip-Generated-Columns-SQL"><a href="#1-1-2-Skip-Generated-Columns-SQL" class="headerlink" title="1.1.2 Skip Generated Columns (SQL)"></a>1.1.2 Skip Generated Columns (SQL)</h3><p>若勾选 <code>Skip Generated Columns (SQL)</code>、<code>Single File</code>，不勾选 <code>Add Table Definition (SQL)</code>，导出格式选择 <code>SQL Inserts</code>，则没有自动增长的 ID 列，（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>, <span class="number">27</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (name, age, tenyears) <span class="keyword">VALUES</span> (<span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (name, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-Skip-Computed-Columns-SQL"><a href="#1-1-3-Skip-Computed-Columns-SQL" class="headerlink" title="1.1.3 Skip Computed Columns (SQL)"></a>1.1.3 Skip Computed Columns (SQL)</h3><p>若勾选 <code>Skip Computed Columns (SQL)</code>、<code>Single File</code>，不勾选 <code>Add Table Definition (SQL)</code>，导出格式选择 <code>SQL Inserts</code>，则没有 tenyears 列，（<code>SQL Updates</code> 结果以此类推）：</p>
<blockquote>
<p>注意：该选项仅对 <code>SQL Inserts</code>、<code>SQL Updates</code> 有效。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.employee (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>, <span class="number">35</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> onlytest.manager (ID, name, age) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>, <span class="number">36</span>);</span><br></pre></td></tr></table></figure>

<h2 id="1-2-Dump-with-‘mysqldump’"><a href="#1-2-Dump-with-‘mysqldump’" class="headerlink" title="1.2 Dump with ‘mysqldump’"></a>1.2 Dump with ‘mysqldump’</h2><p>经过实测发现，当数据量较大时，使用 <code>Dump Data to File(s)</code> 方式导出的 sql 文件与 <code>Dump with ‘mysqldump’</code> 方式相比会大很多，可能是由于前者重复字符量大以及换行多导致。因此推荐优先使用后者导出。</p>
<p>导出整个数据库和单个表的菜单选项相同，故合并讨论。<code>Dump with ‘mysqldump’</code> 有如下菜单选项：</p>
<ul>
<li>Multiple rows inserts【将 insert 语句合并为一行】</li>
<li>Add drop table【增加判断条件，若表存在则删除】</li>
<li>Disable keys【禁用索引】</li>
<li>Delay inserts【提示错误 <code>mysqldump: [ERROR] unknown option &#39;--delayed-insert&#39;.</code>，无输出结果】</li>
<li>MySQL create table options【若不勾选，暂时未发现有明显差异】</li>
<li>Lock tables【锁表，可能是防止有新数据在导出时进入】</li>
<li>Add locks【导入时，在执行 insert 前添加 write 锁，完成后解除】</li>
<li>Add drop trigger【导入时，删除对方的触发器】</li>
</ul>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h3><p>勾选 Multiple rows inserts、Add drop table、MySQL create table options、Add drop trigger，生成结果如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 8.0.18, for osx10.14 (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: 127.0.0.1    Database: onlytest</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version	8.0.18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `employee`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employee`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee` (</span><br><span class="line">  `ID` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` tinytext <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenyears` <span class="type">int</span>(<span class="number">11</span>) GENERATED ALWAYS <span class="keyword">AS</span> ((`age` <span class="operator">+</span> <span class="number">10</span>)) VIRTUAL,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `employee`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `manager`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `manager`;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET character_set_client = utf8mb4 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `manager` (</span><br><span class="line">  `ID` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` tinytext <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `manager`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump completed on 2020-02-19 20:43:57</span></span><br></pre></td></tr></table></figure>

<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h3><p>若增加勾选 Disable keys，禁用索引，在大批量导入时先禁用索引，在完全导入后，再开启索引。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `employee` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `employee` ENABLE KEYS */</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `manager` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `manager` ENABLE KEYS */</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例 3"></a>案例 3</h3><p>勾选 Add locks，添加了 write 锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">LOCK TABLES `employee` WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee` (`ID`, `name`, `age`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">22</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">17</span>),(<span class="number">3</span>,<span class="string">&#x27;three&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">...</span><br><span class="line">LOCK TABLES `manager` WRITE;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `manager` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;one&#x27;</span>,<span class="number">35</span>),(<span class="number">2</span>,<span class="string">&#x27;two&#x27;</span>,<span class="number">36</span>);</span><br><span class="line">UNLOCK TABLES;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="其他-mysqldump-参数（待定）"><a href="#其他-mysqldump-参数（待定）" class="headerlink" title="其他 mysqldump 参数（待定）"></a>其他 mysqldump 参数（待定）</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="">xxx</a></td>
<td align="center">xxx</td>
</tr>
</tbody></table>
<h1 id="2-查看创建脚本"><a href="#2-查看创建脚本" class="headerlink" title="2 查看创建脚本"></a>2 查看创建脚本</h1><p>右键 SQL Script 选择 SQL Generator</p>
<h1 id="3-执行-SQL"><a href="#3-执行-SQL" class="headerlink" title="3 执行 SQL"></a>3 执行 SQL</h1><p>右键 New 选择 Console，</p>
]]></content>
      <categories>
        <category>配置案例</category>
      </categories>
      <tags>
        <tag>DataGrip</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-中使用-issues-模版和-pull-request-模版</title>
    <url>/2022/12/26/GitHub-%E4%B8%AD%E4%BD%BF%E7%94%A8-issues-%E6%A8%A1%E7%89%88%E5%92%8C-pull-request-%E6%A8%A1%E7%89%88/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、issues-模版"><a href="#一、issues-模版" class="headerlink" title="一、issues 模版"></a>一、issues 模版</h2><h3 id="1-1-默认模版"><a href="#1-1-默认模版" class="headerlink" title="1.1 默认模版"></a>1.1 默认模版</h3><ul>
<li>在代码库新建目录：<code>.github</code></li>
<li>在 <code>.github</code> 目录下添加 <code>ISSUE_TEMPLATE.md</code> 文件作为 issues 默认模版。当创建 issue 时，若未建立多模版或选择了 <code>Open a regular issue</code> 时，系统会引用该模版。</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/36018696/65121507-e9a21400-da21-11e9-823e-808e3bfb4d09.png" alt="1"></p>
<h3 id="1-2-多模版"><a href="#1-2-多模版" class="headerlink" title="1.2 多模版"></a>1.2 多模版</h3><ul>
<li>在代码库新建目录：<code>.github/ISSUE_TEMPLATE</code></li>
<li>该目录下可添加多个 <code>.md</code> 文件作为 issues 模版。当创建 issue 时，系统会展示这些模版供选择。</li>
<li><code>.md</code> 文件参考格式如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: 该模版的名称（创建 issue 时，系统展示模版列表时会显示该名称）</span><br><span class="line">about: 该模版的描述（创建 issue 时，系统展示模版列表时会显示该描述）</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">正文内容……</span><br></pre></td></tr></table></figure>

<h3 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h3><ul>
<li>issues 的默认模版和多模版可同时存在。</li>
<li>关于 issues 模版的描述可详见帮助文档：<a href="https://help.github.com/articles/manually-creating-a-single-issue-template-for-your-repository/">https://help.github.com/articles/manually-creating-a-single-issue-template-for-your-repository/</a></li>
</ul>
<h2 id="二、pull-request-模版"><a href="#二、pull-request-模版" class="headerlink" title="二、pull request 模版"></a>二、pull request 模版</h2><h3 id="2-1-默认模版"><a href="#2-1-默认模版" class="headerlink" title="2.1 默认模版"></a>2.1 默认模版</h3><ul>
<li>在代码库新建目录：<code>.github</code></li>
<li>在 <code>.github</code> 目录下添加 <code>PULL_REQUEST_TEMPLATE.md</code> 文件作为 pull request 默认模版。当创建不带参数的 pull request 时，系统会引用该模版。</li>
</ul>
<h3 id="2-2-多模版"><a href="#2-2-多模版" class="headerlink" title="2.2 多模版"></a>2.2 多模版</h3><ul>
<li>在代码库新建目录：<code>.github/PULL_REQUEST_TEMPLATE</code></li>
<li>该目录下可添加多个 <code>.md</code> 文件作为 pull request 模版。</li>
<li>pull request 模版要通过查询参数来调用。例如，要使用 <code>pr-template-1.md</code> 这个模版，可使用如下查询：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/用户名/代码库名称/compare/分支名称?expand=1&amp;template=pr-template-1.md</span><br><span class="line">或参考GitHub帮助文档的格式，如下。两者效果相同。</span><br><span class="line">https://github.com/用户名/代码库名称/compare/master...分支名称?expand=1&amp;template=pr-template-1.md</span><br></pre></td></tr></table></figure>
<ul>
<li>可选查询参数<ul>
<li><code>expand=1</code>，直接跳转到 pull request 界面。如果不带此参数会先到 compare 界面，需手动进入pull request 界面。</li>
<li><code>template=pr-template-1.md</code>，调用名为 <code>pr-template-1.md</code> 的模版。如果不带此参数，则调用默认模版。</li>
<li><code>title=New+bug+report</code>（或者 <code>title=New%20bug%20report</code>），指定 pull request 的标题为 <code>New bug report</code></li>
<li>其他参数可详见帮助文档：<a href="https://help.github.com/articles/about-automation-for-issues-and-pull-requests-with-query-parameters/">https://help.github.com/articles/about-automation-for-issues-and-pull-requests-with-query-parameters/</a></li>
</ul>
</li>
</ul>
<h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a>2.3 注意事项</h3><ul>
<li>pull request 的默认模版和多模版可同时存在。</li>
<li>关于 pull request 模版的描述可详见帮助文档：<a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/">https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/</a></li>
</ul>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub-中独立仓库与组织的权限</title>
    <url>/2022/12/26/GitHub-%E4%B8%AD%E7%8B%AC%E7%AB%8B%E4%BB%93%E5%BA%93%E4%B8%8E%E7%BB%84%E7%BB%87%E7%9A%84%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、独立仓库（公开或私有）"><a href="#一、独立仓库（公开或私有）" class="headerlink" title="一、独立仓库（公开或私有）"></a>一、独立仓库（公开或私有）</h2><p>独立仓库包含 <strong>仓库拥有者和外部协作者</strong> 两种角色，相关权限如下表</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">直接写入</th>
<th align="center">issue 操作<br>[删除、隐藏、修改]</th>
<th align="center">添加标签</th>
<th align="center">分支操作<br>[删除、创建]</th>
<th align="center">邀请校对</th>
<th align="center">被邀请校对</th>
<th align="center">校对操作<br>[同意、驳回、重校]</th>
<th align="center">强制合并</th>
<th align="center">Setting 菜单可见</th>
</tr>
</thead>
<tbody><tr>
<td align="center">仓库拥有者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">外部协作者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p><strong>注：Setting 菜单是否可见决定了是否具备删库、设置分支规则、邀请外部协作者、密钥设置等高级权限。</strong></p>
<h2 id="二、组织"><a href="#二、组织" class="headerlink" title="二、组织"></a>二、组织</h2><p>组织包含 <strong>组织拥有者、成员、外部协作者</strong> 三种角色，以及 <strong>Read、Write、Admin</strong> 三种权限。</p>
<h3 id="1、Base-permissions（基本权限）"><a href="#1、Base-permissions（基本权限）" class="headerlink" title="1、Base permissions（基本权限）"></a>1、Base permissions（基本权限）</h3><p>Base permissions to the organization’s repositories apply to all members and excludes outside collaborators. Since organization members can have permissions from multiple sources, members and collaborators who have been granted a higher level of access than the base permissions will retain their higher permission privileges.</p>
<p>组织存储库的基本权限适用于所有成员（不含外部协作者）。由于组织成员可以拥有多个库的自定义权限，因此被授予比基本权限更高级别访问权限时，成员和协作者将保留更高的权限。</p>
<p>基本权限包含如下几种：</p>
<ul>
<li>None，Members will only be able to clone and pull public repositories. To give a member additional access, you’ll need to add them to teams or make them collaborators on individual repositories.</li>
</ul>
<p>成员只能对公共库实施 clone 和 pull 操作。要为成员提供额外的访问权限，需要将它们添加到团队中，或者让它们成为各个存储库的外部协作者。</p>
<ul>
<li>Read，Members will be able to clone and pull all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone 和 pull 操作。</p>
<ul>
<li>Write，Members will be able to clone, pull, and push all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone、pull 和 push 操作。</p>
<ul>
<li>Admin，Members will be able to clone, pull, push, and add new collaborators to all repositories.</li>
</ul>
<p>成员可以对所有库实施 clone、pull、push 和添加外部协作者的操作。</p>
<h3 id="2、组织角色"><a href="#2、组织角色" class="headerlink" title="2、组织角色"></a>2、组织角色</h3><ul>
<li>Owner，Has full administrative access to the entire organization.</li>
</ul>
<p>对整个组织具有完全的管理访问权限。<strong>组织角色为 Owner 时，对于组织中每一个库而言，默认权限都是 Admin。</strong></p>
<ul>
<li>Member，Can see every member and non-secret team in the organization, and can create new repositories.</li>
</ul>
<p>可以查看组织中的每个成员和非机密团队，并可以创建新的存储库。<strong>组织角色为 Member 时，对于组织中每一个库而言，默认权限都与基本权限相同。</strong></p>
<h3 id="3、库权限"><a href="#3、库权限" class="headerlink" title="3、库权限"></a>3、库权限</h3><p>Read、Write、Admin，详见基本权限的描述。<strong>如果需要在某一个库中授予某个成员高于基本权限的权限，需要将其添加为外部协作者。</strong></p>
<h3 id="4、组织权限总结如下"><a href="#4、组织权限总结如下" class="headerlink" title="4、组织权限总结如下"></a>4、组织权限总结如下</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">直接写入</th>
<th align="center">issue 操作<br>[删除、隐藏、修改]</th>
<th align="center">添加标签</th>
<th align="center">分支操作<br>[删除、创建]</th>
<th align="center">邀请校对</th>
<th align="center">被邀请校对</th>
<th align="center">校对操作<br>[同意、驳回、重校]</th>
<th align="center">强制合并</th>
<th align="center">库 Setting 菜单可见</th>
<th align="center">组织 Setting 菜单可见</th>
</tr>
</thead>
<tbody><tr>
<td align="center">组织拥有者</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">Read</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">Write</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">Admin</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ-IDEA-快捷键及常用配置</title>
    <url>/2022/12/07/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<img src="/2022/12/07/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/1.png" class="">

<img src="/2022/12/07/IntelliJ-IDEA-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/2.png" class="">

<!-- 
符号 	说明
⌘ 	Command
⇧ 	Shift
⌥ 	Option
⌃ 	Control
↩︎ 	Return/Enter
⌫ 	Delete
⌦ 	向前删除键（Fn+Delete）
↑ 	上箭头
↓ 	下箭头
→ 	右箭头
← 	左箭头
⇞ 	Page Up（Fn+↑）
⇟ 	Page Down（Fn+↓）
Home 	Fn + ←
End 	Fn + →
⇥ 	右制表符（Tab键）
⇤ 	左制表符（Shift+Tab）
⎋ 	Escape (Esc)
 -->

<h2 id="macOS-IDEA-默认常用快捷键"><a href="#macOS-IDEA-默认常用快捷键" class="headerlink" title="macOS IDEA 默认常用快捷键"></a>macOS IDEA 默认常用快捷键</h2><ul>
<li>删除行 <code>⌘Y</code></li>
<li>查看实现当前接口全部类或当前类的全部子类（Type hierarchy） <code>⌃H</code></li>
<li>查看所有方法 <code>⌘7</code></li>
<li>从当前行切换到下一行 <code>⇧↩︎</code></li>
<li>全局搜索（Search everywhere） <code>Double⇧</code></li>
<li>格式化代码（Reformat Code） <code>⌥⌘L</code></li>
<li>往上移动代码块或行 <code>⇧⌘↑</code></li>
<li>往下移动代码块或行 <code>⇧⌘↓</code></li>
</ul>
<h2 id="格式化-Java-代码时让注释不在行首"><a href="#格式化-Java-代码时让注释不在行首" class="headerlink" title="格式化 Java 代码时让注释不在行首"></a>格式化 Java 代码时让注释不在行首</h2><p>Preference → Editor → Code Style → Java，取消「Line comment at first column」和「Block comment at first column」复选即可。</p>
<h2 id="Java-代码自动导入依赖"><a href="#Java-代码自动导入依赖" class="headerlink" title="Java 代码自动导入依赖"></a>Java 代码自动导入依赖</h2><p>Preference → Editor → General → Auto Import，「Insert imports on paste」选择「All」即可。</p>
<h2 id="自动完成关键字时不区分大小写"><a href="#自动完成关键字时不区分大小写" class="headerlink" title="自动完成关键字时不区分大小写"></a>自动完成关键字时不区分大小写</h2><p>Preference → Editor → General → Code Completion，取消「Match case」复选即可。</p>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS-或-Win-环境下问题杂烩及备忘</title>
    <url>/2022/12/07/MacOS-%E6%88%96-Win-%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%97%AE%E9%A2%98%E6%9D%82%E7%83%A9%E5%8F%8A%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="macOS-10-14-6-运行应用时提示「无法打开“xxxxx”，因为-Apple-无法检查其是否包含恶意软件。」"><a href="#macOS-10-14-6-运行应用时提示「无法打开“xxxxx”，因为-Apple-无法检查其是否包含恶意软件。」" class="headerlink" title="macOS 10.14.6 运行应用时提示「无法打开“xxxxx”，因为 Apple 无法检查其是否包含恶意软件。」"></a>macOS 10.14.6 运行应用时提示「无法打开“xxxxx”，因为 Apple 无法检查其是否包含恶意软件。」</h2><p>该提示与「“xxxxx”已损坏，打不开。您应该将它移到废纸娄。」解决方案相同，需要开启「允许安装软件来自任何来源」。打开终端，输入命令：<code>sudo spctl --master-disable</code>，输入密码后生效。</p>
<h2 id="macOS-查看隐藏文件"><a href="#macOS-查看隐藏文件" class="headerlink" title="macOS 查看隐藏文件"></a>macOS 查看隐藏文件</h2><p><code>⌘+⇧+.</code></p>
<h2 id="win10-使用-ssh-连接远程服务器"><a href="#win10-使用-ssh-连接远程服务器" class="headerlink" title="win10 使用 ssh 连接远程服务器"></a>win10 使用 ssh 连接远程服务器</h2><ul>
<li>依次进入：开始菜单 → 设置 → 应用 → 应用和功能，选择「管理可选功能」</li>
<li>进入添加功能，添加「OpenSSH 服务端」</li>
<li>从开始菜单打开 Windows PowerShell 即可使用</li>
</ul>
<h2 id="VSCode-利用正则删除全部空行"><a href="#VSCode-利用正则删除全部空行" class="headerlink" title="VSCode 利用正则删除全部空行"></a>VSCode 利用正则删除全部空行</h2><p><code>^\s*(?=\r?$)\n</code> 匹配所有空行，替换为无字符即可</p>
<h2 id="macOS-每次开机通过-ssh-add-自动添加私钥"><a href="#macOS-每次开机通过-ssh-add-自动添加私钥" class="headerlink" title="macOS 每次开机通过 ssh-add 自动添加私钥"></a>macOS 每次开机通过 ssh-add 自动添加私钥</h2><p>打开自动操作，类型选择「应用程序」</p>
<p>选择「运行 shell 脚本」，双击，在右侧设置「名称」，输入如下命令行（参考）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>进入「偏好设置」，进入「用户与群组」，进入「登陆项」，选择之前命名的应用即可</p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-配置阿里云中央仓库和自定义本地仓库</title>
    <url>/2022/12/26/Maven-%E9%85%8D%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在国内访问 Maven 仓库的速度太慢，导致使用 IDEA 建立 Maven 项目会出现没有 src 目录结构的情况。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="中央仓库配置"><a href="#中央仓库配置" class="headerlink" title="中央仓库配置"></a>中央仓库配置</h3><p>在 Maven 安装目录下的 settings.xml 文件中的增加以下内容，使用阿里云的中央仓库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自定义本地仓库配置"><a href="#自定义本地仓库配置" class="headerlink" title="自定义本地仓库配置"></a>自定义本地仓库配置</h3><p>在 Maven 安装目录下的 settings.xml 文件中设置本地仓库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\myProgram\apache-maven-3.5.2\repositoryx<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-配置文件的结构详解及案例</title>
    <url>/2022/12/26/Nginx-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%E5%8F%8A%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>nginx 源码：<a href="https://trac.nginx.org/nginx/browser">https://trac.nginx.org/nginx/browser</a></li>
<li>nginx 官网：<a href="http://www.nginx.org/">http://www.nginx.org/</a></li>
</ul>
<h2 id="配置文件结构"><a href="#配置文件结构" class="headerlink" title="配置文件结构"></a>配置文件结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块1</span><br><span class="line">    &#123;</span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块1</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN]   #location块2</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server        #server块2</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>全局块：配置影响 nginx 全局的指令。一般有运行 nginx 服务器的用户组，nginx 进程 pid 存放路径，日志存放路径，配置文件引入，允许生成 worker process 数等。</li>
<li>events 块：配置影响 nginx 服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li>http 块：配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type 定义，日志自定义，是否使用 sendfile 传输文件，连接超时时间，单连接请求数等。</li>
<li>server 块：配置虚拟主机的相关参数，一个 http 中可以有多个 server。</li>
<li>location 块：配置请求的路由，以及各种页面的处理情况。</li>
</ul>
<h2 id="配置文件细节"><a href="#配置文件细节" class="headerlink" title="配置文件细节"></a>配置文件细节</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置用户或者组，默认为nobody nobody</span><br><span class="line">user administrator administrators;</span><br><span class="line"></span><br><span class="line">#允许生成的进程数，默认为1，也可以设置为auto，这个数值简单一点可以设置为cpu的核数grep ^processor /proc/cpuinfo | wc -l，也是auto值，如果开启了ssl和gzip更应该设置成与逻辑CPU数量一样甚至为2倍，可以减少I/O操作。如果nginx服务器还有其它服务，可以考虑适当减少。</span><br><span class="line">worker_processes 2;</span><br><span class="line"></span><br><span class="line">#默认是没有设置，可以限制为操作系统最大的限制65535。</span><br><span class="line">worker_rlimit_nofile 10240</span><br><span class="line"></span><br><span class="line">#指定nginx进程运行文件存放地址</span><br><span class="line">pid /nginx/pid/nginx.pid;</span><br><span class="line"></span><br><span class="line">#设置日志路径和级别。这个设置可以放入全局块，http块，server块，可选级别：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">error_log log/error.log;</span><br><span class="line">error_log log/error.log notice;</span><br><span class="line">error_log log/error.log debug;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  #设置网路连接序列化，防止惊群现象发生，默认为on，惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</span><br><span class="line">  accept_mutex on;</span><br><span class="line"></span><br><span class="line">  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">  multi_accept on;</span><br><span class="line"></span><br><span class="line">  #事件驱动模型，可选：select|poll|kqueue|epoll|resig|/dev/poll|eventport，在Linux操作系统下，nginx默认使用epoll事件模型，得益于此，nginx在Linux操作系统下效率相当高。同时Nginx在OpenBSD或FreeBSD操作系统上采用类似于epoll的高效事件模型kqueue。在操作系统不支持这些高效模型时才使用select。</span><br><span class="line">  use epoll;</span><br><span class="line"></span><br><span class="line">  #最大连接数，默认为512，每一个worker进程能并发处理（发起）的最大连接数（包含与客户端或后端被代理服务器间等所有连接数）</span><br><span class="line">  #nginx作为反向代理服务器，计算公式最大连接数 = worker_processes * worker_connections/4，所以这里客户端最大连接数是1024，这个可以增到到8192都没关系，看情况而定，但不能超过后面的worker_rlimit_nofile。当nginx作为http服务器时，计算公式里面是除以2。</span><br><span class="line">  worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  #文件扩展名与文件类型映射表</span><br><span class="line">  include mime.types;</span><br><span class="line"></span><br><span class="line">  #默认文件类型，默认为text/plain</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">  #取消服务日志</span><br><span class="line">  #access_log off;</span><br><span class="line"></span><br><span class="line">  #自定义格式</span><br><span class="line">  log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;;</span><br><span class="line"></span><br><span class="line">  #自定义格式含义</span><br><span class="line">  #$remote_addr与$http_x_forwarded_for，记录客户端的ip地址</span><br><span class="line">  #$remote_user，记录客户端用户名称</span><br><span class="line">  #$time_local，记录访问时间与时区</span><br><span class="line">  #$request，记录请求的url与http协议</span><br><span class="line">  #$status，记录请求状态；成功是200</span><br><span class="line">  #$body_bytes_s ent，记录发送给客户端文件主体内容大小</span><br><span class="line">  #$http_referer，记录从那个页面链接访问过来的</span><br><span class="line">  #$http_user_agent，记录客户端浏览器的相关信息</span><br><span class="line"></span><br><span class="line">  #combined为日志格式的默认值</span><br><span class="line">  access_log log/access.log myFormat;</span><br><span class="line"></span><br><span class="line">  #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块，开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，减少用户空间到内核空间的上下文切换。对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。</span><br><span class="line">  sendfile on;</span><br><span class="line"></span><br><span class="line">  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限</span><br><span class="line">  sendfile_max_chunk 100k;</span><br><span class="line"></span><br><span class="line">  #连接超时时间，默认为75s，可以在http，server，location块，长连接超时时间，单位是秒，这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。</span><br><span class="line">  keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">  #http_proxy 设置</span><br><span class="line">  #允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值</span><br><span class="line">  client_max_body_size  10m;</span><br><span class="line"></span><br><span class="line">  #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">  client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">  proxy_connect_timeout 75;</span><br><span class="line">  proxy_send_timeout  75;</span><br><span class="line">  proxy_read_timeout  75;</span><br><span class="line">  proxy_buffer_size 4k;</span><br><span class="line">  proxy_buffers 4 32k;</span><br><span class="line">  proxy_busy_buffers_size 64k;</span><br><span class="line">  proxy_temp_file_write_size  64k;</span><br><span class="line">  proxy_temp_path   /usr/local/nginx/proxy_temp 1 2;</span><br><span class="line"></span><br><span class="line">  #设定实际的服务器列表</span><br><span class="line">  #这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡，upstream后接负载均衡器的名字，后端realserver以host:port options; 方式组织在 &#123;&#125; 中。如果后端被代理的只有一台，也可以直接写在</span><br><span class="line">  upstream mysvr &#123;   </span><br><span class="line">    server 127.0.0.1:7878;</span><br><span class="line">    #热备</span><br><span class="line">    server 192.168.10.121:3333 backup;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #错误页，若该配置要生效，还需要配置proxy_intercept_errors</span><br><span class="line">  error_page 404 https://www.baidu.com;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      #单连接请求上限次数</span><br><span class="line">      keepalive_requests  120;</span><br><span class="line">      #监听端口，默认80，小于1024的要以root启动。可以为listen *:80、listen 127.0.0.1:80等形式。</span><br><span class="line">      listen  4545;</span><br><span class="line">      #监听地址，可以通过正则匹配。  </span><br><span class="line">      server_name 127.0.0.1;</span><br><span class="line">      #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">      location  ~*^.+$ &#123;</span><br><span class="line">        #根目录</span><br><span class="line">        #root path;</span><br><span class="line">        #设置默认页</span><br><span class="line">        #index vv.txt;</span><br><span class="line">        #反向代理的路径（和upstream绑定），location 后面设置映射的路径</span><br><span class="line">        proxy_pass  http://mysvr;</span><br><span class="line">        #拒绝的ip</span><br><span class="line">        deny  127.0.0.1;</span><br><span class="line">        #允许的ip</span><br><span class="line">        allow 172.18.5.54;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen  80;</span><br><span class="line">      server_name  itoatest.example.com;</span><br><span class="line">      root   /apps/oaapp;</span><br><span class="line">      charset utf-8;</span><br><span class="line">      access_log  logs/host.access.log  main;</span><br><span class="line">      #对/所有做负载均衡+反向代理</span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /apps/oaapp;</span><br><span class="line">          index  index.jsp index.html index.htm;</span><br><span class="line">          proxy_pass  http://backend;</span><br><span class="line">          proxy_redirect off;</span><br><span class="line">          # 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">          proxy_set_header  Host  $host;</span><br><span class="line">          proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">          proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">      &#125;</span><br><span class="line">      #静态文件，nginx自己处理，不去backend请求tomcat</span><br><span class="line">      location  ~* /download/ &#123;</span><br><span class="line">          root /apps/oa/fs;</span><br><span class="line">          #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">          expires 30d;</span><br><span class="line">      &#125;</span><br><span class="line">      location ~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)$</span><br><span class="line">      &#123;   </span><br><span class="line">          root /apps/oaapp;</span><br><span class="line">          expires 7d;</span><br><span class="line">      &#125;</span><br><span class="line">      location /nginx_status &#123;</span><br><span class="line">          stub_status on;</span><br><span class="line">          access_log off;</span><br><span class="line">          allow 192.168.10.0/24;</span><br><span class="line">          deny all;</span><br><span class="line">      &#125;</span><br><span class="line">      location ~ ^/(WEB-INF)/ &#123;</span><br><span class="line">          deny all;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      #error_page  404  /404.html;</span><br><span class="line">      # redirect server error pages to the static page /50x.html</span><br><span class="line">      error_page   500 502 503 504  /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">          root   html;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="宝塔Linux面板默认配置（Nginx-1-8）"><a href="#宝塔Linux面板默认配置（Nginx-1-8）" class="headerlink" title="宝塔Linux面板默认配置（Nginx 1.8）"></a>宝塔Linux面板默认配置（Nginx 1.8）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log  /www/wwwlogs/nginx_error.log  crit;</span><br><span class="line">pid        /www/server/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">events  &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 51200;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">http  &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">    		#include luawaf.conf;</span><br><span class="line"></span><br><span class="line">    		include proxy.conf;</span><br><span class="line"></span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        server_names_hash_bucket_size 512;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">    		fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">    		limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line"></span><br><span class="line">        server_tokens off;</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">server  &#123;</span><br><span class="line">        listen 888;</span><br><span class="line">        server_name www.bt.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /www/server/phpmyadmin;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /www/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">include /www/server/panel/vhost/nginx/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="http反向代理配置案例"><a href="#http反向代理配置案例" class="headerlink" title="http反向代理配置案例"></a>http反向代理配置案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">#user www;</span><br><span class="line"></span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志</span><br><span class="line">error_log  /www/server/logs/error.log;</span><br><span class="line">error_log  /www/server/logs/notice.log  notice;</span><br><span class="line">error_log  /www/server/logs/info.log  info;</span><br><span class="line"></span><br><span class="line">#PID文件，记录当前启动的nginx的进程ID</span><br><span class="line">pid        /www/server/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;    #单个后台worker process进程的最大并发链接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型(邮件支持类型),类型由mime.types文件定义</span><br><span class="line">    include       /www/server/conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #设定日志</span><br><span class="line">    log_format  main  &#x27;[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log    /www/server/logs/access.log main;</span><br><span class="line">    rewrite_log     on;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    keepalive_timeout  120;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    #gzip压缩开关</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    #设定实际的服务器列表</span><br><span class="line">    upstream server_list&#123;</span><br><span class="line">        server 127.0.0.1:8089;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #HTTP服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name  www.test.cn;</span><br><span class="line">        index index.html</span><br><span class="line">        root /www/server/test;</span><br><span class="line"></span><br><span class="line">        #编码格式</span><br><span class="line">        charset utf-8;</span><br><span class="line"></span><br><span class="line">        #代理配置参数</span><br><span class="line">        proxy_connect_timeout 180;</span><br><span class="line">        proxy_send_timeout 180;</span><br><span class="line">        proxy_read_timeout 180;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarder-For $remote_addr;</span><br><span class="line"></span><br><span class="line">        #反向代理的路径</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://server_list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #设置静态文件映射的路径</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            root /www/server/views;</span><br><span class="line">            #过期时限30天，若变动较少，可适当增加天数；反之减少。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status           on;</span><br><span class="line">            access_log            on;</span><br><span class="line">            auth_basic            &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file  conf/htpasswd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #禁止访问.htxxx文件</span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #错误处理页面（可选）</span><br><span class="line">        #error_page   404              /404.html;</span><br><span class="line">        #error_page   500 502 503 504  /50x.html;</span><br><span class="line">        #location = /50x.html &#123;</span><br><span class="line">        #    root   html;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="https反向代理配置案例"><a href="#https反向代理配置案例" class="headerlink" title="https反向代理配置案例"></a>https反向代理配置案例</h2><p>安全性要求比较高的站点，可能会使用 HTTPS协议。HTTPS的固定端口号为443，使用SSL标准需要引入安全证书，所以在nginx.conf中需要指定证书和对应的key，其他设置和http反向代理一样，只是在Server部分配置有些不同。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#HTTP服务器</span><br><span class="line">  server &#123;</span><br><span class="line">      #监听443端口</span><br><span class="line">      listen  443 ssl;</span><br><span class="line"></span><br><span class="line">      #定义www.test.cn</span><br><span class="line">      server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">      #ssl证书文件位置(常见证书文件格式为：crt/pem)</span><br><span class="line">      ssl_certificate      cert.pem;</span><br><span class="line">      #ssl证书key位置</span><br><span class="line">      ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">      #ssl配置参数（可选）</span><br><span class="line">      ssl_session_cache    shared:SSL:1m;</span><br><span class="line">      ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">      #数字签名，此处使用MD5</span><br><span class="line">      ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">      ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          root   /root;</span><br><span class="line">          index  index.html index.htm;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="负载均衡案例"><a href="#负载均衡案例" class="headerlink" title="负载均衡案例"></a>负载均衡案例</h2><p>有如下应用场景：</p>
<ul>
<li>应用分别部署在<code>192.168.1.10:80</code>、<code>192.168.1.11:80</code>、<code>192.168.1.12:80</code>三台linux环境的服务器上。</li>
<li>网站域名为：<code>www.test.cn</code>，公网IP为<code>192.168.1.10</code></li>
<li>在公网IP所在的服务器上部署nginx，对所有请求做负载均衡处理</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    #设定负载均衡的服务器列表</span><br><span class="line">    upstream server_list &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.1.10:80   weight=1;</span><br><span class="line">        server 192.168.1.11:80   weight=3;</span><br><span class="line">        server 192.168.1.12:80   weight=7;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   #HTTP服务器</span><br><span class="line">   server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">        #对所有请求进行负载均衡请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root        /root;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index       index.html index.htm;</span><br><span class="line">            #请求转向load_balance_server 定义的服务器列表</span><br><span class="line">            proxy_pass  http://server_list;</span><br><span class="line"></span><br><span class="line">            #其他反向代理的配置(可选)</span><br><span class="line">            #proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">            proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">            proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"></span><br><span class="line">            client_max_body_size 10m;          #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多个webapp的配置案例"><a href="#多个webapp的配置案例" class="headerlink" title="多个webapp的配置案例"></a>多个webapp的配置案例</h2><p>将网站中一些功能相对独立的模块抽离出来，独立维护</p>
<ul>
<li><a href="http://www.test.cn拆分出：A、B、C三个模块">www.test.cn拆分出：A、B、C三个模块</a></li>
<li>访问上述模块的方式通过上下文(context)来进行区分:<ul>
<li><a href="http://www.test.cn/A/">www.test.cn/A/</a></li>
<li><a href="http://www.test.cn/B/">www.test.cn/B/</a></li>
<li><a href="http://www.test.cn/C/">www.test.cn/C/</a></li>
</ul>
</li>
<li>这三个应用需要分别绑定不同的端口号。那么用户在实际访问站点时，访问不同模块时为了避免带端口号访问，需要用到反向代理。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream A_server&#123;</span><br><span class="line">        server www.test.cn:8081;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream B_server&#123;</span><br><span class="line">        server www.test.cn:8082;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream C_server&#123;</span><br><span class="line">        server www.test.cn:8083;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        #默认指向A</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://A_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /A/&#123;</span><br><span class="line">            proxy_pass http://A_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /B/ &#123;</span><br><span class="line">            proxy_pass http://B_server;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /C/ &#123;</span><br><span class="line">            proxy_pass http://C_server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态站点配置案例"><a href="#静态站点配置案例" class="headerlink" title="静态站点配置案例"></a>静态站点配置案例</h2><p>网站静态资源都放在了&#x2F;app&#x2F;dist目录下，此时要在nginx.conf中指定首页以及这个站点的host即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  static.zp.cn;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            #转发任何请求到index.html</span><br><span class="line">            index index.html;</span><br><span class="line">            root /app/dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨域案例"><a href="#跨域案例" class="headerlink" title="跨域案例"></a>跨域案例</h2><p>解决跨域问题一般有两种思路：</p>
<ul>
<li>jsonp。把后端根据请求，构造json数据并返回，前端用jsonp跨域。</li>
<li>CORS。在后端服务器设置http响应头，把需要运行访问的域名加入加入Access-Control-Allow-Origin中。nginx 根据这个思路，提供了一种解决跨域的解决方案。举例：<a href="http://www.test.cn是由一个前端app,一个后端app组成的.前端端口号为9000,后端端口号为8080.前端和后端如果使用http进行交互时,请求会被拒绝,因为存在跨域问题.此时,在/">www.test.cn是由一个前端app，一个后端app组成的。前端端口号为9000，后端端口号为8080。前端和后端如果使用http进行交互时，请求会被拒绝，因为存在跨域问题。此时，在</a> enable-cors.conf 文件中设置 cors：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># allow origin list</span><br><span class="line">set $ACAO &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line"># set single origin</span><br><span class="line">if ($http_origin ~* (www.test.cn)$) &#123;</span><br><span class="line">  set $ACAO $http_origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($cors = &quot;trueget&quot;) &#123;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Origin&#x27; &quot;$http_origin&quot;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line">    add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;options&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;GET&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;get&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;POST&#x27;) &#123;</span><br><span class="line">  set $cors &quot;$&#123;cors&#125;post&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在服务器中include enable-cors.conf，即引入跨域配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可直接在 nginx config 中 include（推荐）</span><br><span class="line"># www.test.cn域名需配合 dns hosts 进行配置</span><br><span class="line"># 其中，api 开启了 cors，需配合本目录下另一份配置文件</span><br><span class="line"></span><br><span class="line">upstream front_server&#123;</span><br><span class="line">  server www.test.cn:9000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream api_server&#123;</span><br><span class="line">  server www.test.cn:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  www.test.cn;</span><br><span class="line"></span><br><span class="line">  location ~ ^/api/ &#123;</span><br><span class="line">    include enable-cors.conf;</span><br><span class="line">    proxy_pass http://api_server;</span><br><span class="line">    rewrite &quot;^/api/(.*)$&quot; /$1 break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ ^/ &#123;</span><br><span class="line">    proxy_pass http://front_server;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="upstream的几种配置方式"><a href="#upstream的几种配置方式" class="headerlink" title="upstream的几种配置方式"></a>upstream的几种配置方式</h2><p>第一种：轮询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1:3000;</span><br><span class="line">server 192.168.0.1:3001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种：权重</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1 weight=2;</span><br><span class="line">server 192.168.0.2 weight=3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式可解决服务器性能不等的情况下轮询比率的调配</p>
<p>第三种：ip_hash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">ip_hash;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式会根据来源IP和后端配置来做hash分配，确保固定IP只访问一个后端</p>
<p>第四种：fair<br>需要安装Upstream Fair Balancer Module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式会根据后端服务的响应时间来分配，响应时间短的后端优先分配</p>
<p>第五种：自定义hash<br>需要安装Upstream Hash Module</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">server 192.168.0.1;</span><br><span class="line">server 192.168.0.2;</span><br><span class="line">hash $request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式可以根据给定的字符串进行Hash分配</p>
<p>具体应用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name .test.com;</span><br><span class="line">  charset utf-8;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://test/;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>upstream每个地址可设置参数为：</p>
<ul>
<li>down: 表示此台server暂时不参与负载。</li>
<li>weight: 默认为1，weight越大，负载的权重就越大。</li>
<li>max_fails: 允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误。</li>
<li>fail_timeout: max_fails次失败后，暂停的时间。</li>
<li>backup: 其它所有的非backup机器down或者忙的时候，请求backup机器，应急措施。</li>
</ul>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode-常用插件及配置</title>
    <url>/2022/12/07/VSCode-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a>Prettier - Code formatter</h2><p>代码格式化插件，支持的语言有：JavaScript、TypeScript、Flow、JSX、JSON、CSS、SCSS、Less、HTML、Vue、Angular、GraphQL、Markdown、YAML</p>
<p>Prettier 使用 cosmiconfig 来支持配置文件。这意味着你可以通过以下方式配置 prettier（按优先级顺序）：</p>
<ul>
<li>在 <code>package.json</code> 文件中建立 <code>&quot;prettier&quot;</code> 键</li>
<li>新建一个内容是 JSON 或 YAML 格式的 <code>.prettierrc</code> 文件，扩展名可选：<code>.json/.yaml/.yml</code>，不带扩展名的优先级最高。</li>
<li>使用 <code>.prettierrc.js</code> 或 <code>prettier.config.js</code> 文件导出对象</li>
<li>使用 <code>.prettierrc.toml</code> 文件，格式是 TOML，（ <code>.toml</code> 扩展名是必须的）</li>
</ul>
<p>配置文件将从正在格式化的文件的位置开始解析，并在文件树中搜索，直到找到（或没有找到）配置文件。配置文件的选项与 API 选项相同。JSON 格式的配置文件示例如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><h4 id="jsxBracketSameLine"><a href="#jsxBracketSameLine" class="headerlink" title="jsxBracketSameLine"></a><a href="https://prettier.io/docs/en/options.html#jsx-brackets">jsxBracketSameLine</a></h4><p>将多行 JSX 元素的 <code>&gt;</code> 放在最后一行的末尾，而不是单独放在下一行（不应用于自关闭元素）。默认值为 <code>false</code>。</p>
<h4 id="arrowParens"><a href="#arrowParens" class="headerlink" title="arrowParens"></a><a href="https://prettier.io/docs/en/options.html#arrow-function-parentheses">arrowParens</a></h4><p>箭头函数的单个参数周围包含圆括号。可选值为：<code>&quot;always&quot;</code> 和 <code>&quot;avoid&quot;</code>，默认值为 <code>&quot;avoid&quot;</code>，即单个参数周围默认不包含圆括号。</p>
<h4 id="https-prettier-io-docs-en-options-html-bracket-spacing"><a href="#https-prettier-io-docs-en-options-html-bracket-spacing" class="headerlink" title="https://prettier.io/docs/en/options.html#bracket-spacing"></a><a href="https://prettier.io/docs/en/options.html#bracket-spacing">https://prettier.io/docs/en/options.html#bracket-spacing</a></h4><p>更多说明及示例可参看文档：<a href="https://prettier.io/docs/en/configuration.html">https://prettier.io/docs/en/configuration.html</a></p>
]]></content>
      <categories>
        <category>配置案例</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>conda-依赖管理</title>
    <url>/2023/01/26/conda-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>创建一个新环境：<code>conda create -n &lt;env_name&gt; &lt;python=version&gt; &lt;package_list&gt;</code></p>
<blockquote>
<p>例子：<code>conda create -n env python=3.10 numpy pandas</code>，创建名为<code>env</code>的环境，python 版本为 3.10，同时安装 numpy 和 pandas。</p>
</blockquote>
<p>进入环境：<code>conda activate &lt;env_name&gt;</code></p>
<p>退出环境：<code>conda deavtivate</code></p>
<p>查看所有环境：<code>conda env list</code></p>
<p>复制环境：<code>conda create --name &lt;new_env_name&gt; --clone &lt;old_env_name&gt;</code></p>
<p>精确查找依赖：<code>conda search --full-name &lt;package_full_name&gt;</code></p>
<p>模糊查找依赖：<code>conda search &lt;依赖名称包含的字符串&gt;</code></p>
<p>查看已经安装的依赖：<code>conda list</code></p>
<p>安装依赖：<code>conda install --name &lt;env_name&gt; &lt;package_name&gt;</code></p>
<p>在当前环境安装依赖：<code>conda install &lt;package_name&gt;</code></p>
<p>卸载依赖：<code>conda remove --name &lt;env_name&gt; &lt;package_name&gt;</code></p>
<p>在当前环境卸载依赖：<code>conda remove &lt;package_name&gt;</code></p>
<p>更新全部依赖：<code>conda update --all</code></p>
<p>更新指定依赖：<code>conda update &lt;package_name&gt;</code></p>
<h2 id="环境依赖的导出和恢复"><a href="#环境依赖的导出和恢复" class="headerlink" title="环境依赖的导出和恢复"></a>环境依赖的导出和恢复</h2><p>导出当前环境依赖：<code>conda env export &gt; environment.yaml</code></p>
<p>恢复依赖：<code>conda env create -f environment.yml -n &lt;envname&gt;</code></p>
<blockquote>
<p>注意：<code>environment.yaml</code>文件<code>name</code>属性是导出时环境的名称或绝对路径，恢复时为防止冲突，最好使用<code>-n</code>参数显示指定新名称，此时恢复的环境会出现在<code>env</code>目录下，直接按新名称引用即可。</p>
</blockquote>
<ul>
<li>vscode：<code>ctrl+shift+p</code> -&gt; <code>Select Interpreter</code></li>
<li>pycharm：<code>Settings</code> -&gt; <code>Project</code> -&gt; <code>Python Interpreter</code> -&gt; <code>Add Python Interpreter</code> -&gt; <code>Conda Environment</code></li>
</ul>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>常规命令：<code>conda remove --name &lt;env_name&gt; --all</code>，按「Y」确认后执行删除，但<code>env</code>目录下有残余，手动清除即可；若环境没有名称，如下所示。按目前使用经验，用 vscode 插件生成的 conda 环境会出现这种情况，在源码目录下以<code>.conda</code>出现。直接删除即可，再次查看环境列表会消失。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">base                     C:\Users\pro\anaconda3</span><br><span class="line">new                   *  C:\Users\pro\anaconda3\envs\new</span><br><span class="line">python                   C:\Users\pro\anaconda3\envs\python</span><br><span class="line">testq                    C:\Users\pro\anaconda3\envs\testq</span><br><span class="line">testx                    C:\Users\pro\anaconda3\envs\testx</span><br><span class="line">                         c:\Users\Desktop\py_mod\.conda</span><br><span class="line">                         c:\Users\Desktop\test38\.conda</span><br></pre></td></tr></table></figure>

<h2 id="其他管理方式"><a href="#其他管理方式" class="headerlink" title="其他管理方式"></a>其他管理方式</h2><p>管理依赖树：<code>pip install pipdeptree</code>，可查看每个依赖引用的其他依赖。</p>
<p>整体删除依赖及其引用：<code>pip install pip-autoremove</code>，防止遗漏。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>git-常用命令</title>
    <url>/2022/12/26/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<!--
注意：在 issues 使用锚点不能使用 [title](#title) 这种方式
 -->

<h1 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="目录">目录</a></h2><ul>
<li><a href="#初始化仓库">初始化仓库</a></li>
<li><a href="#全局配置用户名和邮箱地址">全局配置用户名和邮箱地址</a></li>
<li><a href="#删除全局配置的用户名和邮箱地址">删除全局配置的用户名和邮箱地址</a></li>
<li><a href="#对当前仓库配置用户名和邮箱地址">对当前仓库配置用户名和邮箱地址</a></li>
<li><a href="#查看全局配置的用户名和邮箱">查看全局配置的用户名和邮箱</a></li>
<li><a href="#查看当前仓库的用户名和邮箱">查看当前仓库的用户名和邮箱</a></li>
<li><a href="#生成-SSH-公钥">生成-SSH-公钥</a></li>
<li><a href="#关联远程仓库">关联远程仓库</a></li>
<li><a href="#把本地库的所有内容推送到远程库">把本地库的所有内容推送到远程库</a></li>
<li><a href="#从远程仓库克隆">从远程仓库克隆</a></li>
<li><a href="#将修改的文件提交到暂存区">将修改的文件提交到暂存区</a></li>
<li><a href="#将文件从暂存区提交到版本库">将文件从暂存区提交到版本库</a></li>
<li><a href="#修改-commit-的注释信息">修改-commit-的注释信息</a></li>
<li><a href="#查看当前提交状态">查看当前提交状态</a></li>
<li><a href="#查看文件具体变更内容">查看文件具体变更内容</a></li>
<li><a href="#查看提交的历史版本">查看提交的历史版本</a></li>
<li><a href="#查看操作命令历史记录">查看操作命令历史记录</a></li>
<li><a href="#版本回退">版本回退</a></li>
<li><a href="#撤销修改或提交">撤销修改或提交</a></li>
<li><a href="#删除文件">删除文件</a></li>
<li><a href="#分支操作">分支操作</a></li>
<li><a href="#对比两个分支差异">对比两个分支差异</a></li>
<li><a href="#保存工作现场">保存工作现场</a></li>
<li><a href="#查看已经保存工作现场">查看已经保存工作现场</a></li>
<li><a href="#恢复工作现场">恢复工作现场</a></li>
<li><a href="#获取远程仓库最新提交到本地">获取远程仓库最新提交到本地</a></li>
<li><a href="#打标签">打标签</a></li>
<li><a href="#查看所有标签">查看所有标签</a></li>
<li><a href="#补标签">补标签</a></li>
<li><a href="#查看标签信息">查看标签信息</a></li>
<li><a href="#删除标签">删除标签</a></li>
<li><a href="#将标签推送到远程">将标签推送到远程</a></li>
<li><a href="#清空缓存">清空缓存</a></li>
</ul>
<h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a><a name="初始化仓库">初始化仓库</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h2 id="全局配置用户名和邮箱地址"><a href="#全局配置用户名和邮箱地址" class="headerlink" title="全局配置用户名和邮箱地址"></a><a name="全局配置用户名和邮箱地址">全局配置用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email email@example.com</span><br></pre></td></tr></table></figure>

<p>注意：如果一台机器需要使用多个 ssh 公钥的方式，不应使用全局配置，而是每个仓库独立配置。否则提交时，远程仓库的 commit 记录会显示是全局用户做的提交操作。</p>
<h2 id="删除全局配置的用户名和邮箱地址"><a href="#删除全局配置的用户名和邮箱地址" class="headerlink" title="删除全局配置的用户名和邮箱地址"></a><a name="删除全局配置的用户名和邮箱地址">删除全局配置的用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global --unset user.name</span><br><span class="line">$ git config --global --unset user.email</span><br></pre></td></tr></table></figure>

<h2 id="对当前仓库配置用户名和邮箱地址"><a href="#对当前仓库配置用户名和邮箱地址" class="headerlink" title="对当前仓库配置用户名和邮箱地址"></a><a name="对当前仓库配置用户名和邮箱地址">对当前仓库配置用户名和邮箱地址</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name &quot;Your Name&quot;</span><br><span class="line">$ git config user.email email@example.com</span><br></pre></td></tr></table></figure>

<h2 id="查看全局配置的用户名和邮箱"><a href="#查看全局配置的用户名和邮箱" class="headerlink" title="查看全局配置的用户名和邮箱"></a><a name="查看全局配置的用户名和邮箱">查看全局配置的用户名和邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure>

<h2 id="查看当前仓库的用户名和邮箱"><a href="#查看当前仓库的用户名和邮箱" class="headerlink" title="查看当前仓库的用户名和邮箱"></a><a name="查看当前仓库的用户名和邮箱">查看当前仓库的用户名和邮箱</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="生成-SSH-公钥"><a href="#生成-SSH-公钥" class="headerlink" title="生成-SSH-公钥"></a><a name="生成-SSH-公钥">生成-SSH-公钥</a></h2><p>1、为 <code>git@example.com</code> 用户生成 SSH 公钥 <code>id_rsa</code> 文件，并保存在默认目录 <code>~/.ssh</code> 下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;git@example.com &quot; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>2、测试 username （默认用户名为 git）的 SSH 链接是否正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh –T &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a><a name="关联远程仓库">关联远程仓库</a></h2><p>添加名称为 origin 的关联信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:username/name.git</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/name.git</span><br></pre></td></tr></table></figure>

<p>查看全部关联的详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>

<h2 id="把本地库的所有内容推送到远程库"><a href="#把本地库的所有内容推送到远程库" class="headerlink" title="把本地库的所有内容推送到远程库"></a><a name="把本地库的所有内容推送到远程库">把本地库的所有内容推送到远程库</a></h2><p>1、通常添加参数 <code>-u</code>，简化提交远程库流程。例如：把本地的 master 分支和远程的 master 分支关联：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<p>2、使用参数 -u 关联后，推送最新修改命令简化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push</span><br></pre></td></tr></table></figure>

<h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a><a name="从远程仓库克隆">从远程仓库克隆</a></h2><p>1、默认方式，克隆全部分支，并指定本地文件夹名称为 dirName</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:username/repositoryname.git dirName</span><br></pre></td></tr></table></figure>

<p>2、克隆指定分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone -b branchname https://github.com/username/repositoryname.git</span><br></pre></td></tr></table></figure>

<p>git 支持多种协议，包括 https，但通过 ssh 支持的原生 git 协议速度最快。</p>
<h2 id="将修改的文件提交到暂存区"><a href="#将修改的文件提交到暂存区" class="headerlink" title="将修改的文件提交到暂存区"></a><a name="将修改的文件提交到暂存区">将修改的文件提交到暂存区</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add &lt;filename.xxx&gt; [-u][.][-A]</span><br></pre></td></tr></table></figure>

<p><code>-u</code> 参数：提交被修改（modified）和被删除（deleted）文件，不包括新文件（new）</p>
<p><code>.</code>参数：提交新文件（new）和被修改（modified）文件，不包括被删除（deleted）文件</p>
<p><code>-A</code>参数：提交所有变化，包括新文件（new）、被修改（modified）文件、被删除（deleted）文件</p>
<h2 id="将文件从暂存区提交到版本库"><a href="#将文件从暂存区提交到版本库" class="headerlink" title="将文件从暂存区提交到版本库"></a><a name="将文件从暂存区提交到版本库">将文件从暂存区提交到版本库</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m &quot;create new file&quot;</span><br></pre></td></tr></table></figure>

<h2 id="修改-commit-的注释信息"><a href="#修改-commit-的注释信息" class="headerlink" title="修改 commit 的注释信息"></a><a name="修改 commit 的注释信息">修改 commit 的注释信息</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="查看当前提交状态"><a href="#查看当前提交状态" class="headerlink" title="查看当前提交状态"></a><a name="查看当前提交状态">查看当前提交状态</a></h2><p>可以查看是否存在变更，但不能查看具体变更了什么内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h2 id="查看文件具体变更内容"><a href="#查看文件具体变更内容" class="headerlink" title="查看文件具体变更内容"></a><a name="查看文件具体变更内容">查看文件具体变更内容</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看提交的历史版本"><a href="#查看提交的历史版本" class="headerlink" title="查看提交的历史版本"></a><a name="查看提交的历史版本">查看提交的历史版本</a></h2><p>默认情况下显示的信息冗长，使用时通常 <code>--pretty=oneline</code> 参数。例子：仅显示提交的最近 3 条提交历史版本号，只能显示 head 指向的当前版本和之前的版本信息</p>
<p>1、本地仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline -3</span><br><span class="line">或</span><br><span class="line">$ git log --oneline -3</span><br></pre></td></tr></table></figure>

<p>2、远程仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log origin/master --pretty=oneline -3</span><br><span class="line">或</span><br><span class="line">$ git log origin/master --oneline -3</span><br></pre></td></tr></table></figure>

<h2 id="查看操作命令历史记录"><a href="#查看操作命令历史记录" class="headerlink" title="查看操作命令历史记录"></a><a name="查看操作命令历史记录">查看操作命令历史记录</a></h2><p>使用该命令可以某版本在执行回退后再次返回某版本，前提是不退出当前命令行窗口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a><a name="版本回退">版本回退</a></h2><p>1、回退到上一个版本：<code>$ git reset --hard HEAD^</code></p>
<p>2、回退到上上一个版本：<code>$ git reset --hard HEAD^^</code></p>
<p>3、回退到上 50 个版本：<code>$ git reset --hard HEAD~50</code></p>
<p>4、根据版本号回退，版本号不必输入完全，可区别即可：<code>$ git reset --hard &lt;versionCode&gt;</code></p>
<h2 id="撤销修改或提交"><a href="#撤销修改或提交" class="headerlink" title="撤销修改或提交"></a><a name="撤销修改或提交">撤销修改或提交</a></h2><p>1、修改后还没有被放到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;fileName.xxx&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、修改后已经放到暂存区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<p>3、修改后已经提交到版本库。此时，使用版本回退，回退到指定版本</p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><a name="删除文件">删除文件</a></h2><p>1、从暂存区删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<p>2、从暂存区恢复文件，只能恢复文件到最新版本，并丢失最近一次提交后修改的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;fileName.xxx&gt;</span><br></pre></td></tr></table></figure>

<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a><a name="分支操作">分支操作</a></h2><p>1、本地分支</p>
<ul>
<li>创建本地分支：<code>$ git branch feature-local</code></li>
<li>切换到本地分支：<code>$ git checkout feature-local</code></li>
<li>创建并同时切换到本地分支：<code>$ git checkout –b feature-local</code></li>
</ul>
<p>2、远程分支</p>
<ul>
<li>在远程开好分支 feature-branch，本地获取：<code>$ git checkout -b feature-local origin/feature-branch</code></li>
<li>本地创建名为 dev 的远程分支：<code>$ git checkout -b dev origin/dev</code></li>
<li>指定推送本地的 feature-local 分支到远程 origin 的 feature-branch 分支，若远程不存在该分支则新建：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$  git push origin feature-local:feature-branch</span><br></pre></td></tr></table></figure>

<p>3、查看所有分支（本地分支和远程分支）:<code>$ git branch -a</code></p>
<p>4、合并分支</p>
<p>要合并 dev 分支到 master 主分支。先切换到 master 分支后，执行命令：<code>$ git merge dev</code></p>
<p>注：通常合并分支时 git 会用 Fast forward 模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用 Fast forward 模式，git 就会在 merge 时生成一个新的 commit，这样，从分支历史上就可以看出分支信息：<code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p>
<p>5、查看分支历史：<code>$ git log --graph --pretty=oneline --abbrev-commit</code>，若内容过多，可仅显示前 10 条：<code>$ git log --oneline -10</code></p>
<p>6、删除分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>如果分支还没有合并，使用上条命令会出现提示阻止删除，此时需要强行删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -D &lt;branchName&gt;</span><br></pre></td></tr></table></figure>

<p>7、合并远程分支到本地</p>
<ul>
<li>在本地新建一个 temp 分支，并将远程 origin 仓库的 master 分支代码下载到本地 temp 分支：<code>git fetch origin master:tmp</code></li>
<li>比较本地代码与刚刚从远程下载下来的代码的区别：<code>git diff tmp</code></li>
<li>合并 temp 分支到本地的 master 分支：<code>git merge tmp</code></li>
<li>如果不想保留 temp 分支 可以用这步删除：<code>git branch -d temp</code></li>
</ul>
<p>注意：若提交历史不同，无法合并，参见「合并两个不同提交历史的分支」。</p>
<p>8、合并两个不同提交历史的分支</p>
<ul>
<li>将远程仓库的更新获取到本地分支 temp：<code>git fetch origin master:temp</code></li>
<li>此时若直接合并，因为提交历史不同，出现 fatal: refusing to merge unrelated histories 错误，需要增加参数，强制合并即可。：<code>git merge temp --allow-unrelated-histories</code></li>
</ul>
<p>9、切换分支时出现 “error: The following untracked working tree files……”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: The following untracked working tree files would be overwritten by checkout:</span><br><span class="line">        ……（涉及的文件列表）</span><br><span class="line">Please move or remove them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure>

<p>解决方式：删除上述涉及的文件即可。执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clean -d -fx</span><br></pre></td></tr></table></figure>

<p>git clean 参数</p>
<ul>
<li>-n 显示将要删除的文件和目录；</li>
<li>-x 删除忽略文件已经对 git 来说不识别的文件</li>
<li>-d 删除未被添加到 git 的路径中的文件</li>
<li>-f 强制运行</li>
</ul>
<h2 id="对比两个分支差异"><a href="#对比两个分支差异" class="headerlink" title="对比两个分支差异"></a><a name="对比两个分支差异">对比两个分支差异</a></h2><p>有 2 个分支：master、dev。</p>
<p>1、查看 dev 有，而 master 中没有的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log dev ^master</span><br></pre></td></tr></table></figure>

<p>2、查看 dev 中比 master 中多提交了哪些内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log master..dev</span><br></pre></td></tr></table></figure>

<p>3、只比较两个分支有什么不一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log dev...master</span><br></pre></td></tr></table></figure>

<p>在上述情况下，再显示出每个提交是在哪个分支上：<code>git log --left-right dev...master</code></p>
<p>根据 <code>–left-right dev…master</code> 的顺序，左箭头 &lt; 表示是 dev 分支提交；右箭头 &gt; 表示 master 分支提交</p>
<h2 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a><a name="保存工作现场">保存工作现场</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>

<p>注意：要提交到暂存区才可以执行 stash，可以执行多次 stash</p>
<h2 id="查看已经保存工作现场"><a href="#查看已经保存工作现场" class="headerlink" title="查看已经保存工作现场"></a><a name="查看已经保存工作现场">查看已经保存工作现场</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<h2 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a><a name="恢复工作现场">恢复工作现场</a></h2><ul>
<li><p>使用 git stash apply 恢复：<code>$ git stash apply stash@&#123;0&#125;</code>，但这种方式恢复后 stash 内容并不删除，需要用 git stash drop 来删除：<code>$ git stash drop stash@&#123;0&#125;</code></p>
</li>
<li><p>另一种方式是用 git stash pop，恢复的同时把 stash 内容也删了：<code>$ git stash pop stash@&#123;0&#125;</code></p>
</li>
</ul>
<h2 id="获取远程仓库最新提交到本地"><a href="#获取远程仓库最新提交到本地" class="headerlink" title="获取远程仓库最新提交到本地"></a><a name="获取远程仓库最新提交到本地">获取远程仓库最新提交到本地</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p>如果 git pull 提示 no tracking information，则说明本地分支和远程分支的链接关系没有创建，执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<p>抓取远程分支最新提交到本地分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin 远端分支名:本地分支名</span><br></pre></td></tr></table></figure>

<h2 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a><a name="打标签">打标签</a></h2><p>切换到需要打标签的分支上执行命令：<code>$ git tag v1.0</code></p>
<h2 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a><a name="查看所有标签">查看所有标签</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>

<h2 id="补标签"><a href="#补标签" class="headerlink" title="补标签"></a><a name="补标签">补标签</a></h2><p>查看历史提交，找到需要补标签的提交的 id，执行命令：<code>$ git tag v0.9 &lt;commitId&gt;</code>，也可以为标签添加说明，用 -a 指定标签名，-m 指定说明文字：<code>$ git tag -a v0.1 -m &quot;version 0.1&quot; &lt;commitId&gt;</code></p>
<p>注：标签不是按时间顺序列出，而是按字母排序的</p>
<h2 id="查看标签信息"><a href="#查看标签信息" class="headerlink" title="查看标签信息"></a><a name="查看标签信息">查看标签信息</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git show &lt;tagName&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a><a name="删除标签">删除标签</a></h2><ul>
<li>删除本地标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br></pre></td></tr></table></figure>

<ul>
<li>删除远程标签，要先删除本地标签，再 push</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">$ git push origin :refs/tags/v0.9</span><br></pre></td></tr></table></figure>

<h2 id="将标签推送到远程"><a href="#将标签推送到远程" class="headerlink" title="将标签推送到远程"></a><a name="将标签推送到远程">将标签推送到远程</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br></pre></td></tr></table></figure>

<p>一次性推送全部尚未推送到远程的本地标签：<code>$ git push origin –-tags</code></p>
<h2 id="清空缓存"><a href="#清空缓存" class="headerlink" title="清空缓存"></a><a name="清空缓存">清空缓存</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure>

<p>例如，当 ignore 文件更新时，如果不清空缓存，则不生效。</p>
<h2 id="命令行创建空白-gitignore-文件"><a href="#命令行创建空白-gitignore-文件" class="headerlink" title="命令行创建空白 .gitignore 文件"></a><a name="命令行创建空白 .gitignore 文件">命令行创建空白 .gitignore 文件</a></h2><p>进入库目录，命令行执行 <code>touch .gitignore</code> 即可。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-问题备忘</title>
    <url>/2022/12/26/git-%E9%97%AE%E9%A2%98%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="git-删除远程仓库文件"><a href="#git-删除远程仓库文件" class="headerlink" title="git 删除远程仓库文件"></a>git 删除远程仓库文件</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>git 提交到远程仓库后发现有遗漏的文件未添加到 <code>.ignore</code> 文件中</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>例如不需要提交 target 目录，可执行 <code>git rm -r --cached target</code>，重新 commit 和 push 即可</p>
<p>说明：</p>
<ul>
<li><p>删除工作区文件，并且将这次删除放入暂存区，<code>git rm [file1] [file2] ...</code></p>
</li>
<li><p>停止追踪指定文件，但该文件会保留在工作区，<code>git rm --cached [file]</code></p>
</li>
</ul>
<h2 id="git-提交时出现警告-LF-will-be-replaced-by-CRLF-in"><a href="#git-提交时出现警告-LF-will-be-replaced-by-CRLF-in" class="headerlink" title="git 提交时出现警告 LF-will-be-replaced-by-CRLF-in"></a>git 提交时出现警告 LF-will-be-replaced-by-CRLF-in</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>提交时出现警告：<code>warning: LF will be replaced by CRLF </code>，但是不影响提交。</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>配置选项修改，把 core.autocrlf 设置成 false。其他选项如下：<ul>
<li>git config –global core.autocrlf true #默认值</li>
<li>git config –global core.autocrlf input #从库中迁出代码不转换</li>
<li>git config –global core.autocrlf false  #不转换</li>
</ul>
</li>
</ul>
<h2 id="git-提交时中文文件名显示的解决方案"><a href="#git-提交时中文文件名显示的解决方案" class="headerlink" title="git 提交时中文文件名显示的解决方案"></a>git 提交时中文文件名显示的解决方案</h2><h3 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h3><p>git 提交时中文显示为乱码，有碍观瞻</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">117 files changed, 11670 insertions(+), 5 deletions(-)</span><br><span class="line"> create mode 100644 &quot;content/Excel/SUMIFS \345\207\275\346\225\260.md&quot;</span><br><span class="line"> create mode 100644 &quot;content/Excel/VBA \344\275\277\347\224\250 ReDim \345\256\236\347\216\260\344\272\214\347\273\264\345\212\250\346\200\201\346\225\260\347\273\204.md&quot;</span><br><span class="line"> create mode 100644 &quot;content/Excel/VBA \345\210\240\351\231\244\346\211\200\346\234\211\345\267\245\344\275\234\350\241\250\347\232\204\347\251\272\350\241\214.md&quot;</span><br></pre></td></tr></table></figure>

<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>执行 <code>git config --global core.quotepath false</code> 即可，上述提交的文件名已经可以辨认</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">117 files changed, 11670 insertions(+), 5 deletions(-)</span><br><span class="line"> create mode 100644 content/Excel/SUMIFS 函数.md</span><br><span class="line"> create mode 100644 content/Excel/VBA 使用 ReDim 实现二维动态数组.md</span><br><span class="line"> create mode 100644 content/Excel/VBA 删除所有工作表的空行.md</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore-文件通用参考版本</title>
    <url>/2022/12/26/gitignore-%E6%96%87%E4%BB%B6%E9%80%9A%E7%94%A8%E5%8F%82%E8%80%83%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h2><ul>
<li><code>/mtk/</code>，过滤整个文件夹</li>
<li><code>*.zip</code>，过滤所有.zip 文件</li>
<li><code>/mtk/do.c</code>，过滤某个具体文件</li>
</ul>
<h2 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h2><p>只需要管理 <code>/mtk/</code> 目录中的 one.txt 文件，这个目录中的其他文件都不需要管理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mtk/</span><br><span class="line">!/mtk/one.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
</blockquote>
<ol>
<li>git 对于 .ignore 配置文件是按行从上到下进行规则匹配的，如果前面的规则匹配的范围更大，则后面的规则将不会生效。</li>
<li>如果在创建 .gitignore 文件之前 push，即使在 .gitignore 文件中写入新的过滤规则，这些规则也不会起作用，Git 仍然会对所有文件进行版本管理。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.</span><br><span class="line"></span><br><span class="line">.gradle</span><br><span class="line">!gradle/wrapper/gradle-wrapper.jar</span><br><span class="line">!**/src/main/**/build/</span><br><span class="line">!**/src/test/**/build/</span><br><span class="line">HELP.md</span><br><span class="line"></span><br><span class="line"># STS</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line"># IntelliJ IDEA</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line">out/</span><br><span class="line">!**/src/main/**/out/</span><br><span class="line">!**/src/test/**/out/</span><br><span class="line"></span><br><span class="line"># NetBeans</span><br><span class="line">/nbproject/private/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br><span class="line"></span><br><span class="line"># VS Code</span><br><span class="line">.vscode/</span><br><span class="line"></span><br><span class="line"># dependencies</span><br><span class="line">/node_modules</span><br><span class="line">/.pnp</span><br><span class="line">.pnp.js</span><br><span class="line"></span><br><span class="line"># testing</span><br><span class="line">/coverage</span><br><span class="line"></span><br><span class="line"># production</span><br><span class="line">/build</span><br><span class="line"></span><br><span class="line"># misc</span><br><span class="line">.DS_Store</span><br><span class="line">.env.local</span><br><span class="line">.env.development.local</span><br><span class="line">.env.test.local</span><br><span class="line">.env.production.local</span><br><span class="line"></span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle-问题备忘</title>
    <url>/2022/12/26/gradle-%E9%97%AE%E9%A2%98%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ol>
<li>下载</li>
<li>解压</li>
<li>配置系统变量 <code>%GRADLE_HOME%</code> 指向解压路径，配置 path 变量，添加 <code>%GRADLE_HOME%\bin</code>。</li>
<li>测试，输入命令 <code>gradle -v</code> 提示版本说明配置成功。</li>
</ol>
<blockquote>
<p>环境变量也可以不配置，在 IDE 中（如 Idea）指定路径即可。</p>
</blockquote>
<h2 id="二、异常及报错的解决方案汇总"><a href="#二、异常及报错的解决方案汇总" class="headerlink" title="二、异常及报错的解决方案汇总"></a>二、异常及报错的解决方案汇总</h2><h3 id="⭐-本地仓库配置参考"><a href="#⭐-本地仓库配置参考" class="headerlink" title="⭐ 本地仓库配置参考"></a>⭐ 本地仓库配置参考</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⭐-指定编译版本"><a href="#⭐-指定编译版本" class="headerlink" title="⭐ 指定编译版本"></a>⭐ 指定编译版本</h3><p>可选，在 Idea 中可独立配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sourceCompatibility = 1.8</span><br><span class="line">targetCompatibility = 1.8</span><br></pre></td></tr></table></figure>

<h3 id="⭐-显示指定依赖版本"><a href="#⭐-显示指定依赖版本" class="headerlink" title="⭐ 显示指定依赖版本"></a>⭐ 显示指定依赖版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">configurations.all &#123;</span><br><span class="line">    resolutionStrategy &#123;</span><br><span class="line">        force &#x27;org.apache.tomcat.embed:tomcat-embed-core:8.5.39&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="⭐-如果使用了中文注释，编译时报错"><a href="#⭐-如果使用了中文注释，编译时报错" class="headerlink" title="⭐ 如果使用了中文注释，编译时报错"></a>⭐ 如果使用了中文注释，编译时报错</h3><p>添加 withType，编译时用 UTF-8 处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = &quot;UTF-8&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gradle-强制刷新依赖"><a href="#Gradle-强制刷新依赖" class="headerlink" title="Gradle 强制刷新依赖"></a>Gradle 强制刷新依赖</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>旧项目更换环境时由于 gradle 版本不一致导致项目初始化失败。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>强制刷新依赖，步骤如下：</p>
<p>1、删除 <code>.gradle</code> 目录，其中包含了旧版本的文件。</p>
<p>2、修改 <code>gradle-wrapper.properties</code> 文件的版本号，内容如下。例如旧环境使用 6.0.1，新环境使用 6.7.1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">distributionBase=<span class="variable constant_">GRADLE_USER_HOME</span></span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">distributionUrl=https\:<span class="comment">//services.gradle.org/distributions/gradle-6.7.1-bin.zip</span></span><br><span class="line">zipStoreBase=<span class="variable constant_">GRADLE_USER_HOME</span></span><br><span class="line">zipStorePath=wrapper/dists</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：仅修改版本即可，其他内容不变。</p>
</blockquote>
<p>3、项目目录下执行如下命令</p>
<ul>
<li><p>macOS：<code>./gradlew build --refresh-dependencies</code></p>
</li>
<li><p>windows：<code>gradlew build --refresh-dependencies</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ./gradlew build --refresh-dependencies</span><br><span class="line"></span><br><span class="line"><span class="title class_">Welcome</span> to <span class="title class_">Gradle</span> <span class="number">6.7</span><span class="number">.1</span>!</span><br><span class="line"></span><br><span class="line"><span class="title class_">Here</span> are the highlights <span class="keyword">of</span> <span class="variable language_">this</span> <span class="attr">release</span>:</span><br><span class="line"> - <span class="title class_">File</span> system watching is ready <span class="keyword">for</span> production use</span><br><span class="line"> - <span class="title class_">Declare</span> the version <span class="keyword">of</span> <span class="title class_">Java</span> your build requires</span><br><span class="line"> - <span class="title class_">Java</span> <span class="number">15</span> support</span><br><span class="line"></span><br><span class="line"><span class="title class_">For</span> more details see <span class="attr">https</span>:<span class="comment">//docs.gradle.org/6.7.1/release-notes.html</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="title class_">Task</span> :test</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.262</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED paused.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] o.<span class="property">s</span>.<span class="property">s</span>.<span class="property">quartz</span>.<span class="property">SchedulerFactoryBean</span>        : <span class="title class_">Shutting</span> down <span class="title class_">Quartz</span> <span class="title class_">Scheduler</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED shutting down.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED paused.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.263</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] org.<span class="property">quartz</span>.<span class="property">core</span>.<span class="property">QuartzScheduler</span>          : <span class="title class_">Scheduler</span> quartzScheduler_$_NON_CLUSTERED shutdown complete.</span><br><span class="line"><span class="number">2021</span>-<span class="number">01</span>-<span class="number">21</span> <span class="number">04</span>:<span class="number">03</span>:<span class="number">10.264</span>  <span class="variable constant_">INFO</span> <span class="number">633</span> --- [extShutdownHook] o.<span class="property">s</span>.<span class="property">s</span>.<span class="property">concurrent</span>.<span class="property">ThreadPoolTaskExecutor</span>  : <span class="title class_">Shutting</span> down <span class="title class_">ExecutorService</span> <span class="string">&#x27;applicationTaskExecutor&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">BUILD</span> <span class="variable constant_">SUCCESSFUL</span> <span class="keyword">in</span> 1m 18s</span><br><span class="line"><span class="number">6</span> actionable <span class="attr">tasks</span>: <span class="number">6</span> executed</span><br></pre></td></tr></table></figure>

<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><code>gradlew -? 或 -h 或 --help</code>，显示帮助信息，即会打印可选参数及参数说明信息；</p>
<p><code>gradlew --version</code>，版本号（会打印工程用的 Gradle 的版本号、Kotlin、Groovy、Ant、JVM、OS 等的版本号）；</p>
<p><code>gradlew tasks --all</code>，查看所有任务，包括缓存任务等；</p>
<p><code>gradlew clean</code>，清除工程目录下的 build 文件夹；</p>
<p><code>gradlew build</code>， 检查依赖并编译打包，debug、release 环境的包都会打出来；</p>
<p><code>gradlew assemble**_</code>，编译指定的包，如 Debug 包（gradlew assembleDebug）、Release 包（gradlew assembleRelease）、渠道包（gradlew assembleOemRelease&#x2F;assembleOemDebug）、定制的版本等等；</p>
<p><code>gradlew install_**</code>，编译并安装指定的包，如 Debug 包（gradlew installDebug）、Release 包（gradlew installOemRelease&#x2F;installOemDebug）、定制的版本等等；</p>
<p><code>gradlew uninstall\*\*</code>，卸载已安装的指定模式的包，如 Debug 包（gradlew uninstallDebug）、Release 包（gradlew uninstallRelease）、渠道包（gradlew uninstallOemRelease&#x2F;uninstallOemDebug）、定制的版本等等；</p>
<p><code>gradlew :模块名称:dependencies</code>，查看包依赖关系，如 <code>gradlew :app:dependencies</code>；</p>
<p><code>gradlew build -i 或 --info -d 或 --debug -s 或 --stacktrace</code>，编译（build）并打印 debug 模式和 info 等级的日志及所用异常的堆栈信息（–stacktrace）；</p>
<p><code>gradlew --refresh-dependencies</code>，强制刷新依赖，即检查依赖是否有更新比如动态版本、SHA1 进行本地 cache 和远程仓库散列码的对比等，有更新则下载更新进行构建；使用这种方式可以避免手动删除 cache；</p>
<p><code>gradlew clean build --refresh-dependencies</code>，组合指令，清除构建（gradlew clean）并重新构建（gradlew build），同时强制刷新依赖（gradlew –refresh-dependencies）；</p>
<p><code>gradlew --offline</code>，离线模式，即让 Gradle 只使用本地 cache 里的依赖，如果 cache 中没有也不会更新依赖，而是提示编译失败；</p>
<p><code>--info</code>，打印堆栈信息；</p>
<p><code>gradlew --daemon</code>，守护进程，使用 Gradle 的守护进程构建，能够提高构建效率，如果守护进程没启动或现有的都处于忙碌状态，就启动一个守护进程；</p>
<p><code>gradlew --no-daemon</code>，如果你已经配置为使用守护进程构建，可以使用该选项本次不用守护进程构建；</p>
<p><code>gradlew --continuous</code>，连续构建，即任务队列中即使某个任务失败，不会终止执行，而是会继续执行下一个任务；</p>
<p><code>gradlew --parallel --parallel-threads=N</code>，并行编译；</p>
<p><code>gradlew --configure-on-demand</code>，按需编译。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>gradlew 的指令有简写的方式：</p>
<p><code>gradlew --versio n</code> 可以用简写方式 <code>gradlew -v 代替</code></p>
<p><code>gradlew --hel p</code> 可以用简写方式 <code>gradlew - h</code> 或 <code>gradlew -?</code> 代替</p>
<p><code>gradlew --no-rebuil d</code> 可以用简写方式 <code>gradlew - a</code> 代替</p>
<p><code>gradlew --debu g</code> 可以用简写方式 <code>gradlew - d</code> 代替</p>
<p><code>gradlew --stacktrac e</code> 可以用简写方式 <code>gradlew -s</code> 代替</p>
<p>可以发现简写的指令只需要一个减号（<code>-</code>）开头，没有简写的指令需要用两个减号（即 <code>--</code>）开头。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-Navicat-远程连接阿里云服务器的-MySQL-数据库</title>
    <url>/2022/12/07/%E4%BD%BF%E7%94%A8-Navicat-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>使用 Navicat 连接阿里云远程 MySQL 数据库。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1、开放权限"><a href="#1、开放权限" class="headerlink" title="1、开放权限"></a>1、开放权限</h3><p>登录 MySql，此时用命令指定用户名 root 可以通过密码 123456 访问所有数据库，之后刷新权限。相应的命令及结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27; WITH GRANT OPTION;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="2、设置服务器安全组的端口放行规则"><a href="#2、设置服务器安全组的端口放行规则" class="headerlink" title="2、设置服务器安全组的端口放行规则"></a>2、设置服务器安全组的端口放行规则</h3><p><strong>ECS 云服务器安全组设置如下：</strong></p>
<img src="/2022/12/07/%E4%BD%BF%E7%94%A8-Navicat-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93/1.png" class="">

<p><strong>轻量应用服务器防火墙设置如下：</strong></p>
<img src="/2022/12/07/%E4%BD%BF%E7%94%A8-Navicat-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93/2.png" class="">

<h3 id="3、设置-Navicat"><a href="#3、设置-Navicat" class="headerlink" title="3、设置 Navicat"></a>3、设置 Navicat</h3><p>进入 Navicat，新建连接，在「常规」选项卡中输入开放权限时的信息，用户名：root；密码：123456</p>
<img src="/2022/12/07/%E4%BD%BF%E7%94%A8-Navicat-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-MySQL-%E6%95%B0%E6%8D%AE%E5%BA%93/3.png" class="">
]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-github+Action-部署-Hexo-博客</title>
    <url>/2022/11/30/%E4%BD%BF%E7%94%A8-github+Action-%E9%83%A8%E7%BD%B2-Hexo-%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为便于叙述，统一说明如下：</p>
<ul>
<li>博客 github 源码仓库默认分支为 main，ssh 地址：<code>git@github.com:username/blog.git</code></li>
<li><code>username.github.io</code>：博客部署仓库，默认分支为 main</li>
<li><code>hexo_deploy</code>：本地私钥文件</li>
<li>&#96;hexo_deploy.pub：本地公钥文件</li>
<li>主题以 NexT 8.13.2 为例</li>
</ul>
<blockquote>
<p>本地 hexo 安装、主题部署流程较简单，步骤省略。</p>
</blockquote>
<h2 id="1、配置本地博客源代码库"><a href="#1、配置本地博客源代码库" class="headerlink" title="1、配置本地博客源代码库"></a>1、配置本地博客源代码库</h2><p>在本地博客源代码仓库根目录 <code>_config.yml</code> 文件中增加如下部署配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：github 目前仅允许 ssh 提交，部署仓库必须为 ssh 地址</p>
</blockquote>
<h2 id="2、配置专用密钥对"><a href="#2、配置专用密钥对" class="headerlink" title="2、配置专用密钥对"></a>2、配置专用密钥对</h2><p>本地重新生成一组密钥对，如 <code>hexo_deploy.pub</code> 与 <code>hexo_deploy</code>。私钥配置到 github 源码仓库的 <code>repository secret</code>，公钥配置到 <code>username.github.io</code> 部署仓库的 <code>Deploy keys</code>。该密钥对专用于「源码仓库」与「部署仓库」之间的 Action 自动部署。</p>
<blockquote>
<p>github 源码库新建后即可配置：依次进入 <code>Settings -&gt; Secrets -&gt; Actions -&gt; New repository secret</code>，名称取 <code>HEXO_DEPLOY_SECRET</code>，值取自 <code>hexo_deploy</code> 内容；<code>username.github.io.git</code> 部署仓库配置步骤略。</p>
</blockquote>
<p>也可以拿用户公钥 <code>SSH keys</code>（可访问全部仓库）及其对应的私钥完成该步骤，但是用户公钥不一致时（比如办公室和家里使用的用户公钥不同，除非复制同一份密钥对），Action 自动部署的私钥也要更改，使用专用密钥对可避免这个问题。</p>
<h2 id="3、创建-Action"><a href="#3、创建-Action" class="headerlink" title="3、创建 Action"></a>3、创建 Action</h2><p>在本地博客源代码库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，参考内容如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">hexo-blog-deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">username</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">username@gmail.com</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">username/username.github.io</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">19.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_SECRET:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_SECRET&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="comment"># 配置私钥，否则无法访问部署库，提示 git@github.com: Permission denied (publickey).</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">&quot;$HEXO_DEPLOY_SECRET&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># 设置用户名和邮箱，否则提示 Please tell me who you are.</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          npm install hexo-deployer-git --save</span></span><br><span class="line"><span class="string">          # 全局搜索插件</span></span><br><span class="line"><span class="string">          npm install hexo-generator-searchdb --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h2 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h2><h2 id="（可选）部署留言栏-Utterances"><a href="#（可选）部署留言栏-Utterances" class="headerlink" title="（可选）部署留言栏 Utterances"></a>（可选）部署留言栏 Utterances</h2><p>安装 github 应用： <code>https://github.com/apps/utterances</code></p>
<p>next 最新版本已经集成 Utterances，因此不需要复制安装完成后的模板，直接在主题文件根目录下设置 <code>_config.yml</code> 文件即可：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Utterances</span></span><br><span class="line"><span class="comment"># For more information: https://utteranc.es</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">username/username.github.io</span> <span class="comment"># Github repository owner and name</span></span><br><span class="line">  <span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># Available values: github-light | github-dark | preferred-color-scheme | github-dark-orange | icy-dark | dark-blue | photon-dark | boxy-light</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure>

<h2 id="（可选）部署留言栏-giscus"><a href="#（可选）部署留言栏-giscus" class="headerlink" title="（可选）部署留言栏 giscus"></a>（可选）部署留言栏 giscus</h2><p>进入官网（<code>https://giscus.app/</code>）可拿到一段已经填充配置内容的 <code>&lt;script&gt;</code> 标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://giscus.app/client.js&quot;</span><br><span class="line">    data-repo=&quot;[在此输入仓库]&quot;</span><br><span class="line">    data-repo-id=&quot;[在此输入仓库 ID]&quot;</span><br><span class="line">    data-category=&quot;[在此输入分类名]&quot;</span><br><span class="line">    data-category-id=&quot;[在此输入分类 ID]&quot;</span><br><span class="line">    data-mapping=&quot;pathname&quot;</span><br><span class="line">    data-strict=&quot;0&quot;</span><br><span class="line">    data-reactions-enabled=&quot;1&quot;</span><br><span class="line">    data-emit-metadata=&quot;0&quot;</span><br><span class="line">    data-input-position=&quot;bottom&quot;</span><br><span class="line">    data-theme=&quot;preferred_color_scheme&quot;</span><br><span class="line">    data-lang=&quot;zh-CN&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果要在每一篇文章后添加评论功能，以 next 主题为例，仅供参考。进入 <code>themes/next/layout/_macro/post.njk</code> 文件，找到模板中「文章末尾」（注释标志为 <code>END POST BODY</code>，如下所示），将上述片段加入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;#####################&#125;</span><br><span class="line">&#123;### <span class="variable constant_">END</span> <span class="variable constant_">POST</span> <span class="variable constant_">BODY</span> ###&#125;</span><br><span class="line">&#123;#####################&#125;</span><br><span class="line">&lt;footer <span class="keyword">class</span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span><br><span class="line">  &#123;%- <span class="keyword">if</span> is_index %&#125;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;post-eof&quot;</span> style=<span class="string">&quot;margin:20px auto 20px;width:100%;background: transparent;border-top: 1px solid #e2e0e0&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">    &#123;&#123;- <span class="title function_">next_inject</span>(<span class="string">&#x27;postBodyEnd&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> post.<span class="property">reward_settings</span>.<span class="property">enable</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-reward.njk&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.<span class="property">creative_commons</span>.<span class="property">license</span> and theme.<span class="property">creative_commons</span>.<span class="property">post</span> and post.<span class="property">copyright</span> !== <span class="literal">false</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-copyright.njk&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">    &#123;%- <span class="keyword">if</span> theme.<span class="property">follow_me</span> %&#125;</span><br><span class="line">      &#123;&#123; <span class="title function_">partial</span>(<span class="string">&#x27;_partials/post/post-followme.njk&#x27;</span>, &#123;&#125;, &#123;<span class="attr">cache</span>: theme.<span class="property">cache</span>.<span class="property">enable</span>&#125;) &#125;&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line">    &#123;###   add giscus  ###&#125;</span><br><span class="line">    &#123;#####################&#125;</span><br><span class="line"></span><br><span class="line">    &lt;script src=<span class="string">&quot;https://giscus.app/client.js&quot;</span></span><br><span class="line">        data-repo=<span class="string">&quot;[在此输入仓库]&quot;</span></span><br><span class="line">        data-repo-id=<span class="string">&quot;[在此输入仓库 ID]&quot;</span></span><br><span class="line">        data-category=<span class="string">&quot;[在此输入分类名]&quot;</span></span><br><span class="line">        data-category-id=<span class="string">&quot;[在此输入分类 ID]&quot;</span></span><br><span class="line">        data-mapping=<span class="string">&quot;pathname&quot;</span></span><br><span class="line">        data-strict=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-reactions-enabled=<span class="string">&quot;1&quot;</span></span><br><span class="line">        data-emit-metadata=<span class="string">&quot;0&quot;</span></span><br><span class="line">        data-input-position=<span class="string">&quot;bottom&quot;</span></span><br><span class="line">        data-theme=<span class="string">&quot;preferred_color_scheme&quot;</span></span><br><span class="line">        data-lang=<span class="string">&quot;zh-CN&quot;</span></span><br><span class="line">        crossorigin=<span class="string">&quot;anonymous&quot;</span></span><br><span class="line">        <span class="keyword">async</span>&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &#123;%- <span class="keyword">if</span> post.<span class="property">tags</span> and post.<span class="property">tags</span>.<span class="property">length</span> %&#125;</span><br><span class="line">      &#123;%- set tag_indicate = <span class="string">&#x27;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;&#x27;</span> <span class="keyword">if</span> theme.<span class="property">tag_icon</span> <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span> %&#125;</span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span><br><span class="line">        &#123;%- <span class="keyword">for</span> tag <span class="keyword">in</span> post.<span class="property">tags</span>.<span class="title function_">toArray</span>() %&#125;</span><br><span class="line">          &lt;a href=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> rel=<span class="string">&quot;tag&quot;</span>&gt;&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.<span class="property">name</span> &#125;&#125;&lt;/a&gt;</span><br><span class="line">        &#123;%- endfor %&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（可选）部署域名"><a href="#（可选）部署域名" class="headerlink" title="（可选）部署域名"></a>（可选）部署域名</h2><p>参考官方文档：<a href="%60https://docs.github.com/cn/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages%60">验证用户站点的域</a></p>
<blockquote>
<p>注意：需要在 blog 源代码库 source 目录下放置 CNAME 文件。之后步骤按官方文档进行</p>
</blockquote>
]]></content>
      <categories>
        <category>默认分类</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-orphan-参数创建独立空白分支</title>
    <url>/2022/12/26/%E4%BD%BF%E7%94%A8-orphan-%E5%8F%82%E6%95%B0%E5%88%9B%E5%BB%BA%E7%8B%AC%E7%AB%8B%E7%A9%BA%E7%99%BD%E5%88%86%E6%94%AF/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>创建一个文件夹 testbranch，添加一个文件 main.txt。执行 <code>git init</code> 初始化，执行提交。此时 master 分支有了第一个提交记录：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git init</span><br><span class="line">已初始化空的 <span class="title class_">Git</span> 仓库于 /<span class="title class_">Users</span>/userName/<span class="title class_">Desktop</span>/testbranch/.<span class="property">git</span>/</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git status</span><br><span class="line">位于分支 master</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 以包含要提交的内容）</span><br><span class="line">	main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">提交为空，但是存在尚未跟踪的文件（使用 <span class="string">&quot;git add&quot;</span> 建立跟踪）</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;init&quot;</span></span><br><span class="line">[master（根提交） cd00bbe] init</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">0</span> <span class="title function_">insertions</span>(+), <span class="number">0</span> <span class="title function_">deletions</span>(-)</span><br><span class="line"> create mode <span class="number">100644</span> main.<span class="property">txt</span></span><br></pre></td></tr></table></figure>

<p>随意修改一下文件内容，再作一次提交。此时查看 master 的提交状态，可以看到有两次提交：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;again&quot;</span></span><br><span class="line">[master 9d01aa3] again</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> <span class="title function_">insertion</span>(+)</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">9d01aa3ed29dc9caa1b67175e1e2c7ce4db21712 (<span class="variable constant_">HEAD</span> -&gt; master) again</span><br><span class="line">cd00bbe75405be350fd7c4cc06d4b304ababe8c5 init</span><br></pre></td></tr></table></figure>

<p>此时新建一个分支，other-normal。使用 <code>git branch -a</code> 后可立刻看到新建的分支。再查看提交，发现与 master 是一致的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout -b other-normal</span><br><span class="line">切换到一个新分支 <span class="string">&#x27;other-normal&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">* other-normal</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">9d01aa3ed29dc9caa1b67175e1e2c7ce4db21712 (<span class="variable constant_">HEAD</span> -&gt; other-normal, master) again</span><br><span class="line">cd00bbe75405be350fd7c4cc06d4b304ababe8c5 init</span><br></pre></td></tr></table></figure>

<p>返回 master，使用 <code>git checkout --orphan other-orphan</code> 新建并切换到分支 other-orphan。再次使用 <code>git branch -a</code>，发现不能看到新建的分支。使用 <code>git log</code> 查看提交情况，发现当前确实在 other-orphan 分支上。</p>
<blockquote>
<p>注意：使用 –orphan 参数建立的分支必须要有提交后，才真正创建。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout master</span><br><span class="line">切换到分支 <span class="string">&#x27;master&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git checkout --orphan other-orphan</span><br><span class="line">切换到一个新分支 <span class="string">&#x27;other-orphan&#x27;</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">  other-normal</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log</span><br><span class="line"><span class="attr">fatal</span>: 您的当前分支 <span class="string">&#x27;other-orphan&#x27;</span> 尚无任何提交</span><br></pre></td></tr></table></figure>

<p>将 other-orphan 分支的 main.txt 文件改名为 orphan.txt 并提交，再次查看全部分支，已经可以看到 other-orphan，而且提交情况也是独立的，与 master 分支无关。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">macName</span>:testbranch userName$ git status</span><br><span class="line">位于分支 other-orphan</span><br><span class="line"></span><br><span class="line">尚无提交</span><br><span class="line"></span><br><span class="line">要提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git rm --cached &lt;文件&gt;...&quot;</span> 以取消暂存）</span><br><span class="line">	新文件：   main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">尚未暂存以备提交的变更：</span><br><span class="line">  （使用 <span class="string">&quot;git add/rm &lt;文件&gt;...&quot;</span> 更新要提交的内容）</span><br><span class="line">  （使用 <span class="string">&quot;git restore &lt;文件&gt;...&quot;</span> 丢弃工作区的改动）</span><br><span class="line">	删除：     main.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line">未跟踪的文件:</span><br><span class="line">  （使用 <span class="string">&quot;git add &lt;文件&gt;...&quot;</span> 以包含要提交的内容）</span><br><span class="line">	orphan.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git add .</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git commit -m <span class="string">&quot;orphan init&quot;</span></span><br><span class="line">[other-orphan（根提交） c2533ce] orphan init</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> <span class="title function_">insertion</span>(+)</span><br><span class="line"> create mode <span class="number">100644</span> orphan.<span class="property">txt</span></span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git branch -a</span><br><span class="line">  master</span><br><span class="line">  other-normal</span><br><span class="line">* other-orphan</span><br><span class="line"><span class="attr">macName</span>:testbranch userName$ git log --pretty=oneline -<span class="number">3</span></span><br><span class="line">c2533cec5738396e99510ff8566f002547e5e000 (<span class="variable constant_">HEAD</span> -&gt; other-orphan) orphan init</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用-push-提交到远程仓库出现-The-requested-URL-returned-error-403-错误</title>
    <url>/2022/12/26/%E4%BD%BF%E7%94%A8-push-%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%87%BA%E7%8E%B0-The-requested-URL-returned-error-403-%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>曾用过一个 github 账号进行项目提交，现在使用另一个帐号在同一台机器进行提交时出现错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Permission to userName/repositorieName.git denied to OldUserName.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/userName/repositorieName.git/&#x27;: The requested URL returned error: 403</span><br></pre></td></tr></table></figure>

<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>使用第一个账号提交时，系统保存了该账号的用户信息。在使用新帐号提交时，与已保存的用户信息不一致，所以报错。</p>
<h2 id="win10-解决方案"><a href="#win10-解决方案" class="headerlink" title="win10 解决方案"></a>win10 解决方案</h2><ul>
<li>打开 cmd，输入命令：<code>rundll32.exe keymgr.dll,KRShowKeyMgr</code>，出现「存储的用户名和密码」窗口；</li>
<li>将 github 相关的条目删除；</li>
<li>重新执行提交命令，按提示输入账户名及密码后，即可提交成功。</li>
</ul>
<h2 id="macOS-解决方案"><a href="#macOS-解决方案" class="headerlink" title="macOS 解决方案"></a>macOS 解决方案</h2><ul>
<li>进入<code>钥匙串</code>，在「登录」下找到「github.com」条目并删除；</li>
<li>重新执行提交命令，按提示输入账户名及密码后，即可提交成功。</li>
</ul>
<h2 id="通用解决方案"><a href="#通用解决方案" class="headerlink" title="通用解决方案"></a>通用解决方案</h2><p>进入库目录，找到 .git&#x2F;config 文件（macOS 可用终端执行 <code>vi .git/config</code> 直接进入修改），参考内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">	repositoryformatversion = 0</span><br><span class="line">	filemode = true</span><br><span class="line">	bare = false</span><br><span class="line">	logallrefupdates = true</span><br><span class="line">	ignorecase = true</span><br><span class="line">	precomposeunicode = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url = https://github.com/userName/repositorieName.git</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;other&quot;]</span><br><span class="line">	remote = origin</span><br><span class="line">	merge = refs/heads/other</span><br></pre></td></tr></table></figure>

<p>将用户名加入 [remote “origin”] 中的 url，最终修改为 <code>url = https://userName@github.com/userName/repositorieName.git</code>，接下来在提交项目时会要求输入密码。此后，系统将保存密码信息，以后这个库的提交将不再要求输入密码，也不会出现 403 错误。</p>
<h2 id="通用终极解决方案"><a href="#通用终极解决方案" class="headerlink" title="通用终极解决方案"></a>通用终极解决方案</h2><p>在 clone 项目时就将用户名加入路径，原路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b other https://github.com/userName/repositoryName.git</span><br></pre></td></tr></table></figure>

<p>添加 <code>userName@</code>，该路径修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b other https://userName@github.com/userName/repositoryName.git</span><br></pre></td></tr></table></figure>

<p>接下来在提交项目时会要求输入密码。此后，系统将保存密码信息，以后这个库的提交将不再要求输入密码，也不会出现 403 错误。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用多个-SSH-公钥连接多个-GitHub-远程仓库</title>
    <url>/2022/12/26/%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA-SSH-%E5%85%AC%E9%92%A5%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA-GitHub-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>机器 A 一直使用账户 user1 的 SSH 公钥连接 github。现在新建账户 user2，希望在机器 A 也能够以 SSH 方式连接到 github</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>默认情况下，即机器 A 一直使用账户 user1。此时使用命令 <code>$ git remote -v</code> 可以查看当前的远程仓库关联如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin  git@github.com:user1/repositorieName1.git (fetch)</span><br><span class="line">origin  git@github.com:user1/repositorieName1.git (push)</span><br></pre></td></tr></table></figure>

<p>如果 user2 新建一个名为 repositorieName2 的仓库，此时想在机器 A 上使用命令 <code>$ git push -u origin master</code> 提交到远程仓库，会出现如下的错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR: Permission to user2/repositorieName2.git denied to user2.</span><br><span class="line">fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure>

<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>机器 A 当前的公钥是 user1 的，user2 没有权限使用；想在 user2 的 github 账户中添加 user1 的公钥？也是不可能的，会提示公钥已经被使用。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>在 user2 的项目目录中打开命令行，执行命令：<code>ssh-keygen -t ed25519 -C &quot;second@email.com&quot; -f ~/.ssh/id_rsa_for_user2</code>，生成专属 user2 的密钥对，再进入 user2 的 github 账户配置公钥。</li>
</ol>
<blockquote>
<p>使用 ed25519 是参考了 github <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">相关文档</a></p>
</blockquote>
<ol start="2">
<li>在 <code>~/.ssh/</code> 目录下新建 <code>config</code> 文件，写入以下内容：</li>
</ol>
<blockquote>
<p>win10 路径：<code>C:\Users\Admin\.ssh</code></p>
</blockquote>
<blockquote>
<p>macOS 路径：<code>~/user/.ssh</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Default GitHub</span><br><span class="line">Host user1</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/user1_publickey</span><br><span class="line"></span><br><span class="line">Host user2</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/user2_publickey</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>回到命令行，执行命令：<code>$ git remote set-url origin git@user1:user1/repositorieName1.git</code>，修改默认的关联。也可以把原有的默认关联删除，重新添加。</li>
<li>再继续执行命令：<code>$ git remote add origin2 git@user2:user2/repositorieName2.git</code>，新添加一个 user2 的关联。</li>
<li>此时执行命令：<code>$ git remote -v</code>，应是以下结果：</li>
</ol>
<blockquote>
<p>如果 clone 用户名 user1 的远程仓库，命令要相应修改为 <code>git clone -b main git@user1:user1/repositorieName1.git</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin2  git@user2:user2/repositorieName2.git (fetch)</span><br><span class="line">origin2  git@user2:user2/repositorieName2.git (push)</span><br><span class="line">origin  git@user1:user1/repositorieName1.git (fetch)</span><br><span class="line">origin  git@user1:user1/repositorieName1.git (push)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>验证。可分别执行命令：<code>$ ssh -T git@user1</code>、<code>$ ssh -T git@user2</code>，均出现连接成功提示。至此，实现了多个 SSH 公钥连接多个 github 远程仓库的需求。</li>
</ol>
<blockquote>
<p>要加 <code>git@</code> 前缀，否则提示 <code>Permission denied (publickey)</code>（win10 环境，macOS 未实测）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi user1! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi user2! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：github 添加的是如果是 deploy key，会显示库名称，如：username&#x2F;xxx</p>
</blockquote>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>修改-host-表开启-gist</title>
    <url>/2022/12/26/%E4%BF%AE%E6%94%B9-host-%E8%A1%A8%E5%BC%80%E5%90%AF-gist/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>win 10 的 hosts 文件路径如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc\hosts.ics</span><br></pre></td></tr></table></figure>

<p>macOS 10.14.6 的 hosts 文件直接通过终端进入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.30.253.118 gist.github.com</span><br><span class="line">192.30.253.119 gist.github.com</span><br></pre></td></tr></table></figure>

<p>注：该地址可能会变动，可进入 <a href="https://ipchaxun.com/gist.github.com/">https://ipchaxun.com/gist.github.com/</a> 查询地址，目前最新的地址如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">140.82.112.4</span><br><span class="line">140.82.114.4 </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>将-VSCode-添加到右键菜单</title>
    <url>/2022/12/07/%E5%B0%86-VSCode-%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Windows 10 或 macOS 10.14 下安装 VSCode 后，右键快速打开选项并没有快捷启动。</p>
<h2 id="Windows-10-解决方案"><a href="#Windows-10-解决方案" class="headerlink" title="Windows 10 解决方案"></a>Windows 10 解决方案</h2><p>通过注册表添加三个位置的快速打开选项：文件、目录、桌面（目录内）的空白位置。</p>
<h3 id="1、添加至文件的右键菜单"><a href="#1、添加至文件的右键菜单" class="headerlink" title="1、添加至文件的右键菜单"></a>1、添加至文件的右键菜单</h3><p>定位注册表中如下位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CLASSES_ROOT\*\shell</span><br></pre></td></tr></table></figure>

<p>参考以下结构，在 shell 下新建一个项 Open with VSCode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Open with VSCode</span><br><span class="line">    ├── (默认)（在右键菜单显示的名称）</span><br><span class="line">    ├── Icon（在右键菜单显示的图标路径）</span><br><span class="line">    └── command</span><br><span class="line">        └── (默认)（执行的命令行及应用路径）</span><br></pre></td></tr></table></figure>

<p>添加相应字符串值即可实现点击文件的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open with VSCode&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Open with VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2、添加至目录的右键菜单"><a href="#2、添加至目录的右键菜单" class="headerlink" title="2、添加至目录的右键菜单"></a>2、添加至目录的右键菜单</h3><p>定位至 <code>HKEY_CLASSES_ROOT\Directory\shell</code>，按照相同结构设置即可实现点击目录的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open Folder as VSCode Project&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h3 id="3、添加至桌面（目录内）的空白位置的右键菜单"><a href="#3、添加至桌面（目录内）的空白位置的右键菜单" class="headerlink" title="3、添加至桌面（目录内）的空白位置的右键菜单"></a>3、添加至桌面（目录内）的空白位置的右键菜单</h3><p>定位至 <code>HKEY_CLASSES_ROOT\Directory\Background\shell</code>，按照相同结构设置即可实现点击桌面（目录内）的空白位置的右键菜单进入 VSCode。导出内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]</span><br><span class="line">&quot;Icon&quot;=&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe&quot;</span><br><span class="line">@=&quot;Open Folder as VSCode Project&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]</span><br><span class="line">@=&quot;\&quot;C:\\MyProject\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="macOS-10-14-解决方案"><a href="#macOS-10-14-解决方案" class="headerlink" title="macOS 10.14 解决方案"></a>macOS 10.14 解决方案</h2><p>通过快速操作添加两个位置的快速打开选项：文件、目录。</p>
<h3 id="1、打开自动操作，文稿类型选取-快速操作"><a href="#1、打开自动操作，文稿类型选取-快速操作" class="headerlink" title="1、打开自动操作，文稿类型选取 快速操作"></a>1、打开自动操作，文稿类型选取 <code>快速操作</code></h3><img src="/2022/12/07/%E5%B0%86-VSCode-%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/1.png" class="">

<h3 id="2、左侧资源库选择-文件和文件夹，对应其右侧子菜单栏双击-打开访达项目，"><a href="#2、左侧资源库选择-文件和文件夹，对应其右侧子菜单栏双击-打开访达项目，" class="headerlink" title="2、左侧资源库选择 文件和文件夹，对应其右侧子菜单栏双击 打开访达项目，"></a>2、左侧资源库选择 <code>文件和文件夹</code>，对应其右侧子菜单栏双击 <code>打开访达项目</code>，</h3><h3 id="3、在-工作流程收到当前-选择-文件或文件夹，位于-选择-访达"><a href="#3、在-工作流程收到当前-选择-文件或文件夹，位于-选择-访达" class="headerlink" title="3、在 工作流程收到当前 选择 文件或文件夹，位于 选择 访达"></a>3、在 <code>工作流程收到当前</code> 选择 <code>文件或文件夹</code>，<code>位于</code> 选择 <code>访达</code></h3><h3 id="4、在-打开方式-找到-Visual-Studio-Code-app"><a href="#4、在-打开方式-找到-Visual-Studio-Code-app" class="headerlink" title="4、在 打开方式 找到 Visual Studio Code.app"></a>4、在 <code>打开方式</code> 找到 <code>Visual Studio Code.app</code></h3><img src="/2022/12/07/%E5%B0%86-VSCode-%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/2.png" class="">

<h3 id="5、完成以上设置后，cmd-S-将该快速操作保存为-Open-with-VSCode-即可"><a href="#5、完成以上设置后，cmd-S-将该快速操作保存为-Open-with-VSCode-即可" class="headerlink" title="5、完成以上设置后，cmd+S 将该快速操作保存为 Open with VSCode 即可"></a>5、完成以上设置后，<code>cmd+S</code> 将该快速操作保存为 <code>Open with VSCode</code> 即可</h3>]]></content>
      <categories>
        <category>未分类</category>
      </categories>
      <tags>
        <tag>未标记</tag>
      </tags>
  </entry>
  <entry>
    <title>有关-Payload-在维基百科的释义</title>
    <url>/2022/12/26/%E6%9C%89%E5%85%B3-Payload-%E5%9C%A8%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91%E7%9A%84%E9%87%8A%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<h2 id="Payload-computing"><a href="#Payload-computing" class="headerlink" title="Payload (computing)"></a>Payload (computing)</h2><p>In computing and telecommunications, the payload is the part of transmitted data that is the actual intended message. Headers and metadata are sent only to enable payload delivery.</p>
<p>在计算和通信中，有效载荷是传输数据的一部分，是实际要发送的消息。报头和元数据仅用于支持有效载荷的传递。</p>
<p>In the context of a computer virus or worm, the payload is the portion of the malware which performs malicious action.</p>
<p>在计算机病毒或蠕虫的上下文中，有效载荷是执行恶意行为的恶意软件的一部分。</p>
<p>The term is borrowed from transportation, where payload refers to the part of the load that pays for transportation.</p>
<p>这个术语是从「运输」一词借用而来的，「有效载荷」指的是支付运输费用的那部分载荷。</p>
<h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><p>In computer security, the payload is the part of the private user text which could also contain malware such as worms or viruses which performs the malicious action; deleting data, sending spam or encrypting data.[3] In addition to the payload, such malware also typically has overhead code aimed at simply spreading itself, or avoiding detection.</p>
<p>在计算机安全中，有效载荷是私人用户文本的一部分，它也可能包含恶意软件，如蠕虫或执行恶意行为的病毒；删除数据、发送垃圾邮件或加密数据。除了有效载荷，这种恶意软件通常也有一些开销代码，目的是简单地传播自己，或者避免检测。</p>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><p>In computer programming, the most common usage of the term is in the context of message protocols, to differentiate the protocol overhead from the actual data. For example, a JSON web service response might be:</p>
<p>在计算机编程中，该术语最常见的用法是在消息协议上下文中使用，以将协议开销与实际数据区分开来。例如，JSON web 服务响应可能是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The string Hello, world! is the payload, while the rest is protocol overhead.</p>
<p>字符串 <code>Hello, world!</code> 为有效负载，其余为协议开销。</p>
<h2 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h2><p>In the computer networking, data to be transmitted is the payload, but is almost always encapsulated in some type of a frame composed of framing bits and a frame check sequence.[4][5] Examples are Ethernet frames, Point-to-Point Protocol (PPP) frames, Fibre Channel frames, and V.42 modem frames.</p>
<p>在计算机网络中，要传输的数据是有效载荷，但几乎总是封装在由帧位和帧检查序列组成的某种类型的帧中。[4][5]的例子是以太网帧、点对点协议（PPP）帧、光纤通道帧和 V.42 调制解调器帧。</p>
]]></content>
      <categories>
        <category>通用技术</category>
      </categories>
      <tags>
        <tag>payload</tag>
      </tags>
  </entry>
  <entry>
    <title>部署-ubuntu-服务器</title>
    <url>/2023/03/06/%E9%83%A8%E7%BD%B2-ubuntu-%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<span id="more"></span>

<p>本例使用系统版本为 Ubuntu 22.04.2 LTS (GNU&#x2F;Linux 5.19.0-35-generic x86_64)</p>
<blockquote>
<p>提示：win 环境下最好使用 UltraISO 烧写镜像文件。经实测，按照官方文档推荐的 balenaEtcher 有损坏 U 盘风险。</p>
</blockquote>
<h2 id="安装-ssh"><a href="#安装-ssh" class="headerlink" title="安装 ssh"></a>安装 ssh</h2><p>执行下列命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>验证服务是否启动：<code>sudo systemctl status ssh</code></p>
<h2 id="安装-Mariadb"><a href="#安装-Mariadb" class="headerlink" title="安装 Mariadb"></a>安装 Mariadb</h2><p>两种主要方式：</p>
<p>1、Repositories 安装方式：<code>https://mariadb.org/download/?t=repo-config&amp;d=22.04+%22jammy%22&amp;v=10.11&amp;r_m=neusoft</code></p>
<p>2、从 <code>https://archive.mariadb.org/mariadb-10.11.2/bintar-linux-systemd-x86_64/</code> 获得链接，直接下载压缩包</p>
<blockquote>
<p>本地二进制压缩包链接：<code>https://archive.mariadb.org/mariadb-10.11.2/bintar-linux-systemd-x86_64/mariadb-10.11.2-linux-systemd-x86_64.tar.gz</code></p>
</blockquote>
<p>本例采用第一种。依次执行下列命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https curl</span><br><span class="line">sudo curl -o /etc/apt/trusted.<span class="property">gpg</span>.<span class="property">d</span>/mariadb_release_signing_key.<span class="property">asc</span> <span class="string">&#x27;https://mariadb.org/mariadb_release_signing_key.asc&#x27;</span></span><br><span class="line">sudo sh -c <span class="string">&quot;echo &#x27;deb https://mirrors.neusoft.edu.cn/mariadb/repo/10.11/ubuntu jammy main&#x27; &gt;&gt;/etc/apt/sources.list&quot;</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mariadb-server</span><br></pre></td></tr></table></figure>

<p>3、验证服务是否启动：<code>sudo systemctl status mariadb</code></p>
<blockquote>
<p>注意：安装完成后要执行 <code>sudo -i</code> 切换 root 再通过 <code>mariadb -u root</code> 进入设置密码：<code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;MyNewPass4!&#39;;</code></p>
</blockquote>
<p>4、配置文件</p>
<p>配置文件路径为：<code>/etc/mysql/mariadb.conf.d/50-server.cnf</code></p>
<p>5、取消 IP 限制</p>
<p>当执行 <code>netstat -an|grep 3306</code> 命令发现如下反馈，说明此时无法远程连接数据库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ netstat -an|grep <span class="number">3306</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>          <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               <span class="variable constant_">LISTEN</span></span><br></pre></td></tr></table></figure>

<p>打开配置文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mariadb.<span class="property">conf</span>.<span class="property">d</span>/<span class="number">50</span>-server.<span class="property">cnf</span></span><br></pre></td></tr></table></figure>

<p>找到 <code>bind-address = 127.0.0.1</code> 注释掉。</p>
<blockquote>
<p>可能需要安装 vim 编辑器，执行 <code>sudo apt-get install vim</code></p>
</blockquote>
<h2 id="部署-JDK"><a href="#部署-JDK" class="headerlink" title="部署 JDK"></a>部署 JDK</h2><p>以 corretto 为例。按相应 JDK 版本依次执行命令：</p>
<p>官方文档：<a href="https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/generic-linux-install.html">https://docs.aws.amazon.com/corretto/latest/corretto-17-ug/generic-linux-install.html</a></p>
<p>1、JDK11</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &#x27;deb https://apt.corretto.aws stable main&#x27;</span><br><span class="line">sudo apt-get update; sudo apt-get install -y java-11-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<p>2、JDK17</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &#x27;deb https://apt.corretto.aws stable main&#x27;</span><br><span class="line">sudo apt-get update; sudo apt-get install -y java-17-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<p>3、卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dpkg --remove java-11-amazon-corretto-jdk</span><br><span class="line">sudo dpkg --remove java-17-amazon-corretto-jdk</span><br></pre></td></tr></table></figure>

<h2 id="修改本地网络地址"><a href="#修改本地网络地址" class="headerlink" title="修改本地网络地址"></a>修改本地网络地址</h2><p>1、固定 IP</p>
<p>通过 <code>ip a</code> 命令查看网咖信息。修改前：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ip a</span><br><span class="line"><span class="number">1</span>: <span class="attr">lo</span>: &lt;<span class="variable constant_">LOOPBACK</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="variable constant_">UNKNOWN</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: <span class="attr">ens33</span>: &lt;<span class="variable constant_">BROADCAST</span>,<span class="variable constant_">MULTICAST</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">1500</span> qdisc fq_codel state <span class="variable constant_">UP</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:0<span class="attr">c</span>:<span class="number">29</span>:<span class="attr">cb</span>:<span class="attr">bf</span>:c6 brd <span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet <span class="number">192.168</span><span class="number">.160</span><span class="number">.133</span>/<span class="number">24</span> brd <span class="number">192.168</span><span class="number">.160</span><span class="number">.255</span> scope <span class="variable language_">global</span> dynamic noprefixroute ens33</span><br><span class="line">       valid_lft 1555sec preferred_lft 1555sec</span><br><span class="line">    inet6 <span class="attr">fe80</span>::85<span class="attr">bd</span>:<span class="attr">d35d</span>:<span class="attr">f025</span>:dcf4/<span class="number">64</span> scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>查看 <code>/etc/netplan</code> 网络配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ls /etc/netplan</span><br><span class="line"><span class="number">01</span>-network-manager-all.<span class="property">yaml</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>sudo vim /etc/netplan/*.yaml</code>，添加以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Let</span> <span class="title class_">NetworkManager</span> manage all devices on <span class="variable language_">this</span> system</span><br><span class="line"><span class="attr">network</span>:</span><br><span class="line">    <span class="attr">version</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">renderer</span>: <span class="title class_">NetworkManager</span></span><br><span class="line">    <span class="attr">ethernets</span>:</span><br><span class="line">       <span class="attr">ens33</span>:</span><br><span class="line">          <span class="attr">addresses</span>: [<span class="number">192.168</span><span class="number">.160</span><span class="number">.134</span>/<span class="number">24</span>]</span><br><span class="line">          <span class="attr">routes</span>:</span><br><span class="line">            - <span class="attr">to</span>: <span class="keyword">default</span></span><br><span class="line">              <span class="attr">via</span>: <span class="number">192.168</span><span class="number">.160</span><span class="number">.2</span></span><br><span class="line">          <span class="attr">nameservers</span>:</span><br><span class="line">             <span class="attr">addresses</span>: [<span class="number">180.76</span><span class="number">.76</span><span class="number">.76</span>, <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>]</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>ens33：拟设置的网卡名称</li>
<li>addresses：拟设置的固定 ip 和掩码。掩码 24 表示前 24 位有效，剩下的 8 位可以是 0-254 之间的任一地址（255 为广播地址），例如 255.255.255.255 是 IPv4 中最大可能的 IP 地址，每个数字（255）都是由 8 个比特位表示的，每个比特位非 0 即 1，最大值即为 11111111，因此掩码 24 表示 255.255.255.0。同理，xxx.xxx.xxx.xxx&#x2F;32，表示掩码为 192.168.0.0</li>
<li>routes：网关地址。default 也可以写为 <code>0.0.0.0/0</code> 或 <code>0/0</code></li>
<li>nameservers：DNS 地址</li>
</ul>
<blockquote>
<p>网关若使用 <code>gateway4</code> 属性会提示 <code>** (process:9908): WARNING **: 22:03:51.792: gateway4 has been deprecated, use default routes instead. See the &#39;Default routes&#39; section of the documentation for more details.</code></p>
</blockquote>
<p>执行 <code>sudo netplan try</code> 使配置生效。修改后：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ubuntu@ubuntu-virtual-<span class="attr">machine</span>:~$ ip a</span><br><span class="line"><span class="number">1</span>: <span class="attr">lo</span>: &lt;<span class="variable constant_">LOOPBACK</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">65536</span> qdisc noqueue state <span class="variable constant_">UNKNOWN</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: <span class="attr">ens33</span>: &lt;<span class="variable constant_">BROADCAST</span>,<span class="variable constant_">MULTICAST</span>,<span class="variable constant_">UP</span>,<span class="variable constant_">LOWER_UP</span>&gt; mtu <span class="number">1500</span> qdisc fq_codel state <span class="variable constant_">UP</span> group <span class="keyword">default</span> qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:0<span class="attr">c</span>:<span class="number">29</span>:<span class="attr">cb</span>:<span class="attr">bf</span>:c6 brd <span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:<span class="attr">ff</span>:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet <span class="number">192.168</span><span class="number">.160</span><span class="number">.134</span>/<span class="number">24</span> brd <span class="number">192.168</span><span class="number">.160</span><span class="number">.255</span> scope <span class="variable language_">global</span> noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 <span class="attr">fe80</span>::20<span class="attr">c</span>:29<span class="attr">ff</span>:<span class="attr">fecb</span>:bfc6/<span class="number">64</span> scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>2、开启 dhcp</p>
<p>无需再设置 addresses 属性（实际上 routes 属性也可以移除）。配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Let</span> <span class="title class_">NetworkManager</span> manage all devices on <span class="variable language_">this</span> system</span><br><span class="line"><span class="attr">network</span>:</span><br><span class="line">    <span class="attr">version</span>: <span class="number">2</span></span><br><span class="line">    <span class="attr">renderer</span>: <span class="title class_">NetworkManager</span></span><br><span class="line">    <span class="attr">ethernets</span>:</span><br><span class="line">       <span class="attr">ens33</span>:</span><br><span class="line">          <span class="attr">dhcp4</span>: <span class="literal">true</span></span><br><span class="line">          <span class="attr">routes</span>:</span><br><span class="line">            - <span class="attr">to</span>: <span class="keyword">default</span></span><br><span class="line">              <span class="attr">via</span>: <span class="number">192.168</span><span class="number">.160</span><span class="number">.2</span></span><br><span class="line">          <span class="attr">nameservers</span>:</span><br><span class="line">             <span class="attr">addresses</span>: [<span class="number">180.76</span><span class="number">.76</span><span class="number">.76</span>, <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span>]</span><br></pre></td></tr></table></figure>

<h2 id="其他工具或命令"><a href="#其他工具或命令" class="headerlink" title="其他工具或命令"></a>其他工具或命令</h2><p>查看 CPU、内存使用情况：<code>sudo apt-get install htop</code></p>
<h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>一般系统默认带有防火墙。安装命令：<code>sudo apt install ufw</code></p>
<p>1、允许 ssh（<strong>特别注意开启，否则下次连接将无法远程连接</strong>）</p>
<p>执行 <code>sudo ufw allow ssh</code> 或 <code>sudo ufw allow 22</code> 创建防火墙规则，允许 22 端口上的所有连接。</p>
<p>2、启用 ufw</p>
<p>执行 <code>sudo ufw enable</code>，确认启动后可通过 <code>sudo ufw status verbose</code> 查看状态。</p>
<blockquote>
<p>注：当状态为 <code>Status: inactive</code> 说明 ufw 未启动。如果处于活动状态，将显示 <code>Status: active</code>，并列出所有规则。</p>
</blockquote>
<p>3、拒绝连接</p>
<p>执行 <code>sudo ufw deny from 192.1.110.24</code>，则拒绝全部来自该 IP 的连接。</p>
<p>4、删除规则</p>
<p>执行 <code>sudo ufw status numbered</code> 查看规则列表，获知规则的序号，再执行 <code>sudo ufw delete 3</code>（删除第 3 条规则）</p>
<p>5、端口规则设置</p>
<p>ufw 默认的策略是允许出，不允许进，这个可以在配置文件 <code>/etc/default/ufw</code> 中看到。出规则需要配置。</p>
<p>配置文件片段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DEFAULT_INPUT_POLICY</span> = <span class="string">&quot;DROP&quot;</span>;</span><br><span class="line"><span class="variable constant_">DEFAULT_OUTPUT_POLICY</span> = <span class="string">&quot;ACCEPT&quot;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>允许 http 连接：<code>sudo ufw allow http</code> 或 <code>sudo ufw allow 80</code></li>
<li>阻止 http 连接：<code>sudo ufw denty http</code> 或 <code>sudo ufw denty 80</code></li>
<li>开放特定端口范围：<code>sudo ufw allow 3000:3007/tcp</code></li>
</ul>
<blockquote>
<p>注：如果不指定协议，会自动允许 tcp 和 udp 两种协议。</p>
</blockquote>
<ul>
<li>限制 IP 允许连接的端口：<code>sudo ufw allow from 192.1.110.24 to any port 22</code></li>
<li>配合子网掩码限制网段：<code>sudo ufw allow from 192.1.110.24/24</code></li>
<li>监听来自指定网卡的连接：<code>sudo ufw allow in on eth1 to any port 3306</code></li>
</ul>
<p>6、停止和重置</p>
<ul>
<li>停用 ufw：<code>sudo ufw disable</code></li>
<li>重置 ufw 规则：<code>sudo ufw reset</code></li>
</ul>
<h2 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令"></a>其他相关命令</h2><ul>
<li>显示所有连接：<code>lsof -i</code></li>
<li>仅获取 ipv6 流量：<code>lsof -i6</code></li>
<li>显示端口信息：<code>lsof -i :5432</code></li>
</ul>
<blockquote>
<p>lsof 命令参数：<code>lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</code></p>
</blockquote>
<ul>
<li>列出所有：<code>netstat -a </code></li>
<li>使用 ip 地址列出所有监听状态的 tcp 端口以及程序名：<code>netstat -atnlp</code></li>
</ul>
<blockquote>
<p>netstat 命令参数：</p>
</blockquote>
<ul>
<li>显示所有连接中的 Socket：<code>-a</code> 或 <code>--all</code></li>
<li>显示正在使用 Socket 的程序识别码和程序名称：<code>-p</code> 或 <code>--programs</code></li>
<li>显示 TCP 传输协议的连线状况：<code>-t</code> 或 <code>--tcp</code></li>
<li>显示 UDP 传输协议的连线状况：<code>-u</code> 或 <code>--udp</code></li>
</ul>
<p>显示结果参数释义：</p>
<ul>
<li><p><code>Proto</code>：协议名（tcp 协议还是 udp 协议还是 unix 协议）</p>
</li>
<li><p><code>Recv-Q</code>：网络接收队列。表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走，recv()如果接收队列 Recv-Q 一直处于阻塞状态，可能是遭受了拒绝服务 denial-of-service 攻击；</p>
</li>
<li><p><code>send-Q</code>：网路发送队列。对方没有收到的数据或者说没有 Ack 的,还是本地缓冲区.</p>
</li>
<li><p><code>Local Address</code>：表示监听服务器上对应的 ip 地址的对应端口 (0.0.0.0 表示本地所有 ip)</p>
</li>
<li><p><code>Foreign Address</code>：与本机端口通信的外部 socket。显示规则与 Local Address 相同</p>
</li>
<li><p><code>State</code>：链路状态。共有 12 中可能的状态</p>
<ul>
<li><p>LISTEN ：正在监听端口，可以接受连接</p>
</li>
<li><p>SYN_SENT：socket 正在积极尝试建立一个连接，即处于发送后连接前的一个等待但未匹配进入连接的状态</p>
</li>
<li><p>SYN_RECV：收到对方的连接建立请求</p>
</li>
<li><p>ESTABLISHED：代表一个打开的连接，双方可以进行或已经在数据交互</p>
</li>
<li><p>FIN_WAIT1：socket 已关闭，连接正在或正要关闭</p>
</li>
<li><p>CLOSE_WAIT：等待关闭。当对方关闭一个 SOCKET 后发送 FIN 报文给自己，系统毫无疑问地会回应一个 ACK 报文给对方，此时则进入到 CLOSE_WAIT 状态。接下来需要考虑的事情是察看你是否还有数据发送给对方，如果没有就可以关闭这个 SOCKET，发送 FIN 报文给对方，也即关闭连接。所以在 CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</p>
</li>
<li><p>FIN_WAIT2：连接已关闭，并且 socket 正在等待远端结束</p>
</li>
<li><p>LAST_ACK：被动关闭一方在发送 FIN 报文后，最后等待对方的 ACK 报文。当收到 ACK 报文后，也即可以进入到 CLOSED 可用状态</p>
</li>
<li><p>TIME_WAIT：socket 正在等待关闭处理仍在网络上的数据包。表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 后即可回到 CLOSED 可用状态。如果 FIN_WAIT_1 状态下，收到了对方同时带 FIN 标志和 ACK 标志的报文时，可以直接进入到 TIME_WAIT 状态，而无须经过 FIN_WAIT_2 状态。</p>
</li>
<li><p>CLOSING：比较少见，等待远程 TCP 对连接中断的确认</p>
</li>
<li><p>CLOSED：没有任何连接状态。被动关闭端在接受到 ACK 包后，就进入该状态。连接结束</p>
</li>
<li><p>UNKNOWN：未知的状态</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>部署和安装</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>
